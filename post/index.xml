<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on さよならインターネット</title>
    <link>https://blog.kenjiskywalker.org/post/</link>
    <description>Recent content in Posts on さよならインターネット</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 22 Jan 2019 07:50:54 +0900</lastBuildDate>
    
	<atom:link href="https://blog.kenjiskywalker.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>よりよい会議のために、「最高品質の会議術」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2019/01/22/conference-technique/</link>
      <pubDate>Tue, 22 Jan 2019 07:50:54 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2019/01/22/conference-technique/</guid>
      <description>最高品質の会議術著者 : 前田鎌利ダイヤモンド社発売日 : 2018-03-29ブクログでレビューを見る» 結論 よりよい会議をひらくためには準備が全て（リマインドは1日前、1時間前）  会議の前に何を決めたいか、何を相談したいかを伝えておく
 会議の資料を共有して、考えておいてほしいところを伝える
  タイムキーパー大事  議論があるのは良いが制限は必要。長くなるなら会議のあとで
 会議を小気味よく進めるためにもファシリテーターは時間は意識する
  背景 むかしはこんな感じだった  「指示」「命令」に慣れた「自分の頭で考えない」メンバーが集まった会議ではディスカッションは成立しません。その結果、「マネジャーの独演会」や「数人のメンバーが議論を牛耳る不毛な会議」が生まれてしまうのです
 いまのなやみ  会議の内容に対してに参加するメンバーが多すぎる気がする
 人数が多いせいか、会話に参加しない人が出てきたり、覇気がない気がする
 時間 x 人数に対しての結果がかんばしくない気がする
 ダラダラしてしまっている気がする
  気がする、という雰囲気のものが多かった。
最高品質の会議術 先人の知恵を借りた。
そもそも、何のために会議が必要なのか？
1. 「決めて、断つ」ため  何かを決めるときには決断しなければならない。決断するとは「決めて、断つ」ことを指します。Ａ案Ｂ案があるときには、どちらかを取って、どちらかを断ち切らなければならない。そして、もしかしたら選択を間違えるかもしれない。その恐怖心も断ち切らなければならない。つまり、意思決定とは「断つ」覚悟を決めることなのです。
 そして
 本来、「ネクストステップ」が示されない“報告”は報告と呼ぶに値しない、と。「ネクストステップ」とは、報告内容を受けて、「これからどうするのか？」を提案するということです。つまり、「報告＋ネクストステップ」が示されて、はじめて報告と認識すべきなのです。
 「決めて、断つ」、そして次になにをするのかを決める。
それは会って議論する価値のあるモノ。
2. 相談のため  「報告＋ネクストステップ」が終われば、「相談」に移ります。 ここで重要なのは、どんな些細なことであっても、ネガティブ情報をきちんと伝えることです。いや、まだ“些細な問題”に留まっている段階で伝えることに大きな意味があるのです。 なぜなら、「上司を絶対に驚かせてはならない」からです。トラブルが“小さな芽”のうちであれば、上司も手の打ちようがありますし、むしろ、上司のウデの見せどころとなる可能性すらあります。しかし、突然、大きな問題に直面した上司は、上層部から責任追及を受ける立場に立ちますし、トラブル対応に追われることになります。そして、“小さな芽”のうちに問題を報告しなかった部下に対する心証を決定的に損ねる結果を招くのです。
 車のハンドルは、細かく切っていった方がコースをうまく走れる。
ハンドルをどちらにどれぐらい切るべきか、現実を理解、共有する。
それは会って議論する価値のあるモノ。
決めて断つ、自分たちが今いる場所を理解する。
世の中のすべては冒険と同じだと考えている。
例えば、山を登るのか、川を下るのかを決めて、断つ。
川を下る決断をしたとして、自分たちは意図した道を歩けているのか、けが人は？食料は？位置は合っているか？など。
常にお互いを助け合える状況にするために、会議は必要だと理解した。
この本を読んで改めて理解、気付いた点。 準備が万事、万事は準備 不要な会議</description>
    </item>
    
    <item>
      <title>沖縄の米軍施設で働いている家族の家に1週間ホームステイに行った</title>
      <link>https://blog.kenjiskywalker.org/2017/02/06/homestay-in-okinawa/</link>
      <pubDate>Mon, 06 Feb 2017 20:33:02 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2017/02/06/homestay-in-okinawa/</guid>
      <description>題名の通りだけど沖縄に家族でホームステイに行った。
1週間ずっと英語で話していた。
米軍施設の中のショッピングモールやレストランでご飯を食べたりして
国内にいながら海外にいるような体験ができてよかった。
細かい話が知りたければ個別に声をかけてほしい。</description>
    </item>
    
    <item>
      <title>「最前線のリーダーシップ」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2017/02/03/leadership-on-the-line/</link>
      <pubDate>Fri, 03 Feb 2017 16:33:05 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2017/02/03/leadership-on-the-line/</guid>
      <description>元々NHKの番組を見ていたので、内容はその踏襲だった。
内容の詳細についてはこちらのブログが詳しい。
 Setithy Sowis - ロナルド・ハイフェッツ教授のリーダーシップ論 [1&amp;frasl;2]
  この本で特に興味深かったのは
技術的な解決と適用が必要な解決は違う  という点であり、技術的な解決は実行すれば解決される。
「ある人が今まで信じてきたり絶対だと思ってきたことを変える必要がある」
この適応が必要の課題の解決はとても難しく、時間も要する。
この適応は&amp;rdquo;誰かが&amp;rdquo;ではなく&amp;rdquo;我々の&amp;rdquo;課題であり、&amp;rdquo;誰か&amp;rdquo;が未知なる力ですべてを解決することはできない。
必ず失敗してしまうだろう。のような内容で、とても厳しさがあったが
「適応が必要な課題」というのはなるほどな〜と考えさせられた。</description>
    </item>
    
    <item>
      <title>PET-CT受けてきた</title>
      <link>https://blog.kenjiskywalker.org/2017/01/06/pet/</link>
      <pubDate>Fri, 06 Jan 2017 16:21:38 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2017/01/06/pet/</guid>
      <description>今年35歳になるのと親戚のおじさんが若くしてガンで亡くなったので
受けてきた。結果は特に問題はなかった。
去年MYCODEが半額だったのでカミさんと受けた。
特にこれといった悲しい結果も非常に面白いこともなかった。
何もないことは良いことだ。今年も頑張っていこう</description>
    </item>
    
    <item>
      <title>「新しい働き方　幸せと成果を両立する「モダンワークスタイル」のすすめ」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2016/12/17/new-working-style/</link>
      <pubDate>Sat, 17 Dec 2016 21:05:03 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/12/17/new-working-style/</guid>
      <description>日本マイクロソフトはなぜ「女性離職率40%減」を実現できたか - 現代ビジネス
この記事を読んで無茶苦茶感動し、大企業のマイクロソフトがここまで徹底的に調査実践していたのか！！！
このすさまじい血と汗の結晶が書籍には詰まっているのだろう！！！
と非常に期待して読ませて頂いたが、正直上記記事のような
調査、実践、反証、実践を泥臭く続けてきた内容の話は少なく(記事の表がほぼ全に近い)、
結果的なお話や、ご自身の体験談や概要的な話が多かった。
組織に対しての新しい働き方を提唱する内容なら、
テレワーク導入に際しての課題、仮説、実践、反証、実践の繰り返しを載せて頂きたかった。
個人に対しての新しい働き方を提唱する内容なら、
SESSION-3以降の自己啓発に近いご自身の経験の話を前面に出してほしかった。
気になった点 書籍内のSkype for Business押しや、
 日本マイクロソフトでは、「テレワーク勤務制度」を採用してからというもの、日本企業によくあるような、
始業時間にオフィスにいないからといって懲罰の対象になることはもうありません。
コアタイムもないので、エンジニアなどの特定業務に就いている従業員以外は、業務遂行に適切な場所で、自由な時間に働くことができています
 のような文などがあり、あれ、エンジニアは自由ではないの？と疑問に思うような記述も少なくなく
せめて巻末にでも、色々な背景を持った色々な職務の方が
テレワーク導入前と導入後にどう変わったかというインタビューが掲載されていると良かった。
とはいっても  テレワークという方法を目的にするな（勤務時間や勤務場所が固定されなくなることで得られるものはなにか？） 方法より成果を求める 1on1は必要(特に働きすぎな人などは見える化して上長がケアするようにしている) やっぱり評価制度は見える化しないと不満とかが出るんだろうな&amp;hellip; テレワークになって会議がめっちゃ増えているように読めるんだけど会議もアチーブモア実践してるのかな？ たしかに環境の変化に柔軟に対応できるようにしておくってのが一番大事だよな この本をきっかけに越川さんに興味が湧いて調べれば調べるほど素晴らしい人でひたすら尊敬しかなくなっている  など色々学びがあった。めちゃくちゃ偉い人だからお会い出来ることはまずないだろうけど
もしお会い出来たら、テレワーク導入時の苦労話などを是非とも聞いてみたい。
2017年 とにかく僕たちは、善意から生まれたフォードがつくったこの世界の仕組みから
さらにもう1階層アセンションする必要があるんだ&amp;hellip;</description>
    </item>
    
    <item>
      <title>itamae が nigiru ための nigiru.rb という社内プロビジョニングツールについて</title>
      <link>https://blog.kenjiskywalker.org/2016/12/07/nigiru/</link>
      <pubDate>Wed, 07 Dec 2016 22:01:16 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/12/07/nigiru/</guid>
      <description>このエントリは Classi Advent Calendar 2016 9日目の記事です。
itamaeについて http://itamae.kitchen  Configuration management tool inspired by Chef,
but simpler and lightweight. Formerly known as Lightchef.
 chefに疲れた人類は一縷の望みを懐き向かった先こそがitamae。
使い方 ここを見てもらえばわかる通り、chefを利用したことがある人は特に迷いなく利用できる。
利用したことがなくても第一歩については一瞬で実行可能なのでとにかくチャレンジしてみてほしい。
itamaeは裏側でSpecinfraを利用していたりしてそれもかわいい。
コード全体の見通しがよく、問題があっても（今まで問題はない）コード見て特定できる。
見通しが良いコードは、あらゆる面において最高なので、とにかくitamaeは最高ということがわかる。
provisioning is dead ? 時代はコンテナでアプリケーションをポン置き。
まだプロビジョニングで疲弊しているの？という世界はまぁわかる。
nigiru.rb について itamaeを利用している各社においては、各々のitamae管理ツールなるものを運用していると思う。
弊社もそれ相応のものを運用しているのでこの場をお借りして軽く紹介したい。
構成 基本はBest Practiceを参考にしている
. ├── REAME.md ├── bootstrap.rb ├── cookbooks ├── initializer.rb ├── nigiru.rb ├── recipe_helper.rb ├── roles └── tools  nigiruの内部処理 option設定周りとEC2タグの確認  -n で itamae の --dry-run を呼び出し -r で role の指定 --init で initializer(OS起動時のみ実行したい処理)を指定  EC2はEC2_TAG_ROLEとEC2_TAG_STAGEという環境変数を持っており</description>
    </item>
    
    <item>
      <title>「チームが機能するとはどういうことか」を少し読んだことと #pmconfjp でDavid氏から聞いた話について</title>
      <link>https://blog.kenjiskywalker.org/2016/12/01/how-organizations-learn/</link>
      <pubDate>Thu, 01 Dec 2016 05:26:05 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/12/01/how-organizations-learn/</guid>
      <description>この記事はClassi Advent Calendar 2016 2日目の記事です。
多様な文化や職能の人と一緒に仕事を進める中で感じた、課題と学びについてのメモです。

参考  「チームが機能するとはどういうことか」を読んでておもしろかったところ - hitode909の日記 「チームが機能するとはどういうことか」を読んだ - $shibayu36-&amp;gt;blog;  要点 みんなでメシ行って仲良くなって学習しながら挑戦してこ
上の写真はJapan Product Manager Conference 2016に参加した時に
DevJamのDavid氏のスプリントの話の中で「学習」という項目があったので
よくわからずAsk the speakerで色々話した時のDavid氏から頂いたメモです。
「何をするか」ではなく「何を届けたか」にフォーカスすることと
そのスプリント期間の中で「何を学んだ」のかを話し合うみたいなことを話してたと思っていたけど
今このエントリーを書いていて、あれ、違うんじゃね？と気が付いた。
つまりDavid氏の学びは施策での学びであり、私が期待したのは
その期間でメンバーが何を学んだのかという点であった。
(もし解釈が間違っていたら教えてください)
学び 私はサッカーが好きで、よくサッカーの試合を見るのだけれど、
こういう戦術でいこうとチームの監督が決めて試合に挑んだとしても
やはり試合をはじめてみると全然うまく行かなかったり、
当初想定していたものと違う状態になったりする。本当に強いチームは
監督や選手が状況を学習し、適応して状況を打開していく。
仕事も似たようなもので、特に背景や文化の異なるメンバーが集まって
答えがなかなか見えないものに挑戦する場合には
冒頭の「チームが機能するとはどういうことか」に記載されているように
 簡単に言えば、チーミングとは、新たなアイデアを生み、答えを探し、問題を解決するために人々を団結させる働き方のことだ
 こういうものが必要不可欠になってくる。
特に、何故こうしないのか、こうあるべき、など今までの頭の使い方では
何も物事は進まなくなり、相互理解が欠落してひたすら仲が悪い組織になってしまう。
話している相手の世界はどういう文脈なのか、何故そうしたいのか、本当に解決したい課題は何か？
新卒からひたすら学校営業を続けてきた人や製本一筋の人、問題作成のプロの人や
会社に限らず、学校の先生、生徒、親御さんなど本当に色々な方とお話をする時に
例えばエンジニアとしての立場だけで物事を見てしまうと物事のあるひとつの側面でしか
物事が見れなくなってしまい、相互理解の機会を失ってしまうことがある。
 特定のタイプのリーダーシップがなければ、不確実性や不明確さに取り組むための適切な学習行動はなかなか生まれない。チーミングには、率直に述べたり質問したり考えを共有したりすることを後押しする新しいタイプのリーダーシップが必要なのだ。ひとことで言うなら、チーミングに不可欠なリーダーシップの考え方とは、学習を促す環境をつくろうとするものだ
 この話や
 仕事の成功に欠かせない知識は多様で、さまざまな場所に存在する。成功するには、グループは知識に近づき、その知識の最良の使い方について共通の理解を深め、新たな洞察を反映する方法で一体となって行動しなければならない。これはつまり、グループでの仕事はしばしば集団的学習を必要とするということである
 この話のように、
一部コミュニティで流行っている「心理的安全」というキーワードもそれに関連するもので
いかに関係するメンバー同士が忌憚なく議論をぶつけ合える場を提供するかが大事になってくる。
（もちろんめちゃくちゃ偉い人や社外の人などとの意見の出し合いでは特にそれは難しくなるが）
私は性格が悪いのでリーダーシップとは無縁な世界で生きているけど、
運良く会社の人たちが当事者意識持った人が多いので、課題意識がある人たちに集まってもらって
課題を共有してどうしたらいいすかね？みたいな感じで雑なことを聞くと
いい感じに議論が発生していい感じの答えが出てひたすら最高という状態になっている。
 最近主体的に動こうと思うようになれたのは、元同僚がそのように主体的に行動し、</description>
    </item>
    
    <item>
      <title>courseraにてHuman-Centered Designを学んだ</title>
      <link>https://blog.kenjiskywalker.org/2016/11/22/human-centerd-design/</link>
      <pubDate>Tue, 22 Nov 2016 20:56:56 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/11/22/human-centerd-design/</guid>
      <description>TL,DR  Web Content Accessibility Guidelinesやニールセンのユーザビリティ10原則 暗中模索よりも仮説と実証、フィードバックを繰り返して手を動かす 量は質を超える  本文 動機 興味本位
どのように学んだか courseraというMOOCsのサービスを利用して
UCSDのScott Klemmer氏のHuman-Centered Designの授業を受けた。
この授業は日本語字幕もあり、3 weeks となってはいるが
1回の講義が10~20分程度のものなので、比較的無理なく続けられる。
(と言っても私は3回目のチャンレジでやっと完走したが&amp;hellip;)
以下学びのメモ
デザインのアプローチ  ユーザが本当に必要なもの チームの認識を合わせるためのもの 画面に見えるものだけがデザインではない  チームの認識の齟齬に対してのアプローチ 私の環境では、
企画、営業、開発の3つの役割を持った組織が同じ製品をあつかっていても
認識が上手く合わせられず、要件や実装の手戻りが多発してしまっていた。
この解決方法としては、とにかく目に見えて動くものをつくり、
そのものを見ながらはなすべきである。
必要なのは、その場面では精度が必要なのか、
ざっくりとでも動くものが必要なのかを判断し、
できうる速度でものをつくり、そのものを見ながら関係者で認識を合わせる。
こうすることで、思い違いや勘違いなどを極力減らせる(はず)。
プロトタイプについて 本講義で印象に残った3つのプロトタイプについて記述しておく
Walter Dorwin Teague氏のBoeing社でのPrototyping 倉庫で飛行機のプロトタイプをつくり、実際に
 旅行用の荷物を持った人を連れて体験のテストをした 大陸横断と同じ時間席に座るテスト 客室乗務員が食べ物などを運ぶ際テスト  このテストを行うことで、シートの快適さや、通路の幅、荷物の棚の大きさなど
あらゆる項目を確認することができた。
 メモ
 想像とやってみることは全然違うので、 想定されるペルソナや
利用する環境が決まっているなら、実際にそのユーザに、
その環境(もしくは限りなく近い状況)でサービスを利用してもらうべき。
呼び出して使い勝手を確認する方法も利点はあるが、可能であれば
実際に利用される環境で試す方がより正確なフィードバックが得られる。
Video Prototyping 例：https://www.youtube.com/watch?v=kWsBvUnvCmg
プロモーションビデオのようなもの
利点 ペーパープロトタイピングよりも素早く試行できる。
動かなくても良いところが良い。エンジニアは動画を見て、どのような機能があれば良いか 判断しやすくなる。工数的に大勢のサポートが必要な場合や、経営者や投資家などに</description>
    </item>
    
    <item>
      <title>A Film About CoffeeをVimeo On Demandで見た</title>
      <link>https://blog.kenjiskywalker.org/2016/11/22/a-film-about-coffee/</link>
      <pubDate>Tue, 22 Nov 2016 12:40:54 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/11/22/a-film-about-coffee/</guid>
      <description>『A FILM ABOUT COFFEE』 from UPLINK Cloud on Vimeo.
渋谷にある映画館、UPLINKがVimeoを利用した映画配信を開始した。
早速昔見逃した「A Film About Coffee」を見た。
大変良かった。こういう映画もオンデマンドで見れるようになると
本当にありがたい。</description>
    </item>
    
    <item>
      <title>第95回全国高校サッカー選手権大会千葉県大会決勝を見てきた</title>
      <link>https://blog.kenjiskywalker.org/2016/11/21/watching-national-high-school-finaltournament-in-chiba/</link>
      <pubDate>Mon, 21 Nov 2016 00:33:23 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/11/21/watching-national-high-school-finaltournament-in-chiba/</guid>
      <description>高校サッカー選手権千葉県決勝、きちゃった❤️
A photo posted by kenjiskywalker (@kenjiskywalker) on Nov 19, 2016 at 7:10pm PST
 
画像は暗いけどめちゃくちゃ天気よくて暖かった(20度ぐらいあったかな？)
今年の千葉大会決勝は夏の全国の決勝と同カードであったので
(プレミアリーグでは流経大柏は厳しそう)
この2チームのうち、1チームは全国に行けないのか、もったいないな〜という気持ちと
千葉代表をかけた戦いの熱量ってどんなもんなんだろう、ということで1人で会場の蘇我まで行ってきた。
座席の後ろがジェフのコアサポおじさんたちで、流経大柏の応援が柏レイソルの応援を多用していて
何故だか俺は市船を応援したくなってきたぜ&amp;hellip;と言っていて面白かった。
どうやら屋台も観客も、J2よりも下手したら多い？などと賑わっていて、
スタジアムも大変活気づいていた。会場であるフクダ電子アリーナは初めてだったが、
噂通りの大変良いスタジアムだった。専用スタジアムはいいなぁ。
試合内容は最高に面白かった。実況の様子を記載しておく
 市立船橋太田くんのドリブルは面白い、好きだわ&amp;hellip; 菊池くんのシュートゴールラインでクリアされた！！！ 市船の原杉岡のJ内定CB vs 流経のロングスローヤバい&amp;hellip; 市船の原くん普通に上手い 流経の菊池くん上手い&amp;hellip; やってるサッカーは流経大柏の方が好きだわ 市船の真瀬くんが地味に効いている、この時間であの運動量は脅威だわ&amp;hellip; おわった、市船、王者感があるけど流経大柏も全国で見てみたかった 流経の関くんはサッカー続けるならプロで活躍できそう  など色々興奮してた。高校サッカーは観客も、小学生の親御さんや引率の地域のコーチ、
中学生や高校生、大学でサッカーを続けている大学生、大学でサッカーをやめて
彼女と一緒に観戦しに来ているイケメン大学生(個人的にはこの引退して彼女を連れてくるヤツが好き)、
地元のサッカー好きのおじさんやおばさん、ただのサッカー好きなど、多種多様な人が観戦しに来ていた。
1人で行ったので、試合中は黙ってようと思ったけど、
無意識に「うぉおお！！」「マジか&amp;hellip;」「すげぇ&amp;hellip;」
などと連呼していてヤバいおじさんだったに違いない。
帰り道、サッカー好きのおじさんたちが、何故高校サッカーはこれだけ1vs1で仕掛けるのに
Jだとチンタラしているんだろうと話してた。
私は基本的に海外厨なので意識したことはあまりないが
この高校サッカー選手権の熱量だけは、特別に好きだ。
次は毎年恒例の1回戦三ツ沢と準決勝埼スタで見るぞ〜</description>
    </item>
    
    <item>
      <title>#pmconfjp に参加してきた</title>
      <link>https://blog.kenjiskywalker.org/2016/11/08/pmconfjp-2016/</link>
      <pubDate>Tue, 08 Nov 2016 00:14:56 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/11/08/pmconfjp-2016/</guid>
      <description>イベントの感想 TL;DR  メルカリすごい。全員メルカリ見習おう。会議捨てよう。
 人事評価の話が少なくておどろいた。大きい企業は待遇が良いし小さい企業はやりがいで補えているのだろうか DevJamのDavid Hussman氏のAsk the Speakerで回答してもらった内容を消化して共有したい  長い感想 2日間の開催だったが、運営が本当にしっかりしており
1日目で要望の多かったものが翌日には改善されていたりと
これがプロダクトマネージャーなのか、と心底驚いた。
当日アンケートの結果、机が欲しい、電源が欲しい、毎セッションQAをやって欲しい、との要望が多かったため、対応いたしました。
また明日のご来場心よりお待ちしております。#pmconfjp pic.twitter.com/nCyqWNZJZ8
&amp;mdash; pmconf.jp (@pmconfjp) October 24, 2016 
また、イベントで特に象徴的だったのは、及川さんが雑務を率先してされていて
ああ、プロダクトマネージャーとはみんなが気持ちよく参加してもらうためには
ふんぞり返って偉そうにしていたり、人に指示ばかりしていてはダメなんだなと
とても感動した。特に私は既得権益への憧れが強く、行動も遅いので
本当に参考になった。
及川さんが会場の雑務みたいなことめちゃくちゃされていて、これが本物のプロダクトマネージャーの姿なのか&amp;hellip; って目に焼き付けている&amp;hellip;
&amp;mdash; kenjiskywalker (@kenjiskywalker) October 24, 2016 
得られた知見 私は西海岸のナウい最新のイケてるやり方とかは一切知らないが、
効率よく進んで黒字化したプロジェクトよりも、
不器用でも毎日深夜残業してみんなで頑張った感を出してどうにか黒字化したプロジェクトの方が
礼賛される文化をよく見てきて「帝国陸軍も他人事じゃねぇな&amp;hellip;」と日々感じていたので
イケてる最新のウェッブ企業がどのように製品をリリースしているのかは興味があった。
また、私自身が関わっている製品、サービスにおいて、人と人のコミュニケーションの問題で
なかなか上手く行かない、特に各役割の担当が別の役割の担当とのコミュニケーションを放棄して
自分達でどうにか製品を成功させようとし、その結果悲惨なものができあがり、
誰もうれしくないものが出来上がる過程を散々見てきた。
そのような地獄をどうやって回避すれば良いのか、知見を得たかった。
2日間参加して得た知見としては、業態や提供している製品やサービスの規模、
国や文化などによって違うよね、という漠然とした内容と
とにかくメルカリのスタイルを参考にソリッドにやっていくぞ！
というやっていく気持ちになった。
以下メモ
プロダクトマネージャーの実践の為に必要な環境とは 手段が目的になってはいけない、
目的ありきの手段の選択でなければならない
プロダクトマネージャーが理解される環境が必要  参考: mercariの事例 プロダクトオリエンテッドについて経営層に理解し、協力してもらう プロダクトオリエンテッド理解のある経営層がいる会社で働く  どのようにプロダクトマネージャーへ成長する場をつくるか  環境: プロダクトマネージャーの失敗への理解がある場をつくる 人: ロールモデル、参考になるプロダクトマネージャーが近くにいた  プロダクトオーナーの役割とは 関わっているプロダクトや所属している会社の規模、業態、国などに</description>
    </item>
    
    <item>
      <title>EC2のStatus Checkの変異をSNSを通してPagerDutyからSlackへ通知させる</title>
      <link>https://blog.kenjiskywalker.org/2016/07/12/ec2-status-fail-check/</link>
      <pubDate>Tue, 12 Jul 2016 11:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/07/12/ec2-status-fail-check/</guid>
      <description>EC2がちょくちょくStatus ChecksがコケてTerminateされていたので
CloudWatchで見ているStatus Checkの値の変異を見て
SNSに通知をさせている。
SNS &amp;lt;-&amp;gt; PagerDuty &amp;lt;-&amp;gt; Slack
参考URL  インスタンスのステータスチェック AWS CloudWatch Integration Guide:PagerDuty Slack Integration Guide:PagerDuty   一番良いのはEC2が立ち上がってきた時に自分自身に下記設定を導入し
自分が消える時に設定を削除するのが好ましいが、所々事情があり
下記のようなスクリプトを特定のEC2で回している。
#!/usr/bin/env ruby region = &#39;REGION&#39; # インスタンスID一覧を取得する ( --max-items XXX # インスタンス数次第 ) instance_ids = `aws --region #{region} ec2 describe-instances \ --max-items XXX \ --filters Name=tag-key,Values=Name \ | jq -r &#39;.Reservations[].Instances[].InstanceId&#39; ` # CloudWatchでStatusCheckFailed_Checkが設定されているインスタンスID一覧 ( --max-items XXX # インスタンス数次第 ) checked_instance_ids = `aws --region #{region} cloudwatch describe-alarms \ --max-items XXX \ | jq -r &#39;.</description>
    </item>
    
    <item>
      <title>特定のインスタンスIDのタグのValueを出力する</title>
      <link>https://blog.kenjiskywalker.org/2016/07/12/ec2-tag-describe-instances/</link>
      <pubDate>Tue, 12 Jul 2016 10:31:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/07/12/ec2-tag-describe-instances/</guid>
      <description> queryオプションとかよー使わんわということで個人的メモ Nameタグを出力したければこう
$ aws ec2 describe-instances \ --instance-ids i-XXXXXXXX \ --query &#39;Reservations[].Instances[].Tags[?Key==`Name`].Value&#39; \ --output text  </description>
    </item>
    
    <item>
      <title>特定のRoleのEIPが付与されているEC2がTerminateされた時に新しく起動したEC2に浮いたEIPを付与させるスクリプト</title>
      <link>https://blog.kenjiskywalker.org/2016/07/08/samsara-eip/</link>
      <pubDate>Fri, 08 Jul 2016 13:32:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/07/08/samsara-eip/</guid>
      <description>件の通り
@kenjiskywalker そんな仕組みあるの？
&amp;mdash; そのっつ (Naotoshi Seo) (@sonots) July 8, 2016 
@kenjiskywalker クレクレ
&amp;mdash; そのっつ (Naotoshi Seo) (@sonots) July 8, 2016 
今見直したら結構ひどい感じだったけど一旦公開しておく。
AWS SDK for Rubyを利用してもいいし、これぐらいならgoで書いても良いスね。
仕組み  Role - web, db, app, etc&amp;hellip; Stage - development, staging, production, etc&amp;hellip;  EC2のインスタンスそれぞれにタグの設定を入れている。
それぞれのインスタンスはAutoScalingGroup管理下にあり、
上記タグもそれぞれのAutoScalingGroupにてインスタンス起動時に付与するようになっている。
起動時に浮いたEIPをアサインさせたい Ref: Qiita:AmazonLinuxのcloud-initについての調査メモ
cloud-initのいい感じのオフィシャルドキュメントってどこにあるんだ&amp;hellip;
 /var/lib/cloud/scripts/per-boot/004_assign-elastic-ip.rb  #!/usr/bin/env ruby # # 基本的に 各Role に EIP を付与するインスタンスは 2台 毎 # # INSTANCEID = `curl -s http://169.</description>
    </item>
    
    <item>
      <title>問題があったのでfluentdでsigdumpを使いstactraceしてmackerel-client-rubyにPRした話</title>
      <link>https://blog.kenjiskywalker.org/2016/07/08/mackerel-meets-fluentd-and-debug-it/</link>
      <pubDate>Fri, 08 Jul 2016 12:45:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/07/08/mackerel-meets-fluentd-and-debug-it/</guid>
      <description>みんなのネットワーク環境が安定しているのか..
我々の世界線にノイズが混在してしまっているのか&amp;hellip;
それを調べるすべはないが、下記のような問題があった。
 mackerelで突然グラフが表示されなくなる そのグラフを表示しているのはfluent-plugin-mackerelを利用してfluentd経由で作成している そのtd-agentは再起動しようとするとTimeout errorになる  ということで怪奇現象を解決する為にやったことをメモ
愚直にtd-agentの再起動を試みてみる [watashi@example-host ~]$ [watashi@example-host ~]$ [watashi@example-host ~]$ sudo service td-agent restart Restarting td-agent: Timeout error occurred trying to stop td-agent... [ OK ] [watashi@example-host ~]$  ダメや
fluentdのコミッターの@sonotsさんに
 ログは出ない
 デーモンは生きている  そんな現象に出会ったことない？と聞いたところ
fluentdにはsigdumpが入っているから
そこでstacktraceを追ってみれば、と意識の高いお返事を頂いたので実行してみる。
kill -CONT ドキュメントに書いてあるようにCONTのシグナルを送る
[watashi@example-host ~]$ ps auxwwwf | grep td-agent td-agent 7779 0.0 0.3 241756 26700 ? Sl May27 0:00 /opt/td-agent/embedded/bin/ruby /usr/sbin/td-agent --log /var/log/td-agent/td-agent.</description>
    </item>
    
    <item>
      <title>Terraformを始める上でのresourceの命名規則について</title>
      <link>https://blog.kenjiskywalker.org/2016/07/06/terraform-newbie/</link>
      <pubDate>Wed, 06 Jul 2016 09:52:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/07/06/terraform-newbie/</guid>
      <description>Terraformとは https://www.terraform.ioここ見てください。
INFRASTRUCTURE AS CODEと書いてあります。
何が便利か たとえばAWSの新規VPCの作成など画面ポチポチで設定していくオペレーションをコードに落とせる。
 それってAPI叩けば同じでは？
PaaSが色々対応している。MySQLにも対応しているの&amp;hellip;
 伝えたいこと たとえばVPCを構築するとして
Terraformの有識者にどうにかしてresourceの名前にvariableの値を入れる方法を教えてほしい🤔
&amp;mdash; kenjiskywalker (@kenjiskywalker) July 5, 2016 
resource &amp;quot;aws_vpc&amp;quot; &amp;quot;${var.prefix}-${var.environment_name}-vpc&amp;quot; { cidr_block = &amp;quot;${var.vpc.cidr_block}&amp;quot; enable_dns_hostnames = true enable_dns_support = true instance_tenancy = &amp;quot;default&amp;quot; tags { &amp;quot;Name&amp;quot; = &amp;quot;${var.environment_name}-vpc&amp;quot; } }  などとresource名をユニークな感じでやろうとしたのだけれど
so this is by design.と言われればそれまでだ https://t.co/Im2kwIqiQa
&amp;mdash; kenjiskywalker (@kenjiskywalker) July 5, 2016 
by designと言われていたので、なんだか使いづらいな〜と考えていた。が
そもそもresourceは固有な名前を設定すべきではないという思想が理解できていなかった、例えばpublicであればfoo-development-publicなどとうい名前を付けるべきではなかった
&amp;mdash; kenjiskywalker (@kenjiskywalker) July 5, 2016</description>
    </item>
    
    <item>
      <title>CodeDeployのfailをSlackに通知して原因までたどりやすくする</title>
      <link>https://blog.kenjiskywalker.org/2016/03/14/infrom-codedeploy-error-to-slack/</link>
      <pubDate>Mon, 14 Mar 2016 11:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/03/14/infrom-codedeploy-error-to-slack/</guid>
      <description>AWS CodeDeploy Adds Push Notification Support
ということで、これができるまではひたすらstate毎にslackに通知していたけど
failしたらfailしたよって通知するようにした。
流れ的にはこう
CodeDeploy fail -&amp;gt; AWS SNS -&amp;gt; AWS Lambda -&amp;gt; Slack  やり方 AWS SNSで受け口をつくる CodeDeployがfailした歳に利用するSNSを用意する
 NotifyCodeDeployErrorToSlack  みたいな感じで。開発環境やステージングなどでslackの通知グループが別れる場合は
都度SNSをつくっているんだけど、これもっと良いやり方ないのかな？
CodeDeployのtriggerに先ほどつくったSNSを設定する fail以外にもステータスがあるのでそこでhookかけても良いですね。
自分のところはstate毎に通知させているので一旦この形です。
AWS LambdaでSlackへの通知を行う  NotifyCodeDeployErrorToSlackFunction  とか適当な名前でfunctionをつくる
// Ref: https://gist.github.com/vgeshel/1dba698aed9e8b39a464 console.log(&#39;Loading function&#39;); const https = require(&#39;https&#39;); const url = require(&#39;url&#39;); // to get the slack hook url, go into slack admin and create a new &amp;quot;Incoming Webhook&amp;quot; integration const slack_url = &#39;&#39;; const region = &#39;ap-northeast-1&#39; const codedeploy_url = &#39;https://&#39; + region + &#39;.</description>
    </item>
    
    <item>
      <title>SlackのAPIでchannel.listやchannel.infoで取れない時はgroup.listやgroup.infoで取ろう</title>
      <link>https://blog.kenjiskywalker.org/2016/02/25/slack-api-channel-to-group/</link>
      <pubDate>Thu, 25 Feb 2016 14:18:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/02/25/slack-api-channel-to-group/</guid>
      <description>以上です。(どこかドキュメント落ちてるかな)</description>
    </item>
    
    <item>
      <title>CodeDeployでApplicationStopでどうしようもなくなったら</title>
      <link>https://blog.kenjiskywalker.org/2016/01/21/codedeploy-applicationstop-failed/</link>
      <pubDate>Thu, 21 Jan 2016 17:37:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/01/21/codedeploy-applicationstop-failed/</guid>
      <description>これやで
$ rm -rf /opt/codedeploy-agent/deployment-root/deployment-instructions/*  </description>
    </item>
    
    <item>
      <title>awscliでput-metric-alarmでELBのUnHealthyHostCountUpをモニタリングして増えたりしたらアラートとばすくん</title>
      <link>https://blog.kenjiskywalker.org/2016/01/19/awscli-put-metric-alarm-to-elb/</link>
      <pubDate>Tue, 19 Jan 2016 11:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/01/19/awscli-put-metric-alarm-to-elb/</guid>
      <description> 自分用メモ #!/usr/bin/env ruby loadbalancers = `aws elb describe-load-balancers | jq &#39;.[][][&amp;quot;LoadBalancerName&amp;quot;]&#39; -r ` alert_sns = &amp;quot;SNS&amp;quot; loadbalancers.each_line do |lb| lb.chomp! p lb `aws cloudwatch put-metric-alarm --alarm-name &amp;quot;#{lb} UnHealthyHostCountUp&amp;quot; --alarm-description &amp;quot;#{lb} ELB UnHealthyHostCountUp&amp;quot; \ --actions-enabled \ --ok-actions #{alert_sns} \ --alarm-actions #{alert_sns} \ --insufficient-data-actions #{alert_sns} \ --metric-name &amp;quot;UnHealthyHostCount&amp;quot; \ --namespace AWS/ELB \ --statistic Maximum\ --dimensions Name=LoadBalancerName,Value=#{lb} \ --period 60 \ --evaluation-periods 5 \ --threshold 1 \ --comparison-operator GreaterThanOrEqualToThreshold` end  </description>
    </item>
    
    <item>
      <title>iPhone水没した。高校サッカー準決勝見に行った。赤羽に飲みに行った</title>
      <link>https://blog.kenjiskywalker.org/2016/01/10/iphone-soccer/</link>
      <pubDate>Sun, 10 Jan 2016 00:11:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2016/01/10/iphone-soccer/</guid>
      <description>iPhone水没した。人生で二度目だ。トイレで諸所の動作をする時はスマホいじくるのやめよう。
高校サッカーの準決勝を見に行った。高校サッカー、本当に面白い。
東福岡の藤川虎太朗くんがとても良かった。
国学院久我山の澁谷雅也くんと名倉巧くんがとても魅力的だった。
神谷くんは我らが湘南ベルマーレに来てくれるのでこれからが楽しみだ。
見終わった後はおじさんたちで赤羽の町で飲み歩いた。話題は最初から最後まで最低だったが良い夜だった。
ただ、iPhoneはこわれたままなので明日修理屋持って行ってみようと思う。</description>
    </item>
    
    <item>
      <title>「学級崩壊立て直し請負人: 大人と子どもで取り組む「言葉」教育革命」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/12/20/broken-class/</link>
      <pubDate>Sun, 20 Dec 2015 15:16:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/12/20/broken-class/</guid>
      <description>ちょうど知り合いのおうちに遊びに行った時に
テレビでやっていて、興味が湧いたので読んでみた。
学校に関係するサービスをやっていて、詳しい人から色々な話は聞くが
実際に問題を解決している人はどのような方法で対処しているのかを知れてよかった。
メモ  ほめ言葉のシャワー 成長を約束する 1年後に具体的にどこが成長できたか、成長ノートで確認をする 安心できる場を与える 子供ではなく人間を育てる 対話ノート。年百六十個のテーマについて 「父性」の欠如 = 「モンスターペアレンツ」 八対二」で止まらないようにする。「八」の中でスーパーＡをつくる 子供は褒められたい 「対話とは、話すことと聞くことの掛け算」 習慣化しない場合は自己責任で説明する。約束したよね、と 危ないな、というクラスはだいたい先生の目が下がっている。声が届いていない、教卓にしがみついているなど 今の時代、一人の大人が「Ｍ（mother＝母性）」「Ｆ（father＝父性）」「Ｃ（child＝無邪気さ）」を持たなくてはならない 厳しくやった後は、再び「眺める」という方法が有効になる 怒るとは、「自分中心の感情で相手に接すること」。叱るとは、「相手の存在を認め成長を願って強く意見すること」 一生懸命だと知恵が出る、中途半端だと愚痴が出る 全てに主語を入れて責任を持つようにする 家族でも絶対に譲れないものを３つつくる 反省ではなく内省ができるように つねに全国レベルを意識しろ 「いいよ、頑張ってるからね。ずっと見守ってるからね、先生は」は効果がある。叱る時にも、「よくなるためのもの」とはっきりと伝える 現状の変化に対応できなかった先生が心の病で入院しがち  色々と子供に求めがちな手法がよく聞こえるが、まずは自分たちから律していきたいものだ。</description>
    </item>
    
    <item>
      <title>「velocity」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/12/20/velocity/</link>
      <pubDate>Sun, 20 Dec 2015 14:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/12/20/velocity/</guid>
      <description>会社の本棚にあったので借りて読んだらめちゃくちゃおもしろかった。
今自分がどうしたらいいもんか、と悩んでいるところに適切に回答してくれていた。
個人メモ  評価を1年に1度では遅い アシュトンテイトの悲劇(決済報告が品質より優先された結果) 経営幹部の役割は迅速な意思決定と実験の推奨、スリムな組織体系を維持する カリフォルニアには前向きな風がある どれだけの収益に貢献できるかよりり、どれだけ人々の生活を便利に快適にするかからスタートしよう 優れた企業は細部にこだわる 顧客が欲しいものを顧客が欲しいと思う前に見つける インスピレーションを与え、貢献し、情報や知識を提供しない限りマーケティングは環境汚染だ &amp;ldquo;Keep it stupid simple&amp;rdquo; 貝にアイフォーンが入っていて海の音が聞こえる。聴覚は味覚を高める。体験という価値 「だからなに？どんなメリットがあるの？それのどこがいいの？」を繰り返す チームで決断することと正しい決断をすることは全く別 それはシンプルで人間らしくて欠かせないものか AKQA優れた人は価値観に共感できない組織では働きたがらず、自らが信頼するチームには喜んで参加する 常にアスリートだ チャンスは無限にあるがリソースには限りがある  冒頭の
 &amp;ldquo;変化は「酸素」である。変化があるからこそ、ビジネスに活力が生まれ、ビジネスへの熱意が生まれる。 確立された方法が崩壊する時こそ、新しいエネルギーが入り込む余地が生まれ、従来の方法よりも
さらに良い方法で成功できるチャンスをつかめるのだ&amp;rdquo;
 これが全てだった。思考停止してあの頃は良かったなぁ〜ってならないように
変化を楽しめるようにしてこう。</description>
    </item>
    
    <item>
      <title>2016年を質の高いものにするために集中力を高められそうな本をいくつか読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/12/20/for-the-mind/</link>
      <pubDate>Sun, 20 Dec 2015 12:14:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/12/20/for-the-mind/</guid>
      <description>もうすぐ今年も終わるということで
 子供がいるとなかなかまとまった時間がつくれない 業務時間の時間の密度を上げたい 効率的に物事にあたりたい   この3点が今年の主な課題だった。
来年も今年と同じ感じで過ごすと職を失う可能性があるので
時間毎の質の向上を目指したい。
個人的な課題としては集中力と自制心、その場の自己の客観性が大きく欠けていると理解したので
来年はそれをどう改善するかということに注力していきたいのだが、
根本的には集中力の向上が全体的な生活の質の向上に繋がるんじゃあないかと思って
一旦本を何冊か読んでみた。
その個人的なメモ

この本が一番おもしろかったです。
マインドフルネスも源流は同じかと。
そして、スマナサーラさんの本は全体的に面白い印象だ。
何故面白いのか、原始仏教は宗教である以前に精神の鍛錬や物事の観方を訓練するものであって
スマナサーラさんの本はその実践とその為の理解を助けてくれるので
読んだ後、自分でやってみようと思えるとこに面白さを感じるのかもしれない。
いまだけをみる 将来のことや過去のことのことにとらわれて今が見えなくならないように
今その瞬間を生きる
やりたくないこととやりたいこと 嫌だなって思う時点で怒りにとらわれている。これは本当に多いので反省点
心というものは放っておくとどんどん悪くなる 自然体なんてウソ。律しないとダメ
ヴィパッサナー瞑想  ヴィパッサナーというのは、パーリ語で、「ヴィ（vi）」は「明確に」の意味で、「パッサティ（passati）」は「観察する、見る」という意味です。「明確に観察する」とは、どういうことでしょう？
 ヴィパッサナー瞑想の初歩的な解説が載っていた
 日本ヴィパッサナー協会  友人がこれに参加したことがあるので知っていた。いつか行ってみたい。
事象に対して主観を取りのぞく 主観「嫌いなヤツが嫌なこと言っているな〜」
客観「あの人が発音している」
雑音があっても「音」「音」「音」と認識することで
事象と自分の感情の結びつきをなくして心が事象に依存することをやめさせる。
これは瞑想系や仏教系の基本的な姿勢でよく見るものだ。

たのしむこと 極力無関心になった方が良いけど、批判的な無関心ではなく
楽しみをもって試みるべし。楽しみを持ってあたれば集中力は自然と増し
効率や能率を求めても結果はあまり付いてこない。
やらないことをきめる 仕事でもそうだけど、やること、やらなければならないことは無限にあるが
その中で理性的な無関心を育てていこうと。興味が起こった時は
貪瞋癡のいずれかによって生まれていないか、もしそうなっていたら
理性的な無関心によって捨ててこう。
なににもとらわれていないという境地  つまり、「いま、こころに、欲もなく、怒りもなく、無知もありません。なにに対しても執着していません。ですから、究極に楽しいのです」
 ご飯を食べている時に幸福と感じることはあるが、隣りの人が怒鳴り声を上げて喧嘩したり
虫が出てきたりしたら一瞬で終わっちゃうので、そういうところに楽しみを見出すと疲れちゃうから
なにものにもとらわれていない最高の状態があることに気付いて、それを最良としよう。
やりたいやりたくないではなく、必要か必要でないか きになること、やりたいことがあった時に「貪瞋癡」から来ているものでないか
確認しよう。そうであるなら理性的な無関心で捨てよう、そうでないなら楽しもう。
また、やりたい、やりたくないで選ぶのではなく、必要か必要ではないかで決めよう。
肉体をそとからみる 「みなさいごはうんちになるのだから、あまり腹を立てたりだとか、期待をしたりだとかすることを止めてみてはどうかね？キミの言うそれも、キミも、また、僭越ながらわたくしも、うんちなりに今を精一杯生きているのだから。けんじ」
&amp;mdash; kenjiskywalker (@kenjiskywalker) November 26, 2015</description>
    </item>
    
    <item>
      <title>もうやんカレーお持ち帰りという解脱の境地</title>
      <link>https://blog.kenjiskywalker.org/2015/12/08/curry-2015/</link>
      <pubDate>Tue, 08 Dec 2015 17:48:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/12/08/curry-2015/</guid>
      <description>この記事はカレー Advent Calendar 2015の9日目の記事です。
今、とある事情で都庁前で働いているが、都庁前、空間設計が素晴らしく
まるで洗練された欧州の町並みを感じさせる(実際は地上と地下という概念があってファンタジー)。
そんな都庁前では、多種多様な飲食店があり、食べることにはまず困ることはない。
しかし、どうしても1000円前後の出費がかかってしまう。
それを避けたければ牛丼屋か、コンビニ、ビル内にある弁当屋で食べるという選択肢もあるが
どうも満たされない。そんな経験は誰にでもあるだろう。
そこで私がおすすめしたいのはもうやんカレーである。
もうやん？あそこはランチ1,000円だろ？何書いちゃってんのコイツ？
などと思われる方は題名を読んでくれ。お持ち帰りの話をしたいんだ。
お持ち帰り？カレー食べ放題のビュッフェという楽園を捨てて
貴様は何をほざいているんだ？と思われる方は年末年始は是非お寺に行って
煩悩を取り払ってくれ。
個人的にもうやんカレーの唯一のデメリットは「食べ過ぎてしまうこと」だった。
何故ならもうやんカレーはビュッフェスタイルを取っており、カレーが飲み放題なのだ。
これは仏教でいう三毒の中のひとつ、「貪」に該当するものだ。
何故、薬膳カレーのもうやんカレーをたべたのに毒を得る必要があるのか。
私はもうやんカレーを食べる度に悩み苦しんでいた。
そして、食べ終わった後オフィスに帰ると、食べ過ぎた反動で頭が働かなくなっているのだ。
私は怒りに震え、キーボードで頭を何度も叩き割ろうとした。「瞋」だ。
壊れたキーボードを眺めながら、冷静になった時に激しい後悔に襲わる。
「俺は地獄へ行く必要があるんだ。俺みたいなどうしようもない奴はどうせ地獄行きだ」
と愚痴り続け、仕事さえもままならない状態に至ってしまう。「癡」だ。
本来最高の食物であるもうやんカレーを食べることで、自己の制御ができず
貪り、怒り、愚痴り、私はいつも三毒の中心で悩み苦しんでいた。
そんなある日、同僚のエンジニア(仏陀)が言った。
「おもちかえりしましょう。630円で箱に詰めるだけなんで食べ過ぎないですよ」
これは悟りであり、解であった。目の前は大いなる光に包まれ
祝福の鐘は鳴り響き、心はどこまでも高く舞い上がっていった。
ということでもうやんカレーのおもちかえり630円、おすすめです。
個人的に米なし大量チキンでやらせて頂いています。
 解脱が具現化された様子です🍛
A photo posted by kenjiskywalker (@kenjiskywalker) on Dec 8, 2015 at 1:09am PST</description>
    </item>
    
    <item>
      <title>「お母さんの「敏感期」―モンテッソーリ教育は子を育てる、親を育てる」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/10/30/learning-montessori-system-fisrt/</link>
      <pubDate>Fri, 30 Oct 2015 06:59:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/10/30/learning-montessori-system-fisrt/</guid>
      <description>最近自分で考えて誰かに伝えることが疎かになってきているので
雑でも良いので書いていく。

最近いろいろと知る機会があってモンテッソーリの書いてある本を読んでみたくて読んだ。
個人的に子供と接する時に気を付けているのは
 この世界に絶対はないこと 物事の背景を理解するようにすること 何歳であろうと一人の人間として丁寧に物事を教えること やりたいものはやらせて自分の頭で学ばせること  この辺を気を付けていたけど、モンテッソーリはもう少し体系的に
より高度に実践しているようだった。
ちゃんとした教材を読んでみたくなった。
あと秩序の話で、朝うんち流しちゃってずっとうんちうんち言われてたのが一番面白かった</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2015で冗長化に失敗した話をしてきました #yapcasia</title>
      <link>https://blog.kenjiskywalker.org/2015/08/22/yapcasia2015/</link>
      <pubDate>Sat, 22 Aug 2015 12:59:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/08/22/yapcasia2015/</guid>
      <description>発表用資料の1ページ
 我々はどのように冗長化を失敗したのか / YAPC::Asia TOKYO 2015 この発表をしてきました。
前日のhitode909さんの発表や、fujiwaraさんの発表を見て、
ああ、自分はなんて見づらいスライドをつくってしまったんだ。という反省をして
154枚もあるし、後ろの人が見づらいだろうなと感じたので
(そもそもそれぐらい人が聞きに来てくれればだけど&amp;hellip;)
先にスライドを公開しておいて、そちらを参照してもらうようにしました。
11:10からの話のスライド、見づらいものつくってしまって、後ろの席の人は見づらいと思うので先にスライドアップロードしています。見づらい場合はこちらを見て下さい🙏 https://t.co/jwYtO03jU1 #yapcasiaD
&amp;mdash; kenjiskywalker (@kenjiskywalker) 2015, 8月 22 
この方法は良かった印象がある。
で、スライドはこちらになります
  Nice try / SpeakerDeckでかい問題は http://t.co/MKonnBdKsX で解決ですよ / “YAPC::Asia 2015で冗長化に失敗した話をしてきました #yapcasia - さよならインター…” http://t.co/l3F9su5RCE
&amp;mdash; Uchio KONDO (@udzura) August 24, 2015 
 うづらさんありがとうございます！
 何回か発表の練習したんですが、何回やっても時間過ぎなくて、
本当かな〜って思ったんだけど緊張しながら話すとやっぱり色々うまく行かなくて
ちょくちょく時間を気にして早く話しちゃったところとか、上手く話せないところとかあって
ちゃんと伝えたかったことが上手く伝えられたか不安になったけど
去年よりかはまともにできたっぽくて、共感してもらえたところも結構あったようで発表できて良かった。
とてもたくさんの人が聞きに来てくれて嬉しかったです。聞きに来てくれてありがとうございました。</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2015 で冗長化に失敗した話を話します</title>
      <link>https://blog.kenjiskywalker.org/2015/08/16/preview-yapcasia2015-mytalk/</link>
      <pubDate>Sun, 16 Aug 2015 23:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/08/16/preview-yapcasia2015-mytalk/</guid>
      <description>今年もYAPCで発表させて頂くことになりました。
投票してくれた方、ありがとうございます。
##我々はどのように冗長化を失敗したのか / YAPC::Asia 2015
追記にも記載しましたが、
挑戦したこと 冗長化について Redis + Redis Sentinel Consul MySQL + mysqlfailover consul-template hostsの順番 クラウドという名の混乱 対応 冗長化の終わり、そして  という内容になりそうです。色々なソフトウェアを利用し、ある思想を持って冗長化にチャレンジしたが
アマチュアのような見積り、構成の甘さや、インフラではなくプロジェクト全体の問題などを含め
改めて実体験として経験したこと、改めて大切だと理解したことなどをお話しできればと考えています。
Webサービスを運用しているけど、インフラ担当なんていない、
サーバ管理はよーわからんが新しいことにチャレンジしてみたい！けれど失敗はしたくない、
など、インターネットにいるようなすごい人達ではなくてもチャレンジすることができるが
こういう失敗はしないようにね、という反面教師のお話を聞きに来て頂ければと思います。
当日はどうぞよろしくお願いいたします。</description>
    </item>
    
    <item>
      <title>RailsのARで取ってきたオブジェクトにアクセスする</title>
      <link>https://blog.kenjiskywalker.org/2015/08/08/access-element-in-rails-controller-object/</link>
      <pubDate>Sat, 08 Aug 2015 20:57:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/08/08/access-element-in-rails-controller-object/</guid>
      <description>考えたら当たり前なんだけど
mysql&amp;gt; desc people; +---------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +---------------+--------------+------+-----+---------+----------------+ | id | int(11) | NO | PRI | NULL | auto_increment | | name | varchar(255) | YES | | NULL | | | prefecture | varchar(255) | YES | | NULL | | | created_at | datetime | YES | | NULL | | | updated_at | datetime | YES | | NULL | | +---------------+--------------+------+-----+---------+----------------+ 7 rows in set (0.</description>
    </item>
    
    <item>
      <title>curlでcurl: (51) SSL: certificate verification failed (result: 5)が出る時の対処法</title>
      <link>https://blog.kenjiskywalker.org/2015/08/05/curl-ssl-certificate-verification-failed/</link>
      <pubDate>Wed, 05 Aug 2015 18:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/08/05/curl-ssl-certificate-verification-failed/</guid>
      <description>OS X Yosemite 10.10.4
 curl: (51) SSL: certificate verification failed (result: 5)  🙏 ruby -ropenssl -e &amp;quot;p OpenSSL::X509::DEFAULT_CERT_FILE&amp;quot; &amp;quot;/usr/local/etc/openssl/cert.pem&amp;quot; 🙏 🙏 🙏 cd /usr/local/etc/openssl/ 🙏 🙏 curl -O http://curl.haxx.se/ca/cacert.pem % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 252k 100 252k 0 0 55123 0 0:00:04 0:00:04 --:--:-- 58321 🙏 🙏 mv cacert.pem cert.pem  で解決できた。正しいかどうかは知らん。</description>
    </item>
    
    <item>
      <title>夏が暑いのでIRKitとRobotyとSlackを使って帰る前にエアコンをつけるようにした</title>
      <link>https://blog.kenjiskywalker.org/2015/08/02/irkit-ruboty-slack/</link>
      <pubDate>Sun, 02 Aug 2015 01:08:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/08/02/irkit-ruboty-slack/</guid>
      <description>Ruboty、nodeの書き方思い出さなくても良いし
何よりRubyのエコシステムに乗っかれるのが最高だ。
ruboty自体はRaspiの上にsupervisorで動かしている。
子供もまだちっさいのでこれで少しは便利になったかな
 IRKit Raspi2 ruboty ruboty-slack_rtm Ruboty | Ruboty Plugin を RubyGems に公開せずに利用する #ruboty  </description>
    </item>
    
    <item>
      <title>組織が鈍化したり硬直化していると無駄に仮想敵をつくってワイワイやりたがる</title>
      <link>https://blog.kenjiskywalker.org/2015/07/30/virtual-enemy/</link>
      <pubDate>Thu, 30 Jul 2015 12:06:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/07/30/virtual-enemy/</guid>
      <description>のではないかと思った。
生きるのに必死だったらどうでもいいことに時間使ってる暇なんて一瞬もないはずなので。
気を引き締めて時間を使っていこう</description>
    </item>
    
    <item>
      <title>大変便利なMySQL::Sandboxのインストールメモ(GTID有効編)</title>
      <link>https://blog.kenjiskywalker.org/2015/06/28/install-mysql-sandobx/</link>
      <pubDate>Sun, 28 Jun 2015 00:07:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/06/28/install-mysql-sandobx/</guid>
      <description>以前MySQLの師匠のyoku0825さんに教えてもらったMySQL::Sandboxが
大変便利だったので改めてインストール方法をメモしておく
参考URL
 MySQL Sandboxを使ってみる - まめ畑
 Easily testing MySQL 5.6 GTID in a sandbox - The Data Charmer   環境
OS X 10.10.3
MySQL-Sandbox v3.0.50
 cpanmでMySQL::Sandboxをインストール [&#39;-&#39;]% cpanm MySQL::Sandbox --&amp;gt; Working on MySQL::Sandbox Fetching http://www.cpan.org/authors/id/G/GM/GMAX/MySQL-Sandbox-3.0.50.tar.gz ... OK Configuring MySQL-Sandbox-v3.0.50 ... OK Building and testing MySQL-Sandbox-v3.0.50 ... OK Successfully installed MySQL-Sandbox-v3.0.50 1 distribution installed [&#39;-&#39;]%  MySQL 5.6.25のレプリケーションを作成する $HOME/mysqlsというディレクトリにMySQLをインストールする
[&#39;-&#39;]% mkdir ~/mysqls [&#39;-&#39;]% cd ~/mysqls  [&#39;-&#39;]% make_replication_sandbox 5.</description>
    </item>
    
    <item>
      <title>Sensuのアラートを復旧するまで繰り返し通知させたい</title>
      <link>https://blog.kenjiskywalker.org/2015/06/16/sensu-alert-repeat/</link>
      <pubDate>Tue, 16 Jun 2015 16:33:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/06/16/sensu-alert-repeat/</guid>
      <description>https://sensuapp.org/docs/0.19/checks ここのrefreshの項目がそれ。完全に忘れていたところ
@la_luna_azulさんが即答してくれて感謝。
PagerDutyの費用の計算間違えてて涙目です。</description>
    </item>
    
    <item>
      <title>2015/04読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2015/06/07/201505-book/</link>
      <pubDate>Sun, 07 Jun 2015 02:34:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/06/07/201505-book/</guid>
      <description>風雲児たちがついに最新刊まで追い付いた(booklogには登録してない)。
最新刊付近になってくると魔法少女の話とかでてきて
10年ぐらいタイムスリップして面白かった。
黒船が突然来たわけではないこと、日本を開国させようと
色んな人たちががんばっていたこと、たくさん知れて面白かった。
尖ったことほとんどやってなくてアウトプットも全然していないので技術者としての死を感じる。
kenjiskywalkerの本棚 - 2015年05月 (10作品)ＮＨＫ「１００分ｄｅ名著」ブックス　ブッダ　真理のことば NHK「100分de名著」ブックス
佐々木閑
読了日：05月05日
風雲児たち　幕末編　4巻
みなもと太郎
読了日：05月05日
風雲児たち　幕末編　5巻
みなもと太郎
読了日：05月05日
風雲児たち　幕末編　6巻
みなもと太郎
読了日：05月05日
スクラム実践入門 ── 成果を生み出すアジャイルな開発プロセス
貝瀬岳志，原田勝信，和島史典，栗林健太郎，柴田博志，家永英治著
読了日：05月07日
プレジデントベイビー 0歳からの知育大百科 完全保存版 2015 (プレジデントムック プレジデントBaby)
読了日：05月08日
風雲児たち　幕末編　10巻
みなもと太郎
読了日：05月08日
風雲児たち　幕末編　7巻
みなもと太郎
読了日：05月08日
風雲児たち　幕末編　8巻
みなもと太郎
読了日：05月08日
英語上達完全マップ―初級からTOEIC900点レベルまでの効果的勉強法
森沢洋介
読了日：05月21日
powered by booklog </description>
    </item>
    
    <item>
      <title>「スクラム実践入門」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/05/08/scrum-book/</link>
      <pubDate>Fri, 08 May 2015 00:22:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/05/08/scrum-book/</guid>
      <description>スクラムをやったことはない。けどこれを読んで
スクラムやらアジャイルやら言われているものの、体系的な基礎的な知識と
先人たちの貴重な体験を学ぶことができてとても素晴らしい本だった。
個人的に本当に導入しようと思ったら、やはり一度お金払って
知見を吸収してから行うか、インストラクターっぽい人を呼んでやるのが
一番良さそうだなと感じた。
&amp;ldquo;人間が集まれば集まるほどろくなことが起きない&amp;rdquo;という持論があるが、
スクラムやらアジャイルやら型を決めてその中で業務を遂行することで、
人間が集まる欠点を補うことができるのかな、とか考えた。
ただ、意識高い人がこの本を読んで所属しているグループに導入しようと考えると
 グループ全員が同じようにグループに改善が必要だと感じて導入に積極的である グループの権力を持った人間はグループに改善が必要だと感じているが他のメンバーは必要に感じていない グループの権力を持たない人間はグループに改善が必要だと感じているが権力を持ったメンバーは必要に感じていない グループの権力を持たない一部の人間がグループに改善が必要だと感じているが、グループ全体では感じていない  みたいな背景があったりすると思う。少人数でも全員がグループに問題がないと感じていれば
改善することはないだろうし、人数が多くても全員がグループに改善が必要だと感じており、
行動をする術を探しているようなら改善される可能性は十分にある。
いきなり全部をやって全部が成功するわけではないが
少なくとも改善が必要な現場にいるので、できるところから色々やっていこうと思った。</description>
    </item>
    
    <item>
      <title>2015/04読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2015/05/02/201504-book/</link>
      <pubDate>Sat, 02 May 2015 18:06:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/05/02/201504-book/</guid>
      <description>とにかく風雲児が面白い
kenjiskywalkerの本棚 - 2015年04月 (12作品)高校サッカーダイジェスト 9 2015年 2/28 号 [雑誌] (Wサッカーダイジェスト 増刊)
読了日：04月13日
風雲児たち　幕末編　1巻
みなもと太郎
読了日：04月13日
風雲児たち　幕末編　2巻
みなもと太郎
読了日：04月13日
風雲児たち　幕末編　3巻
みなもと太郎
読了日：04月13日
進撃の巨人（１６）
諫山創
読了日：04月13日
PRESIDENT (プレジデント) 2015年 5/4 号
読了日：04月17日
基本からわかる英語リーディング教本
薬袋善郎
読了日：04月18日
別冊解説付 Mr. Evine の中学英文法を修了するドリル (Mr. Evine シリーズ)
Evine
読了日：04月20日
史上最強図解　これならわかる！ベイズ統計学
涌井良幸
読了日：04月22日
GIANT KILLING(35) (モーニング KC)
ツジトモ
読了日：04月25日
Forbes JAPAN(フォーブスジャパン) 2015年 04 月号
読了日：04月26日
ダイヤモンド　Harvard Business Review (ハーバード・ビジネス・レビュー)別冊 2015年5月号 [雑誌]</description>
    </item>
    
    <item>
      <title>音楽</title>
      <link>https://blog.kenjiskywalker.org/2015/04/25/music-20150425/</link>
      <pubDate>Sat, 25 Apr 2015 02:37:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/04/25/music-20150425/</guid>
      <description> Solo - Nils Frahm I Remember - Bvdub Mars Is A Very Bad Place For Love - The Breathing Effect  </description>
    </item>
    
    <item>
      <title>AWSのCloudWatchで取得できるBillingの情報を毎日Slackに通知させて費用を常に把握する</title>
      <link>https://blog.kenjiskywalker.org/2015/04/20/aws-cloudwatch-billing-chatops/</link>
      <pubDate>Mon, 20 Apr 2015 19:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/04/20/aws-cloudwatch-billing-chatops/</guid>
      <description>DevOpsManの様子
 AWSの利用金額は毎日知りたい。
そこでSlackに昨日までの利用金額(月ごとにリセットされる)をSlackに通知するようにした。
aws-sdkとかは使わずにシンプルにaws-cliとjqとcurlだけでやるようにしている。
#!/usr/bin/env ruby require &#39;date&#39; # 今日の日付 d = Time.now # 昨日の 00:00:00 ~ 23:59:59 の間のデータを利用して start_time = DateTime.new(d.year, d.month, d.day) - 1 end_time = DateTime.new(d.year, d.month, d.day, 23, 59, 59) - 1 # 一日分の Sum 値を使って period = &#39;86400&#39; # CloudWatchの値を取得してきて strings = &amp;quot;昨日までのAWSの利用費(月ごと)になります\n&amp;quot; strings &amp;lt;&amp;lt; &amp;quot;```\n&amp;quot; # Billingのデータを持ってくる num = `aws cloudwatch --region us-east-1 get-metric-statistics \ --namespace &#39;AWS/Billing&#39; \ --dimensions &amp;quot;Name=Currency,Value=USD&amp;quot; \ --metric-name EstimatedCharges --start-time #{start_time} \ --end-time #{end_time} \ --period #{period} --statistics &#39;Sum&#39; \ | jq &#39;.</description>
    </item>
    
    <item>
      <title>2015/03読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2015/04/05/201503-book/</link>
      <pubDate>Sun, 05 Apr 2015 16:22:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/04/05/201503-book/</guid>
      <description>WEB+DB PRESS Vol.85 の菅原さんの記事が面白かった.
色々と便利ツールをつくるけど汎用的に公開できるものをつくることで
品質の高いものをつくる意識をつくっていくのは大切だ.
kenjiskywalkerの本棚 - 2015年03月 (5作品)WEB+DB PRESS Vol.85
菅原元気
読了日：03月06日
サッカーダイジェスト 2015年 2/26 号 [雑誌]
読了日：03月12日
フットボール批評issue03
読了日：03月13日
良いウェブサービスを支える「利用規約」の作り方
雨宮美季
読了日：03月13日
MariaDB &amp; MySQL全機能バイブル
鈴木啓修
読了日：03月13日
powered by booklog </description>
    </item>
    
    <item>
      <title>コーヒーの器具いろいろ</title>
      <link>https://blog.kenjiskywalker.org/2015/03/15/coffeeee/</link>
      <pubDate>Sun, 15 Mar 2015 12:27:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/03/15/coffeeee/</guid>
      <description>参考  ドリップコーヒー環境 2015年1月 - yaotti&amp;rsquo;s diary  カヤックにいた頃、みんなコーヒーに詳しくて旨いコーヒー淹れてて最高だった。
その時から色々器具を試したのでまとめてみる。何かの参考になれば幸いです。
ハンドドリップしたくなかった とにかく楽に旨いコーヒー飲みたくて色んなもの試した。
ポーレックス コーヒーミル 未だにこれは使っている。
ボダムのフレンチプレス 最初に試したのがこれ。エスプレッソが家で簡単に飲めるなら最高だと思って買ったが
いかんせん掃除が面倒くさくてすぐやめた。
クレバーコーヒードリッパー お手軽にコーヒーが淹れられる画期的なアイテム。
ささっと淹れられて面倒くさがりの自分にとっては最高のアイテムだった。
エアロプレス 香りが無茶苦茶抽出されるのと味が一定になるので
下手なハンドドリップするぐらいならこれで抽出した方がはるかに旨い。
捨てるのも簡単でかさばる以外は特に問題なかった。
そしてハンドドリップへ そして最近ハンドドリップに帰ってきた。というかはじめた。
理由は色々あるけど、コーヒーサーバ使わなければクレバーコーヒーと変わらないじゃん。
ということに気付いたことと、ハンドドリップが純粋に面白そうだなって思った。
ここ最近ハンドドリップしているけど無茶苦茶難しい。豆はいつも
エチオピアのイルガチェフェを好んで飲んでいるが、ハンドドリップ始めた途端
ここまで味が変わるのか(下手なので悪くなる方面にしかならないのだが)と驚いた。
数回に1回、雑味のない至高のコーヒーみたいなのができて面白い。
下手の横好きで色々物を買うのも面白いけど結局シンプルが一番みたいな当たり前の境地に辿り着く。
コーヒー豆入れ TERA COFFEE ONLINE SHOP
横浜の白楽にあるコーヒー屋さんで、グッズがめっちゃくちゃかわいい。
あと毎年年末になると自作カレンダーをつくっていて、それもかわいい。
焙煎が最高で、エチオピアナチュラルは抜群に良いので近くに行ったら寄ってみてください。
TERA COFFEEの豆入れに豆入れて冷凍庫で保存している。
禅 あとコーヒー淹れるのが禅のなんとかとか最近見るけど
本当にそっち求めるなら普通に良い抹茶茶碗買ってお茶点てるのも良いと思う。
お茶点てるのも無茶苦茶難しい。</description>
    </item>
    
    <item>
      <title>nginxでメンテナンスページ用意する技</title>
      <link>https://blog.kenjiskywalker.org/2015/03/12/nginx-maintenance/</link>
      <pubDate>Thu, 12 Mar 2015 12:22:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/03/12/nginx-maintenance/</guid>
      <description>LT;DR かっぱ先輩！
かっぱ先輩のブログを読んで  深夜メンテナンスに役立ちそうな nginx 小ネタ - ようへいの日々精進 XP   同じようなことを最近やっていたのでメモ。
追記(03/12) 14:00  リダイレクトやめましょうとのこと 503でお返事しましょうとのこと  メンテナンス時にメンテページにリダイレクトするのやめましょう
&amp;mdash; そらは (@sora_h) March 12, 2015 
@kenjiskywalker @sora_h 元ネタの自分の記事は503返してるよ http://t.co/lONIVrv7OF
&amp;mdash; fujiwara (@fujiwara) March 12, 2015 
@kenjiskywalker @sora_h 静的ページ更新して差し替えぐらいでいいんじゃないですかねえ
&amp;mdash; fujiwara (@fujiwara) March 12, 2015 
@kenjiskywalker @fujiwara あ、そういう話か。ちょっと勘違いしてた。静的ページ更新の差し替えしかないのでは。
&amp;mdash; そらは (@sora_h) March 12, 2015 
ノーSEO(disallow: /)だったので完全に無視してた
nginxに設定しているメンテナンスモードの条件  /var/nginx/html/maintenance/maintenance.htmlファイルがあればメンテナンスモードとしてmaintenance.htmlを表示するように
 /healthcheckのリクエストはメンテナンスモードでも通す
 管理IPアドレスからはメンテナンスモードでも通す
  という3点を設定しています。</description>
    </item>
    
    <item>
      <title>2015/02読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2015/03/01/201502-book/</link>
      <pubDate>Sun, 01 Mar 2015 16:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/03/01/201502-book/</guid>
      <description>忙しくて本読んでなかったかな</description>
    </item>
    
    <item>
      <title>nginxで特定のURIだけログに出力しない</title>
      <link>https://blog.kenjiskywalker.org/2015/02/25/nginx-healthcheck-no-log/</link>
      <pubDate>Wed, 25 Feb 2015 16:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/02/25/nginx-healthcheck-no-log/</guid>
      <description>nginxでヘルスチェックなど設定している時に特定のURIだけログに出したくない場合の設定
 location / { if ( $request_uri ~ /healthcheckurl) { access_log off; } proxy_pass http://unicorn; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; ... break; }  </description>
    </item>
    
    <item>
      <title>/etc/fstabにディスクのUUIDを指定する時にUUIDを調べるコマンド</title>
      <link>https://blog.kenjiskywalker.org/2015/02/16/disk-no-uuid/</link>
      <pubDate>Mon, 16 Feb 2015 12:14:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/02/16/disk-no-uuid/</guid>
      <description>19.4.2. blkid コマンドの使用
blkid知らなくてずっと/dev/sdb1とか指定してた。
これからはUUID。時代はUUID。
 root権限じゃないと足したディスクが表示されないので気をつけよう;)
 </description>
    </item>
    
    <item>
      <title>負荷テストが気軽に行えるsiegeでちょっとハマった</title>
      <link>https://blog.kenjiskywalker.org/2015/02/13/siege/</link>
      <pubDate>Fri, 13 Feb 2015 18:06:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/02/13/siege/</guid>
      <description>siege: version 3.0.9
 TL;DR httpsのリクエストの際にうんともすんともいわなくて、lddで見たら
opensslのライブラリ読み込んでなかった。
Siege  Siege Home
 Siege でお手軽 Web 負荷テスト - Qiita  詳しくは上記URLを参照してください。
kappa大先生の記事を見て、これいいやん！ってなって導入した。
負荷テストをかけるサーバも今ではAWSのスポットインスタンスを利用すれば
c3.4xlargeも$0.5/hで借りれて最高だ。
インストール # gccが必要なのでインストール $ yum install gcc $ wget http://download.joedog.org/siege/siege-3.0.9.tar.gz $ tar xzf siege-3.0.9.tar.gz $ cd siege-3.0.9 $ ./configure $ make -j 16 $ make install  HTTPSにつながらない? $ siege -c 1 -t 2S http://example.com/ ** SIEGE 3.0.9 ** Preparing 1 concurrent users for battle. The server is now under siege.</description>
    </item>
    
    <item>
      <title>起動時にresolv.confが何者かに上書きされた時に更に上書きをする戦い</title>
      <link>https://blog.kenjiskywalker.org/2015/02/07/update-resolv-conf/</link>
      <pubDate>Sat, 07 Feb 2015 17:41:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/02/07/update-resolv-conf/</guid>
      <description>みんなこういうのはどういう対応しているんだろう
 @kenjiskywalker PEERDNS=noを/etc/sysconfig/network-scripts/ifcfg-ethXに書くとか
&amp;mdash; TSUNEMATSU Shinya (@tnmt) February 7, 2015 
常松先生が一瞬で解決方法を教えてくれました。
ありがとうございます！
resolv.confが圧倒的暴力によって上書きされる場合 対応としてresolv-updateみたいな雑なサービス定義をして、サーバ起動時に実行させるようにした。
ポイントはcloud-initとかそれ系のヤツが実行される前に上書いてもその後に上書きされるのでタイミングが大切。
ここの
# chkconfig: 2345 49 49  49 49の最初の数字が起動時に実行される順番で、後ろの数字が終了時に実行される順番。
$ chkconfig --add resolv-update  とすることで自動に実行されるようになる。
runlevel 3のものを確認したければ/etc/rc3.d/とか見ればわかる。
#!/bin/sh # # resolv-update # create by kenjiskywalker # # chkconfig: 2345 49 49 # lock_file=&amp;quot;/var/lock/subsys/resolv-update&amp;quot; redis_port=&amp;quot;6379&amp;quot; start() { # lock_fileを生成しないとshutdownの時に実行されない touch ${lock_file} # 圧倒的暴力によってresolv.confが上書きされていたら更に上書きする if [[ -z &amp;quot;`grep &#39;nameserver 127.0.0.1&#39; /etc/resolv.conf`&amp;quot; ]] then sed -i &#39;1s/^/nameserver 127.</description>
    </item>
    
    <item>
      <title>2015/1読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2015/02/01/201501-book/</link>
      <pubDate>Sun, 01 Feb 2015 15:32:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/02/01/201501-book/</guid>
      <description>太平記が面白かった.
kenjiskywalkerの本棚 - 2015年01月 (8作品)私本太平記 12 湊川帖
吉川英治
読了日：01月02日
私本太平記 13 黒白帖
吉川英治
読了日：01月03日
超高速勉強法
椋木修三
読了日：01月03日
相手をイラつかせない怒らせない話し方と聞き方のルール
竹内幸子
読了日：01月10日
Serverspec
宮下剛輔
読了日：01月11日
イシューからはじめよ ― 知的生産の「シンプルな本質」
安宅和人
読了日：01月12日
GIANT KILLING(34) (モーニング KC)
ツジトモ
読了日：01月25日
35歳から「一生、負けない」生き方
竹田陽一
読了日：01月29日
powered by booklog </description>
    </item>
    
    <item>
      <title>「降三世明王」について</title>
      <link>https://blog.kenjiskywalker.org/2015/01/21/trailokyavijaya/</link>
      <pubDate>Wed, 21 Jan 2015 00:30:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/01/21/trailokyavijaya/</guid>
      <description>降三世明王が好きなのでそのことについて書く。
降三世明王、仏像のつくりはヒンドゥー教と仏教の争いみたいな感じで
シヴァ神を踏みつけていてあんまりよろしくはない。
三世は過去現在未来という意味が強く、受け取り側次第でいかようにも取れる。
天下布武の天下は全国なのか近畿だけなのかみたいな感じで。
それはそれとして、降三世明王のある側面では「人間の三毒を取り除く」という意味合いがある。
三毒とは「貪・瞋・痴」、貪り、怒り、愚痴を吐くことだ。
人間のできていない自分はこの三毒にすぐにハマる。
特に対人間となるとすぐに怒ったり愚痴ったりする。
そういう時に降三世明王を自分の中に入れ
衆生や世界、宇宙を感じることを思い出して、
今という瞬間と、自分という我執を俯瞰できたら良いなといつも思う。
降三世明王、身につまされる神様だ。
minibutsu、Yahoo!ショッピングでは買えるっぽい。
http://store.shopping.yahoo.co.jp/minibutsu/18.html</description>
    </item>
    
    <item>
      <title>「イシューからはじめよ」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/01/12/issue-book/</link>
      <pubDate>Mon, 12 Jan 2015 01:49:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/01/12/issue-book/</guid>
      <description>MTGとか方法が目的になりがちになる。
ゴールを意識して、そのゴールを達成する為に何をすべきかを常に意識する必要がある。
実作業においても、目的があって、その目的を達成する為に色々な作業が発生して
余計なことに時間がかかったりする。綺麗にしたり冗長性をなくしたりとか
そういうことに時間を使いがちだけど、まずはゴール(目的)を持ってそれを達成して
次に品質を上げることに注力しないと何時までたっても終わらない。
自分の仕事の進め方で悪いところがまさにそれで、取り敢えず手を動かして
動くことをゴールとして、品質についてはまた次の機会へ。とすることが
今の自分の課題だと認識している。
だからといってメンテナンスのしづらいものでも良いかというとそうではなく
次への段階を踏みやすいように足あとと次への段階は明示的にしておくことが大切だと思う。
とにかく常に物事に対してのゴールと、そのゴールを達成する為に必要な作業を
計画的に、スピード感を持って仕事に取り組んでいきたいと改めて思った。</description>
    </item>
    
    <item>
      <title>「Serverspec」本を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/01/11/serverspec-book/</link>
      <pubDate>Sun, 11 Jan 2015 23:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/01/11/serverspec-book/</guid>
      <description>執筆者のmizzyさんからご恵贈頂きました！ありがとうございます！
 Serverspec - O&amp;rsquo;Reilly Japan
 「Serverspec」という本が出ます - mizzy.org  
書籍について 最近はソフトウェアの本はあまり読まなくて、
オフィシャルサイトのドキュメントを読むように心がけている(一次情報大切)ので
そのために技術書を購入することはなくなっていた。まずは手を動かすことが大切だろうと。
mizzyさんには日頃から良くして頂いているけど、業務で普通にServerspec使ってるし
ただのマニュアル網羅しているだけだったら買わなくてもいいかな。と考えていました。
第4章を読んで反省した。めちゃくちゃ有意義だった。
というか全体的にソフトウェアをつくる上での考え方みたいな普段なかなか聞くことのできない
背景を書籍を通じて理解できてとても有意義だった。
初めての人は？ 第2、第3章を読んで付録Aを見ながら手を動かせばすぐに動かせる。
Serverspecの素敵なところは、とてもシンプルに、簡単に動かせるところなので
よくわからんけどいっちょやってみるか〜で、30分もかからないで動かせると思う。
状態を担保する存在の必要性 イミュータブルやディスポーザブルな世界になったらServerspecは不要になるとかはあまり思わない。
設定が実現されたかどうかはプロビジョニングツールでは担保できないから
最終的に自動的にサーバが構築されたとしても、そのことを保証するためのツールは
何かしら必要だと思う。
実際にAWSでオートスケールでインスタンスを立ち上げていた時は
最終的にそのインスタンスが期待した状態にあるかどうかをServerspecで確認し
それを元に負荷分散に追加するようにしていた。
Specinfraについて Serverspecが素晴らしいのはもう既に有名なんだけど
その中で使われているSpecinfraがめちゃめちゃ便利で、Chefでいう
ohaiのようなものなんだけど、OS毎の環境差分を抽象化してくれるので
itamaeのような使い方は本当に上手だと思う。
capistranoのsskitをSpecinfraに切り替えるとかしたら楽しそうではある。
Serverspecという名前の本だけれど、それ以上にソフトウェアをつくる上での哲学や
どのようにして運用するか、何を守り、何を捨てるか、どこへ向かうのかなど
インターネットに関わって仕事をしている人ならば誰しもが楽しめる本だと思う。
最後に この本を読ませて頂いて、インターネットの仕事をしていてよかったな〜と
改めて思った。mizzyさんありがとうございます。
Asuraっていうコードネームめちゃめちゃ好きでした。
この本はまた何回か読み直したい本だ。</description>
    </item>
    
    <item>
      <title>Ansibleはcheck modeだとshellやcommandは実行されない</title>
      <link>https://blog.kenjiskywalker.org/2015/01/08/ansible-check-mode/</link>
      <pubDate>Thu, 08 Jan 2015 11:46:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/01/08/ansible-check-mode/</guid>
      <description>最近は深刻なjinja2とAnsible疲れです。
TASK: [ruby | check ruby rbenv installed] ************************************* skipping: [192.0.2.100] ok: [192.0.2.100] =&amp;gt; {&amp;quot;msg&amp;quot;: &amp;quot;check mode not supported for command&amp;quot;, &amp;quot;skipped&amp;quot;: true} TASK: [ruby | rbenv install {{ ruby_version }}] ******************************* fatal: [192.0.2.100] =&amp;gt; error while evaluating conditional: ruby_installed.find(2.1.4) FATAL: all hosts have already failed -- aborting  こんなエラーが出た。
Check Mode (Dry Run)
dry runではshellやcommandはskipされるとのことなので
- name: check ruby rbenv installed shell: cd; bash -lc &amp;quot;rbenv versions | grep {{ ruby_version }} | tr &#39;*&#39; &#39; &#39; | sed -e &#39;s/\s\+//&#39; | cut -f1 -d&#39; &#39;&amp;quot; register: ruby_installed always_run: yes ignore_errors: yes tags: - ruby - ruby:install - install  のようにalways_run: yesにしなければならない。</description>
    </item>
    
    <item>
      <title>「私本太平記」読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/01/04/taiheiki/</link>
      <pubDate>Sun, 04 Jan 2015 12:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/01/04/taiheiki/</guid>
      <description>吉川英治さんの本が無料で読めるありがたい時代なので私本太平記読んだ。
応仁の乱以前に結構京都燃えてるやんって思った。
藤沢と鎌倉の浜辺の戦いめちゃめちゃ金かけて映像化してほしい。
楠木正成や新田義貞より北畠顕家の方がかっこよかった。</description>
    </item>
    
    <item>
      <title>「齋藤孝の速読塾」と「超高速勉強法」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2015/01/03/sokudoku-books/</link>
      <pubDate>Sat, 03 Jan 2015 10:37:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2015/01/03/sokudoku-books/</guid>
      <description>おじさんなので時間がない。時間がないので
時間をつくる工夫が必要になる。
その時間を有効化するためにどうするか、みたいなことを考えて
情報量を増やしたり行動力を高めたりするのが良いと考えた。
そこで取り敢えず本を速く読む為には、みたいな本を２冊読んだ。
超高速勉強法著者 : 椋木修三経済界発売日 : 2004-11-01ブクログでレビューを見る» 齋藤孝の速読塾 これで頭がグングンよくなる! (ちくま文庫)著者 : 齋藤孝筑摩書房発売日 : 2010-04-07ブクログでレビューを見る»  基本的に1回で処理できる文章の量を増やす もくじを暗記する(全体の構成を把握する) 2割ぐらいでサラサラ読む(単語を流す) 3色のマーカー(自分の中にレベルを3段階入れて各種マークをする。２度目はそのマークを主に見ていく) アウトプットをすることを考えながら読む 常に要約して読む  みたいなことが書いてあった。とにかく要点にまとめることと
アウトプットをする、みたいなことは大切だと思う。</description>
    </item>
    
    <item>
      <title>2014/12読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/12/29/201412-book/</link>
      <pubDate>Mon, 29 Dec 2014 01:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/29/201412-book/</guid>
      <description>今後技術だけで飯食っていけるわけでもないので
取り敢えず知見を広める為にForbesJapanを年間購読した。
賭けの考え方がギャンブル以外にも使える思考形式を学べてよかった。
負けを取り返すとか、調子が良いから大きく出るとかではなくて
常に目の前の勝負に集中することと、いかに自分の状態を客観視できるか
雑になったり感情的になったり(ティルト)しているかに早く気付いて、
手を引けるかが大事みたいなことが書いてあって、本当にそうだなってなってた。
サイコ、21巻が出たので20巻から読み直してたら最後に21巻最終巻って書いてあって
最後の最後までどうしようもない感じで笑ってた。早く終わってくれ。
kenjiskywalkerの本棚 - 2014年12月 (5作品)進撃の巨人（１５）
諫山創
読了日：12月13日
なぜ人と組織は変われないのか ― ハーバード流 自己変革の理論と実践
ロバート・キーガン
読了日：12月14日
賭けの考え方 カジノブックシリーズ
イアン・テイラー
読了日：12月23日
ForbesJapan (フォーブスジャパン) 2015年 1月号 [雑誌]
atomixmediaForbesJAPAN編集部
読了日：12月28日
多重人格探偵サイコ (21) (カドカワコミックス・エース)
田島昭宇
読了日：12月29日
powered by booklog </description>
    </item>
    
    <item>
      <title>「なぜ人と組織は変われないのか」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2014/12/14/immunity-of-change/</link>
      <pubDate>Sun, 14 Dec 2014 13:27:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/14/immunity-of-change/</guid>
      <description>「なぜ人と組織は変われないのか ― ハーバード流 自己変革の理論と実践」を読んだ。
なぜ人と組織は変われないのか ― ハーバード流 自己変革の理論と実践著者 : ロバート・キーガン英治出版発売日 : 2013-10-24ブクログでレビューを見る» 本書のKindle版を読んでいたが、50%付近で速読に変更してざっくりと内容を理解するに留めた。
しっかり読んで内容を吸収しようとすると相当時間がかかると思う。
何故かというと、この書籍は机上の話ではなく、実際に理論があって
その理論を実践したユースケースを事細かく書いてあるからだ。
ビジネスマンはこうあるべき、リーダーシップとは、あの人から学ぶ〜
系のよくある本ではなく
 &amp;ldquo;なぜ人と組織が硬直(本書では&amp;rdquo;変革をはばむ免疫機能&amp;rdquo;と表現されている)するのか、
どうしたら変化していけるのか&amp;rdquo;
 豊富なシナリオを用いて、課題、実践、結果というサイクルをいくつも
紹介してくれている。
とても長いですが、年末年始に読む意識高い系の本としておすすめできます。
個人的なメモ 環境順応型知性 言われたことをきちんとやる・指示者や他部署の人間を敵視する人が多そう
自己主導型知性 情報を発信するときに自分が車の運転席に座ろうとするのか、それとも車に乗せて運んでもらおうとするのか
自己変容型知性 思い通り目的地に向けて車を走らせるためではなく、道路地図を描き直したり、目的地を修正できる
この3パターンを体系化していたのはとてもわかりやすかった。
優秀な人は基本的に&amp;rdquo;自己主導型知性&amp;rdquo;のパターンが多かったけど
ああ、この人本当に良いな。って思う人はやっぱり&amp;rdquo;自己変容型知性&amp;rdquo;の人だった。
日常の揉め事は不満から発生することがほとんどで、
その不満を口に出して自分では何もしない人は&amp;rdquo;環境順応型知性&amp;rdquo;が多い印象だ。
というか3パターンの内2パターンは不満や問題があるなら
解決しようと試みるから当たり前っちゃあ当たり前だ。
暗黙の関係性 あの人ってああだから、あのグループはああだから、など
人数が多ければ多いほどコミュニケーションはしづらくなって
閉鎖的になったり変化が起こりにくくなったりする。
当事者間の問題なら、腹割って話しましょうよ！とかで
終わりだけど(そもそも腹割って話せる間柄ならそこまで深刻じゃないよね)
組織として硬直するのは当事者全員で行わないと、
本当の改善にはならないと思う。
誰かがリーダーシップを発揮して解決してくれー！！！とか
おままごとじゃないんだから全員でちゃんとした方が良い。
実践 そして風通しの悪い、グループ間の仲が悪い会社を
どうやって改善していくかみたいなのが事例と共に大量に書いてある。
本書の半分以上は事例を伴っての実践と結果の振り返りだった。
&amp;ldquo;one-big-thing&amp;rdquo;という一つの焦点に絞って目標を設定するのも面白かった。
個人の成長と組織の成長が同じベクトルに向いているか 後半読み飽きてペラペラめくっていく感じで眺めていたが
個人の成長が組織の成長と同じベクトルを向いているかは
その人にとっても、組織にとっても重要だと気付かされた。
多分会社に所属していると、ある特定のサイクルで
&amp;ldquo;面談&amp;rdquo;という形でそのサイクルの間どのような目標を持って
どのような結果を行ったか上司と確認し合う場があるが、
 会社としての目標 所属しているグループの目標 個人の目標  その3点が噛み合うか噛み合わないかで、
関係するそれぞれの進化のスピードが
何倍にも変わってくることはまさに目からウロコだった。</description>
    </item>
    
    <item>
      <title>fluentdを利用してsshログインを通知する</title>
      <link>https://blog.kenjiskywalker.org/2014/12/12/login-notification/</link>
      <pubDate>Fri, 12 Dec 2014 22:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/12/login-notification/</guid>
      <description>sshを利用していると招かれざる客の来訪が多い。
また、サーバに不必要にログインしている関係者がいないか
把握しつづけるのも難しい。
今回はfluentdを利用して簡単にログイン周りの通知をSlackに流してみる。
準備 /var/log/secureはパーミッションが厳しいので
y-kenさんのブログを参考にパーミッションを変更する必要があります。
 Fluentdでsyslogを取り込むための権限設定（CentOS 5&amp;amp;6両対応） - Y-Ken Studio  SlackのAPIがバージョンアップしてリアルタイム性を持つようになった。
 A new Slack API: The inevitable rise of the bots Bots
  個人的にはリアルタイム性よりも
private roomでもhubotが利用できるようになったのいうのがアツい。
これで色々遊べるようになる。
 fluent-plugin-slack  手元でendpointを変更して動くようになった。みんな普通に動いているのかな
private def endpoint # URI.parse &amp;quot;https://#{@team}.slack.com/services/hooks/incoming-webhook?token=#{@api_key}&amp;quot; URI.parse &amp;quot;https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX&amp;quot; end  Real Time Messagingを利用するためには
https://slack.com/api/chat.postMessage?token=xoxp-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-XXXXXX&amp;amp;channel=XXXXXXXXX&amp;amp;text=XXXXX&amp;amp;username=XXXXX&#39;  のようにリクエストを送る必要がある。
時間があればpull requestしたい。(あと20分で書き終えなければ&amp;hellip;)
chat.postMessage - slack API
2014/12/16 追記 sowawaさんにmergeして頂いた。感謝
設定  /etc/td-agent/td-agent.conf  &amp;lt;source&amp;gt; type tail path /var/log/secure format syslog tag secure_log pos_file /var/log/td-agent/syslog_secure.</description>
    </item>
    
    <item>
      <title>不快な広告と不快ではない広告</title>
      <link>https://blog.kenjiskywalker.org/2014/12/08/koukoku/</link>
      <pubDate>Mon, 08 Dec 2014 21:17:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/08/koukoku/</guid>
      <description>雑記 youtubeもtwitterの広告も、ただ間に挟んでいるだけで
普通に不快な印象しかない。不快ではない広告などこの世にあるのか
って考えたらその広告自体が面白いとか興味があるとかの場合は
不快ではなかったりする。受け取り手次第な感じもする。
私はサッカーが好きで、いろんなサッカーの話を聞くのが好きなのだが
南米のサッカー中継のラジオで、得点が入ると、
ゴールに絡めて広告してくるらしい話が好きだ。どんな感じかというと
ゴールゴルゴルゴルゴール！まるで◯◯社のスプライトのような爽快感！みたいな感じで
若干無理があるだろうっていう感じでこじつけるらしい。
こういうアイデアのある話は好きだ。
優秀な人がたくさん在籍しているんだろうし、
もうちょっと変わった広告の仕方はないのだろうか</description>
    </item>
    
    <item>
      <title>2014/11読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/12/07/201411-book/</link>
      <pubDate>Sun, 07 Dec 2014 05:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/07/201411-book/</guid>
      <description>なんかもうちょっと読んでた気がする&amp;hellip;
kenjiskywalkerの本棚 - 2014年11月 (1作品)&amp; Premium (アンド プレミアム) 2015年 1月号
読了日：11月24日
powered by booklog </description>
    </item>
    
    <item>
      <title>俺の子連れおすすめスポット - 新宿御苑</title>
      <link>https://blog.kenjiskywalker.org/2014/12/07/jyoen/</link>
      <pubDate>Sun, 07 Dec 2014 01:49:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/07/jyoen/</guid>
      <description>俺の子連れおすすめスポット Advent Calendar 2014
http://www.env.go.jp/garden/shinjukugyoen/
新宿御苑をおすすめします。
 大人（15歳以上）200円　小・中学生50円　幼児無料で安い
 新宿駅から歩いていける 無茶苦茶土地が広い 少しオフロードだけどベビーカーでも道が広くてそこそこ整備してあるので余裕で動ける お弁当持って芝生に寝っ転がって空眺めたりできるので最高 比較的空いているので代々木公園みたいな渋滞は起きない ペットやお酒、ラジコンや遊び道具の持ち込みが禁止なので平和  ということで新宿御苑、お散歩やピクニックにおすすめです。
 駐車場もあるんですね。初めて知った
 </description>
    </item>
    
    <item>
      <title>capistrano3を利用してRails4をdeployしunicornを使う</title>
      <link>https://blog.kenjiskywalker.org/2014/12/02/capistrano3-rails4-unicorn/</link>
      <pubDate>Tue, 02 Dec 2014 23:30:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/12/02/capistrano3-rails4-unicorn/</guid>
      <description>Rails v4.1.2
capistrano v3.3.3
 TL;DR cap3でrails4のデプロイとbundle install
unicornの操作をできるようにするまでのメモ
手元のマシンでcap3をインストール $ gem install capistrano  Railsアプリケーションのあるパスに移動
$ cd app_name  cap install $ cap install mkdir -p config/deploy create config/deploy.rb create config/deploy/staging.rb create config/deploy/production.rb mkdir -p lib/capistrano/tasks create Capfile Capified $  app_name/config配下にdeploy用の各種設定テンプレートが格納され、
独自rake taskを格納するapp_name/lib/capistrano/tasks/ディレクトリが作成され、
capistrano用の設定ファイル?であるCapfileのひな形が作成される.
deployの設定 config/deploy.rb 汎用的な設定はここに書くのかな
lock &#39;3.3.3&#39; # 自分のアプリケーション名 set :application, &#39;app_name&#39; # 自分のリポジトリ名.capistranoはrsyncではなくgit pullする set :repo_url, &#39;git@github.com:kenjiskywalker/app_name.git&#39; # デプロイ先 set :deploy_to, &#39;/home/foo/app_name&#39; # cap stage unicorn:start などの実行対象の role .</description>
    </item>
    
    <item>
      <title>Ansible Vaultで暗号化されたファイルをCircleCIで利用する</title>
      <link>https://blog.kenjiskywalker.org/2014/11/17/ansible-vault-circleci/</link>
      <pubDate>Mon, 17 Nov 2014 14:08:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/11/17/ansible-vault-circleci/</guid>
      <description>TL;DR CircleCIのEnvironment variablesを利用して
ファイルにdecryptのパスワードを記入する
設定  Environment variables - CircleCI Vault - Ansible  CircleCIの環境変数に値を設定する機能を利用し、
テスト実行前にその環境変数に設定したVault用の
パスワードをファイルに出力しておき、ansible実行時には
そのファイルを見に行くようにする。
 circle.yml  machine: services: - docker dependencies: pre: - if [[ -e docker_ansible_image.tar ]]; then cat docker_ansible_image.tar | docker import - kenjiskywalker/dockerfile-centos-ansible ; docker load --input docker_ansible_image.tar ; else docker build . ; docker save -o docker_ansible_image.tar kenjiskywalker/dockerfile-centos-ansible ; fi - echo &amp;quot;${ANSIBLE_VAULT}&amp;quot; &amp;gt; $(pwd)/ansible/vault.txt cache_directories: - &amp;quot;docker_ansible_image.tar&amp;quot; test: post: - docker run -v $(pwd)/ansible:/ansible kenjiskywalker/dockerfile-centos-ansible ansible-playbook /ansible/ci.</description>
    </item>
    
    <item>
      <title>CircleCIでDockerコンテナに対してansibleを実行しserverspecでテストをする</title>
      <link>https://blog.kenjiskywalker.org/2014/11/13/circleci-docker-ansible-serverspec/</link>
      <pubDate>Thu, 13 Nov 2014 21:11:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/11/13/circleci-docker-ansible-serverspec/</guid>
      <description>参考 KAIZEN platform Inc. における運用自動化 - Speaker Deck
Continous Integration and Delivery with Docker - CircleCI
TL;DR CircleCI上でDockerコンテナを立て、
そのコンテナに対してプロビジョニングを行い、
プロビジョニング後のコンテナに対してテストを行う
DockerコンテナにAnsibleを実行する コミットする度にDockerのimageをpullするのは時間がもったいないので
cache_directoriesを利用し、imageをexportしておき
実行時にimportするようにすると多少速くなる。
. ├── Dockerfile ├── ansible/ └── circle.yml   Dockerfile  FROM kenjiskywalker/dockerfile-centos-ansible   circle.yml  machine: services: - docker dependencies: pre: - if [[ -e docker_ansible_image.tar ]]; then cat docker_ansible_image.tar | docker import - kenjiskywalker/dockerfile-centos-ansible ; docker load --input docker_ansible_image.tar ; else docker build .</description>
    </item>
    
    <item>
      <title>シェルスクリプトで外部コマンドを利用する場合の注意点</title>
      <link>https://blog.kenjiskywalker.org/2014/11/10/shellscript-old-style/</link>
      <pubDate>Mon, 10 Nov 2014 15:37:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/11/10/shellscript-old-style/</guid>
      <description>TL;DR シェルスクリプトでbackquoteを見つけたら
オールドスタイルおじさんを探し、矯正させよう
 GNU Bash-2.05 manual
  When the old-style backquote form of substitution is used, backslash retains its lit- eral meaning except when followed by $, `, or \. The first backquote not preceded by a backslash terminates the command substitution. When using the $(command) form, all characters between the parentheses make up the command; none are treated specially.  #!/bin/bash #!/bin/bash a=`echo &#39;\&#39;` echo ${a} # \ b=`echo &amp;quot;\\&amp;quot;` echo ${b} # unexpected EOF while looking for matching `&amp;quot;&#39; c=$(echo &#39;\&#39;) echo ${c} # \ d=$(echo &amp;quot;\\&amp;quot;) echo ${d} # \  参考 http://hyperpolyglot.</description>
    </item>
    
    <item>
      <title>2014/10読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/11/02/201410-book/</link>
      <pubDate>Sun, 02 Nov 2014 01:59:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/11/02/201410-book/</guid>
      <description>太平記、いよいよ尊氏がのし上がってきた。
kenjiskywalkerの本棚 - 2014年10月 (7作品)本を読む本 (講談社学術文庫)
J・モーティマー・アドラー
読了日：10月10日
私本太平記 07 千早帖
吉川英治
読了日：10月10日
GIANT KILLING(33) (モーニング KC)
ツジトモ
読了日：10月26日
私本太平記 08 新田帖
吉川英治
読了日：10月26日
私本太平記 09 建武らくがき帖
吉川英治
読了日：10月26日
サーバ/インフラ徹底攻略 (WEB+DB PRESS plus)
伊藤直也
読了日：10月26日
高校サッカーダイジェスト Vol.7 2014年 11/1号 [雑誌]
読了日：10月27日
powered by booklog </description>
    </item>
    
    <item>
      <title>「サーバ/インフラ徹底攻略」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2014/10/26/server-infra-webdb-book/</link>
      <pubDate>Sun, 26 Oct 2014 18:05:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/10/26/server-infra-webdb-book/</guid>
      <description>サーバ/インフラ徹底攻略 (WEB+DB PRESS plus)
ご恵贈ありがとうございます！
TL;DR mizzyさんのServerspecを利用したインフラCIの章、
サイバーエージェント社のメンテナンスの章は最高だった
もくじ 巻頭企画 ［入門］コードによるインフラ構築 サーバ構成管理の自動化を実現する 第1章：ChefとVagrantによるインフラのコード化 設定の一元管理で作業を省力化する……伊藤 直也 第2章：Serverspecによるテスト駆動インフラ構築 設定変更の反映を確実なものにする……伊藤 直也 特集1 Amazon Web Services最新活用 レイヤ別比較，構築の定石，構成管理の自動化 第1章：Amazon Web Servicesレイヤ別比較 各サービスの特徴を理解し，うまく使い分ける……片山 暁雄，平山 毅 第2章：EC2とVPCによるシステム構築 セキュアで可用性を高めたインフラの作り方……舟崎 健治，吉荒 祐一 第3章：RDSによるデータベースの活用 作成，デプロイ，バックアップ……今井 雄太，八木橋 徹平 第4章：CloudFormationによる構築の自動化 テンプレートの作成からミドルウェア構築設定まで……安川 健太 特集2 テスト駆動インフラ＆CI最前線 Infrastructure as Codeがもたらすワークフローの刷新 第1章：インフラのテストとその重要性 「インフラのコード化」による開発手法の応用……宮下 剛輔 第2章：テスト駆動インフラの実践 VirtualBox，Vagrant，Puppet，Serverspecによるテスト自動化……宮下 剛輔 第3章：インフラCIの実践 GitHub，Wercker，DigitalOceanによる継続的テスト……宮下 剛輔 第4章：インフラの継続的改善の実践 GitHub Flowをベースとしたワークフロー変革……宮下 剛輔 特集3 実践Immutable Infrastructure 使い捨てサーバによる運用の変革 第1章：Immutable Infrastructureとは何か 不変なサーバ，Blue-green Deploymentとそれらの利点……田中 慎司 第2章：Immutable Infrastructureで利用するツール／サービス 比較・整理と，システム全体での組み合わせ……田中 慎司 第3章：コンテナ型仮想化とクラウドによる実践 Docker+HAProxy，Amazon EC2+ELB……田中 慎司 第4章：クラスタ管理ツールによる実践 Apache Mesosでリソース管理の自動化……田中 慎司 特集4 ［詳解］nginx 設定の柔軟性と優れたスケーラビリティ 第1章：nginxの世界へようこそ アーキテクチャ，用途，メリット，デメリット……久保 達彦 第2章：はじめてのnginx インストール，起動と終了，基本設定……道井 俊介 第3章：一般的なWebサーバの構築 バーチャルホスト，アクセス制御，SSL通信，基本認証……飯田 祐基 第4章：実践的なWebアプリケーションサーバの構築 Unicorn/RailsやPHP-FPMと連携させる……道井 俊介 第5章：大規模コンテンツ配信システムの構築 キャッシュ，ロードバランシングを活用する……飯田 祐基 第6章：拡張モジュールのしくみと作り方 nginxを自由にカスタマイズするための基礎知識……久保 達彦 特集5 メンテナンス本格入門 緊急対応，計画停止，メンテフリー化 第1章：メンテナンスとは 種類と手法を整理する……桑野 章弘 第2章：計画メンテナンスの流れ 事前準備，作業のチェック，振り返り……松浦 隼人 第3章：緊急メンテナンスの流れ 普段から備えるべきこと，障害時の対応……松浦 隼人 第4章：メンテフリーへのアプローチ【インフラ編】 省力運用を実現するインフラ，データベース設計と障害検知……松浦 隼人，中村 俊之 第5章：メンテフリーへのアプローチ【アプリケーション編】 ダウンタイムを減らすリリース手法とアプリケーション設計……福永 亘，中村 俊之，松浦 隼人 第6章：ガールフレンド（仮）とアメーバピグの事例 現場でどう実践し，どう障害を切り抜けたか……福永 亘，杉山 仁則 一般記事 Dockerで軽量な仮想環境 Linuxコンテナでインフラを瞬時に構築する……伊藤 直也  感想 なおやさんの章 Vagrant、Chef、Serverspecなどを利用したことのない人が</description>
    </item>
    
    <item>
      <title>OS Xでfigを利用してDockerのコンテナを操作する</title>
      <link>https://blog.kenjiskywalker.org/2014/10/25/osx-fig-docker-access-container/</link>
      <pubDate>Sat, 25 Oct 2014 21:38:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/10/25/osx-fig-docker-access-container/</guid>
      <description>Docker v1.3
fig 1.0.0
 TL;DR OS XでDockerコンテナを操作するのが手間だったけどfigを使えば解決した.
OS Xで本番環境と同じような環境をつくりたくてboot2docker + figを利用した
目を通しておいてもらいたい最高のエントリー Docker1.3版 boot2docker+fig入門 - Qiita
boot2dockerでのVolume問題が解決しそう | SOTA
必要なもの  boot2docker fig  fig OS Xでは、Docker containerにアクセスするまでに
OS X -&amp;gt; boot2docker -&amp;gt; docker container  boot2dockerを一旦挟まなければならなかった.
これをfigを利用することで、透過的に
OS X -&amp;gt; docker container  このようにアクセスしているかのようにラッピングができる
update 2014/10/27 完全に勘違い！OS Xでも普通にdockerコマンド使えます.
$ boot2docker up $ boot2docker ssh $ docker build .  などと操作しなくても0.7.3の頃から
DockerはOS Xに対応していて
$ boot2docker up $ docker build .</description>
    </item>
    
    <item>
      <title>Ansibleを利用してRailsが動くVagrantfileを作成する</title>
      <link>https://blog.kenjiskywalker.org/2014/10/24/ansible-vagrant/</link>
      <pubDate>Fri, 24 Oct 2014 05:56:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/10/24/ansible-vagrant/</guid>
      <description>TL;DR Ansibleを利用したからって複雑な処理がシンプルになるわけではない
1st 対象のサーバに何か設定をする必要はないので
このように少量のコードでやりたいことが実現できる。
[&#39;-&#39;]% [&#39;-&#39;]% cat hosts ansible.example.com [&#39;-&#39;]% [&#39;-&#39;]% ansible -m ping -i hosts ansible.example.com ansible.example.com | success &amp;gt;&amp;gt; { &amp;quot;changed&amp;quot;: false, &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot; } [&#39;-&#39;]% [&#39;-&#39;]% cat playbook.yml - hosts: all tasks: - name: Install dstat yum: name=dstat [&#39;-&#39;]% [&#39;-&#39;]% [&#39;-&#39;]% ansible-playbook -i hosts playbook.yml PLAY [all] ******************************************************************** GATHERING FACTS *************************************************************** ok: [ansible.example.com] TASK: [Install dstat] ********************************************************* ok: [ansible.example.com] PLAY RECAP ******************************************************************** ansible.example.com : ok=2 changed=0 unreachable=0 failed=0 [&#39;-&#39;]%  Inventoryファイル(上記でいうとhostsファイル)の動的更新</description>
    </item>
    
    <item>
      <title>#isucon 4の予選に出た</title>
      <link>https://blog.kenjiskywalker.org/2014/10/06/isucon4/</link>
      <pubDate>Mon, 06 Oct 2014 13:46:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/10/06/isucon4/</guid>
      <description>ISUCON4に参加してきました。
 ISUCON4 本戦出場者決定のお知らせと本選出場者の利用言語比率  上記の結果本戦出場にはたどり着けませんでした。
もし次回ISUCONがあれば、AMI提出の確認は全員で行いたいと思います。
 競技終了前に、全員でレギュレーション音読
競技終了後に、全員でAMI提出指差し確認実施
 やったこと  とくになし  振り返り チームとして前進した気がする。
 走りだす前に全体つかむことができてよかった
 実装前にその実装が可能かどうか確認することができてよかった
 再起動を終了1時間前に実施できたのはよかった 全体のアクセスの統計とレスポンスタイムが遅いアクセスの割合を出した 335さんとひさいちが読んでコード書いててくれたのでここオンメモリやろ〜ヤジってればよかった コンテキストスイッチ気にしすぎた。それよりもindexの改善はオレの役割だった
  4になって、事前に準備できることはしておかないといけない
リアル競技になってきた感が強い。
参考  #isucon 4の予選に出た - パルカワ2 #isucon 4 の予選に参加した- @soh335 memo   運営の方、お疲れ様でした！
データホテルチームがんばれ〜</description>
    </item>
    
    <item>
      <title>2014/09読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/10/01/201409-book/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/10/01/201409-book/</guid>
      <description>Akamaiの本が面白かった。
BGP繋ぎこんで終わりの世界だと思っていたので
目からうろこだった。
初速思考、しばゆー君の記事で面白そうだなと思って読んだ。
正直手を抜いていたところがあったので、
そうだよな〜、ちゃんとやるべきだよな〜って思って
メモを取るようにした。あと、覚えておいた方がいいもの
調べておいた方がいいものを御座なりにしないよう心がけ始めた。
まずは手を動かす、細かいことでも取り敢えずやりきる習慣を身につけたいものだ。
あとは、これからアプリケーション周りのコードを書くつもりなので
プログラミング周りの有名な2冊をささっと読んだ。
新しい環境は既にAnsibleが入っていたので困らない限りはAnsible使って行ってみたい。
mozaic.fm #7がとても面白かったので例の書籍を今更読んでみた。
Go、ちゃんとやりたいけどまず仕事で使いそうなRailsを学習しているので
10月はそこをカチっとやっていく。あと瞬間英作文の復習を合間にやっていけたらいいな。
宇宙博の帰りに宇宙兄弟の最新刊が当日発売されているの知って
ちょっとテンション上がった。
幕張メッセ、大ホールとかすっからかんで面白かった。
レッドブルのこれかっこよかった。
カミさんがこれ本物？レプリカって書いてないよ？レプリカより本物が良い。
って言ってて本物志向だった。
あとJAXAのTシャツ着て行ったらJAXAの美人広報さんに見つかって
チラチラTシャツ見られながらすごい熱心に
海中から引き上げられたH2ロケットの説明を色々話してくれて
めちゃくちゃJAXA好きみたいになってて結構恥ずかしかった。
とても面白かった。
kenjiskywalkerの本棚 - 2014年09月 (9作品)入門Ansible
若山史郎
読了日：09月06日
Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)
山本陽平
読了日：09月06日
WEB+DB PRESS Vol.82
山口徹
読了日：09月06日
アカマイ　知られざるインターネットの巨人 (角川ＥＰＵＢ選書)
小川晃通
読了日：09月10日
初速思考 30代で一気に突き抜ける人の集中戦略
金田博之
読了日：09月10日
オブジェクト指向入門 第2版 原則・コンセプト (IT Architect’Archive クラシックモダン・コンピューティング)
バートランド・メイヤー
読了日：09月18日
Code Complete 第2版 上　完全なプログラミングを目指して
スティーブ・マコネル
読了日：09月18日
プログラミングRuby 第2版 言語編</description>
    </item>
    
    <item>
      <title>sensuのmackerel用のmetrics handlerをつくった #mackerelio</title>
      <link>https://blog.kenjiskywalker.org/2014/09/25/sensu-mackerel-handler/</link>
      <pubDate>Thu, 25 Sep 2014 14:38:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/25/sensu-mackerel-handler/</guid>
      <description>Mackerel Meetup #2 Tokyoに参加してきました。
美味しいサバ料理頂いたりピザ頂いたりビール頂いたりして最高でした。
個人的には監視はSensuかnagiosかに任せて、
メトリクス周りをmackerelに任せたいなという構想があったりなかったりしています。
mackerelがDataDogを超えて全世界で使われるようになったら
面白そうですよね。
個人的にほしい機能は監視の充実より先にメトリクス周りの整備をしてほしいです。
@fujiwaraさんが、n分前と現在の差分データを取得できると良いとおっしゃっていて
それあったら便利だな〜、と便乗していました(もちろんZabbixは可能です)。
使うか使わないかはわかりませんが、Sensuのhandlerで
mackerelを指定できるようプラグインを作成しました。
hostの登録は別でしないといけませんが(plugin側で担保しても良いかも)
既にSensuを利用している方は、こちらのhandlerを入れてもらえれば
mackerelへmetricsを送信することが可能です。
どうぞご利用ください。
 mackerel-metrics.rb
 mackerel-metrics.json
  pull requst中です。
777番目なのでめでたいです。
 はてな社の方へ
headerが雑なのでプロモーションも兼ねて編集して頂いた方がいいかもしれないです
 </description>
    </item>
    
    <item>
      <title>Sensu Casual Talks #1 に行ってきた #sensucasual</title>
      <link>https://blog.kenjiskywalker.org/2014/09/17/sensu-casual/</link>
      <pubDate>Wed, 17 Sep 2014 23:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/17/sensu-casual/</guid>
      <description>Sensu Casual Talks #1にいってきた。
@timwataさんのGraphiteのスケールの話が興味深かった。
3000台ぐらいのクライアントをSensuとGraphiteで見てるの
相当貴重な知見だと思う。
自分が話してきたのは特にどうということもなくて
Chefを使えばOfficial cookbookと自分で何個かcookbookを書くことで
比較的簡単に(※1)導入、運用ができるという話をしてきた。
 cookbookはここにまとめてある。
https://github.com/kenjiskywalker/chef/tree/master/site-cookbooks
Sensu、スケールしていくとどこがボトルネックになるか
みたいな話はユースケースが増えていくとコツみたいなのが
見えてくると思う。だけどnagiosで困っていないのにわざわざ
sensuに乗り換えるのは無駄だと思う。
KAIZEN社は日本のウェッブ業界でも最先端の会社なので
定期的に現状を確認しに行きたいと思う。
Tシャツありがとうございました。
開催して頂いた@glidenote氏、ありがとうございました！
  ※1… 個人差があります
 </description>
    </item>
    
    <item>
      <title>Consulでkey/valueを叩く</title>
      <link>https://blog.kenjiskywalker.org/2014/09/09/consul-key-value/</link>
      <pubDate>Tue, 09 Sep 2014 23:09:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/09/consul-key-value/</guid>
      <description>TL;DR Consulでkey/valueを叩く
[&#39;-&#39;]% curl -X PUT -d &#39;bar&#39; http://127.0.0.1:8500/v1/kv/foo true [&#39;-&#39;]% [&#39;-&#39;]% [&#39;-&#39;]% curl -s http://127.0.0.1:8500/v1/kv/foo | jq . [ { &amp;quot;CreateIndex&amp;quot;: 538, &amp;quot;ModifyIndex&amp;quot;: 538, &amp;quot;LockIndex&amp;quot;: 0, &amp;quot;Key&amp;quot;: &amp;quot;foo&amp;quot;, &amp;quot;Flags&amp;quot;: 0, &amp;quot;Value&amp;quot;: &amp;quot;YmFy&amp;quot; } ] [&#39;-&#39;]% [&#39;-&#39;]% curl -s http://127.0.0.2:8500/v1/kv/foo | jq . [ { &amp;quot;CreateIndex&amp;quot;: 538, &amp;quot;ModifyIndex&amp;quot;: 538, &amp;quot;LockIndex&amp;quot;: 0, &amp;quot;Key&amp;quot;: &amp;quot;foo&amp;quot;, &amp;quot;Flags&amp;quot;: 0, &amp;quot;Value&amp;quot;: &amp;quot;YmFy&amp;quot; } ] [&#39;-&#39;]% [&#39;-&#39;]% curl -X PUT -d &#39;barbar&#39; http://127.0.0.2:8500/v1/kv/foofoo true [&#39;-&#39;]% [&#39;-&#39;]% curl -s http://127.</description>
    </item>
    
    <item>
      <title>Consulでnodeの増減時に特定のスクリプトを実行させる</title>
      <link>https://blog.kenjiskywalker.org/2014/09/09/consul-event-handle-watches/</link>
      <pubDate>Tue, 09 Sep 2014 22:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/09/consul-event-handle-watches/</guid>
      <description>TL;DR ConsulでSerfのEvent Handlerのようなものを試したメモ
main Consulの0.4からWatchesという機能が追加されて
Serfのevent handlerのようなことができるようになった。
昨日つくったconsul-testに
 node01/config.json  { &amp;quot;node_name&amp;quot;: &amp;quot;node01&amp;quot;, &amp;quot;data_dir&amp;quot;: &amp;quot;./node01/&amp;quot;, &amp;quot;bind_addr&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;client_addr&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;ui_dir&amp;quot;: &amp;quot;./dist/&amp;quot;, &amp;quot;watches&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;nodes&amp;quot;, &amp;quot;handler&amp;quot;: &amp;quot;./node01/hosts_update.rb&amp;quot; } ] }  watchesの設定を追加してみた。
hosts_update.rbでやっていることはシンプルで
nodesに変化があった場合に、標準入力でnodesの情報を取得し、
同ディレクトリに_hostsファイルを生成して、
nodeの名前とそのAddressを
hostsファイルに似せて出力するようにしている。
 ConsulにはSERF_EVENTのような
管理しているnodeの変化の状態をSTDINで受け取る方法はないのだろうか
 雑談 このような簡単なスクリプトはGoで書いてもいいかもしれないけど
バイナリだけ置いてあるような状態の時に
_作成者を全面的に信用する_みたいな部活っぽい対応になりそう。
簡易スクリプトをGoで書いたらバイナリとそのソースファイルを
同ディレクトリに置いておくとかが良いんだろうか。</description>
    </item>
    
    <item>
      <title>Consul Clusterを手元に構築する簡単なスクリプトかいた</title>
      <link>https://blog.kenjiskywalker.org/2014/09/08/consul-test-tool/</link>
      <pubDate>Mon, 08 Sep 2014 21:01:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/08/consul-test-tool/</guid>
      <description>https://github.com/kenjiskywalker/consul-test READMEのとおりですが
Node Address Status Type Build Protocol node01 127.0.0.1:8301 alive server 0.4.0 2 node02 127.0.0.2:8301 alive server 0.4.0 2 node03 127.0.0.3:8301 alive server 0.4.0 2 node04 127.0.0.4:8301 alive client 0.4.0 2  上記構成のConsul Clusterを
OS X上に簡単に作成できるスクリプトをつくりましたので
よかったらご利用ください。
あわせてよみたい ConsulのDNSラウンドロビンの検証</description>
    </item>
    
    <item>
      <title>ssコマンドの使えそうなもののメモ</title>
      <link>https://blog.kenjiskywalker.org/2014/09/06/ss-command/</link>
      <pubDate>Sat, 06 Sep 2014 23:11:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/06/ss-command/</guid>
      <description>$ss -ltと$ss -ltpは使える。
-iは面白いけど本当に確認するならngrepかtcpdumpだろうな
セッションを開いているホスト名を名前解決しない(デフォルト) $ss -n  セッションを開いているホスト名を名前解決する $ss -r  TCPのセッションのみ表示 $ss -t  $ss -A tcp  UDPのセッションのみ表示 $ss -u  $ss -A udp  TCPとUDPのセッションのみ表示 $ss -tu  $ss -A tcp,udp  UNIX Domainのセッションのみ表示 $ss -x  $ss -A unix  特定のセッションの状態のものを抽出 $ss -t state fin-wait-2  TCPでLISTENしているポートを表示 $ss -lt  TCPでLISTENしているポートのプロセス名を表示 $ss -ltp  コマンド名自体が短いからササッと確認するのには良さそう</description>
    </item>
    
    <item>
      <title>hubot-atというhubot pluginをつくった</title>
      <link>https://blog.kenjiskywalker.org/2014/09/04/hubot-at/</link>
      <pubDate>Thu, 04 Sep 2014 14:22:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/09/04/hubot-at/</guid>
      <description>Slackを使い始めたので昔つくったunazu_kunの機能を
hubotに持ってきました。
hubot-at というように
&amp;gt; hubot at HH:MM message  と指定することによって、その指定した時間にmessageを通知してくれます。
元々taiyohさんが
 hubotにもunazu_kun的な機能を追加する - taiyoh&amp;rsquo;s memorandum
  にて書いてくれていたので、それを踏襲しています。
ありがとうございます。
最低限の実装しかしていません。何かあればpull requestください:)</description>
    </item>
    
    <item>
      <title>2014/07読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/08/31/201408-book/</link>
      <pubDate>Sun, 31 Aug 2014 16:06:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/08/31/201408-book/</guid>
      <description>booklogというサービス、デザインと使い勝手が本当に良い。
kenjiskywalkerの本棚 - 2014年08月 (4作品)進撃の巨人(14) (講談社コミックス)
諫山創
読了日：08月09日
多重人格探偵サイコ (20) (カドカワコミックス・エース)
田島昭宇
読了日：08月09日
成川の「なぜ」がわかる英文法の授業 (大学受験Nシリーズ)
成川博康
読了日：08月17日
フロントエンドエンジニア養成読本 [HTML、CSS、JavaScriptの基本から現場で役立つ技術まで満載! ] (Software Design plus)
斉藤祐也
読了日：08月17日
powered by booklog この前
GitHubで最近更新されていないプロジェクトを簡単に見分けるChrome Extentionつくった
で
JavaScriptやってみたけど基本的なこと全然理解していなかったので
本読んだ。JavaScriptとか目に見えて変わるものは面白い。</description>
    </item>
    
    <item>
      <title>#yapcasia 2014 に発表者として参加してきたこと</title>
      <link>https://blog.kenjiskywalker.org/2014/08/31/yapcasia2014/</link>
      <pubDate>Sun, 31 Aug 2014 00:37:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/08/31/yapcasia2014/</guid>
      <description>YAPC::Asia 2014に参加してきました。
今回は発表者という形で参加させて頂きました。
スタッフのみなさま、yusukebeさん、現場でお声がけくれたみなさん
トークを聞きに来てくれたみなさん、ありがとうございました。
発表の時間が半分で終わったり、
やたら時間余ったり、詰め込みすぎて発表の速度が早過ぎたり、
時間配分間違えて最後駆け足になったりするのはただの準備不足なので
反省。聞きに来てくれてがっかりした人申し訳ない！ごめん！
発表内容は、サービスの開始、スケールアウト、機能追加の時点で
それぞれ気を付けていかないといけないことを話した。
細かくはこちらに書いたので参照してほしい。
#yapcasia 2014 でシステムとの時間の旅の話をしてきました - さよならインターネット
これからウェブサービスを大きくしていきたい、
運用とかよくわからなくてどういう基準でどういう判断をしたら
いいかわからない。という人に向けて話すつもりだったが
聞きに来てくれた人は主にインフラを担当しているか
大規模システムの運用者、技術部長や技術責任者の方がほとんどで
思想とか良いから泥臭い話が聞きたかったという意見が多く
求められていたものと話した内容の温度差があったことにも反省。
発表方法は、淡々と話すよりかは、ウェブサービスを
これから大きくしていこうとしている向けに、自分の携わっている
サービスが大きくなっていく上で気を付けていかなければならないところを
時系列で理解してほしかったので、その疑似体験を経験してほしかったので
時間旅行的な話し方をしたが、発表方法が前衛的で
話が頭の中に入ってこなかったという意見が多かったのでそこも反省。
藤原洋記念ホールだったのでああいうプレゼンテーションの方法を取った。
多目的教室だったら違う発表方法にしていたと思う。
発表の動画はyoutubeにそのうち載せて頂けると思うので
できそこないのTEDみたいな感じなので是非見てほしい。
ああいう発表の方法で次もお願いします、みたいなことを言われたけど
実際にやってみたらわかるけどああいう話し方無駄に疲れるし
普段の発表方法である、課題・やったこと・やって解決されたことの３つを
文字多めのスライドで読み上げながら、発表していくのが一番楽で
聞いている人もわかりやすいことがわかったのでもうやらないと思う。
2015年、YAPCが日本で開催されるなら、お前らが求めてる
泥臭い具体的でイノベーションなネタを応募したいと思う。
ということで、こんな感じでトークするような人間もいるので
今までYAPCで話してみたいんだけどちょっと怖いな&amp;hellip;
っていう人も応募したことのなかった人もほんのちょっと勇気出して
応募してみると良いと思う。あんなんが良いなら
(オレ|私)もちょっとやってみようかなみたいな感じでさ。
@deeeet君、@tagomorisさん、@uzullaさん、おめでとうございました！
おつかれさまでした！</description>
    </item>
    
    <item>
      <title>#yapcasia 2014 でシステムとの時間の旅の話をしてきました</title>
      <link>https://blog.kenjiskywalker.org/2014/08/29/yapcasia2014-cosmo/</link>
      <pubDate>Fri, 29 Aug 2014 12:38:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/08/29/yapcasia2014-cosmo/</guid>
      <description>The world is not complete   邦題:
「完成されたシステムなどない。完成された人間もいない。
あるのは成長し続ける未完成なシステムと、それを支える未完成な人間だけだ」
 ウェブサービスを頭に描きながら、そのウェブサービスの成長の旅を体験することで
その時その時に何が必要か、ということをお話をしました。後半はトークショーでした。
 システムは完全ではないので壊れることを前提につくる
人間は失敗をするので、失敗をしても復旧できるようにシステムをつくる
システムや一部の機能を疎結合にし、再現性を保つことで、障害に強くする
再現性をシンプルに保つことで、システム自体を変更の強いものにする
 例えば、現代でいえば、クラウドサービスでしか動かない、
特定のオンプレでしか動かないシステムではなく、
機能毎に環境に依存しないようにシステムをつくることを忘れないでね。
壊れたりした時に慌てるのではなく、保険をつくって
再現性を持たせて同じ状態に戻せるようにしておいてね。ということでした。
その意識があるかないかで、規模が拡大したり、機能が追加され
複雑化した時に、大きな違いになってくることを私は経験してきました。
大規模の経験がある人は、この辺は体験的に理解していますが
大規模の経験がない人は、最初の構成を複雑にしてしまい
後々苦労してしまうのはあるあるネタかと思います。
再現性については、puppet、Chef、Ansible、Consul、Serfなど
プロビジョニング、オーケストラレーションツールを利用し
環境に依存しない構築が可能になり、
簡易性、疎結合については、Dockerや各種クラウドサービスの登場で、
機能毎にプラットフォームを渡りやすくなってきたのではないでしょうか。
ただ、その記録、保険、再現性、簡易性は
どのタイミングで、どの程度の精度を持たせるかは
つくる時間・つくらなかった時のリスク・復旧時間・構築時間など
都度見積もって、判断してね。という当たり前の話をしました。
Infrastructure as Codeの時代、プログラミングで良く言われている
「変化に強く、シンプルであれ」という哲学は、Infrastructureにも
当てはまる時代になってきたのではないでしょうか。
それは、UNIXの哲学や、日本の文化から学ぶことができます。
そうして、みなさんのウェブサービスの旅は、これからも続いていきます。
という発表を大ホールならではのエモーショナルな空気感で発表してきました。
理想論だ、と吐き捨てることはできますが、その理想の世界が
Go言語の登場から各種プロビジョニングツール、様々なクラウドサービスの登場で
段々と実現可能になってきたのではないでしょうか。
発表が結構早く終わってしまったけど、発表の補足を質問を回答する形ででき
結果的に、視聴者参加型のとても素晴らしい空間が生まれました。
みなさん、ありがとうございました。
聞いてくれた人たち、選んでくれた人たち、ありがとうございました。</description>
    </item>
    
    <item>
      <title>YAPC::Asia 2014 で時間旅行をしながらサービスの成長を体験し、人間とシステムの在り方について話します</title>
      <link>https://blog.kenjiskywalker.org/2014/08/27/yapcasia2014-before/</link>
      <pubDate>Wed, 27 Aug 2014 12:35:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/08/27/yapcasia2014-before/</guid>
      <description>完成されたシステムなどない。完成された人間もいない。あるのは成長し続ける未完成なシステムと、それを支える未完成な人間だけだ / YAPC::Asia 2014
という話をします(題名長すぎて本番絶対噛むしそもそも覚えられない)
YAPCへの参加は3回目で、今回はyusukebe氏が運営されるとのことで
ヨッシャ！ワシもこのニューウェーブに乗るんや！とポエム先行型エントリーを行い
 これ題名で完結してるんじゃねーの？
 何かすごそうだけど結局何の話するの？ で、誰？  と色々なコメントを頂きつつ、お話しをする機会を頂きました。
選んで頂きありがとうございます。
実際ちゃんと話すことがまとまったのは一昨日ぐらいなのですが
サービスが産まれ、成長していく時間の旅をしながら
その時に何が必要だったのか、何を基準に構築、運用すれば良いのか
というお話をする予定です。
オレ自身がインフラだおじさんやインターネット懐古厨おじさん、
インフラとかよくわからないけど担当しなければならない人、
オレがインフラだおじさんとかインターネット懐古厨おじさんとかどうでもよくて、
サーバの保守とか構築とかやらないといけないんだけど
どういう思想を持って運用していけば良いのかいまいちわからない人とか
ウェブオペレーションについて興味はあるけど、難しそうでよくわからない人とか
そんな感じの人に是非聞きに来てほしいと思っています。
興味ある方は是非 08/29 11:00 に藤原洋記念ホールに足を運んでみてください。
朝早いですが、きっと何か得るものはあると思います;)
参考情報
 インフラ系技術の流れ - mizzy.org UNIXという考え方 - さよならインターネット ディスポーザブル長屋 - さよならインターネット 式年遷宮Infrastracture - さよならインターネット  </description>
    </item>
    
    <item>
      <title>2014/07読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/08/09/201407-book/</link>
      <pubDate>Sat, 09 Aug 2014 10:41:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/08/09/201407-book/</guid>
      <description>瞬間英作文が全然進まなかった
kenjiskywalkerの本棚 - 2014年07月 (3作品)GIANT KILLING(32) (モーニング KC)
ツジトモ
読了日：07月25日
バガボンド(37) (モーニング KC)
井上雄彦
読了日：07月25日
キングダム 34 (ヤングジャンプコミックスDIGITAL)
原泰久
読了日：07月25日
powered by booklog </description>
    </item>
    
    <item>
      <title>2014/06読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/07/26/201406-book/</link>
      <pubDate>Sat, 26 Jul 2014 16:22:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/07/26/201406-book/</guid>
      <description>わかりやすいJavaはなんかわかりやすかった。
ハイパフォーマンスブラウザネットワーキングは
全部覚えてられるほどスペック良くないので
チューニングが必要な時にリファレンスみたいな感じで読むのが正解だと思う。
kenjiskywalkerの本棚 - 2014年06月 (5作品)わかりやすいJava オブジェクト指向編
川場隆
読了日：06月21日
ハイパフォーマンス ブラウザネットワーキング ―ネットワークアプリケーションのためのパフォーマンス最適化
Ilya Grigorik
読了日：06月22日
私本太平記 04 帝獄帖
吉川英治
読了日：06月26日
私本太平記 05 世の辻の帖
吉川英治
読了日：06月26日
私本太平記 06 八荒帖
吉川英治
読了日：06月26日
powered by booklog </description>
    </item>
    
    <item>
      <title>GNUのsedとBSDのsed</title>
      <link>https://blog.kenjiskywalker.org/2014/07/18/sed-bre/</link>
      <pubDate>Fri, 18 Jul 2014 10:57:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/07/18/sed-bre/</guid>
      <description>OSXでsedコマンドを実行した際に、正規表現が上手く動作しなかった。
TL;DR BSD sedがイケてないのではなく、
GNU sedが独自で拡張正規表現を実装していただけっぽい。
 OSX  [&#39;-&#39;]% [&#39;-&#39;]% echo &amp;quot;hogeee&amp;quot; | sed -e &#39;s/e\+//&#39; hogeee [&#39;-&#39;]% [&#39;-&#39;]% sed --version sed: illegal option -- - usage: sed script [-Ealn] [-i extension] [file ...] sed [-Ealn] [-i extension] [-e script] ... [-f script_file] ... [file ...] [&#39;x&#39;]%   Linux  [&#39;-&#39;]# [&#39;-&#39;]# echo &amp;quot;hogeee&amp;quot; | sed -e &#39;s/e\+//&#39; hog [&#39;-&#39;]# [&#39;-&#39;]# [&#39;-&#39;]# sed --version GNU sed version 4.</description>
    </item>
    
    <item>
      <title>Monitoring monitor_agent by Sensu</title>
      <link>https://blog.kenjiskywalker.org/2014/07/09/monitor_agent-and-sensu/</link>
      <pubDate>Wed, 09 Jul 2014 19:39:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/07/09/monitor_agent-and-sensu/</guid>
      <description>TL;DR Monitor the state of the Fluentd by Sensu.
SensuでFluentdの状態を監視する
利用するソフトウェア(Using Software)  fluentd Sensu check-fluentd-monitor-agent.rb  監視設定(Monitoring Settings) Sensu&amp;rsquo;s Configuration Example
Sensuの設定例
check_fluentd_monitor_agent.json
{ &amp;quot;checks&amp;quot;: { &amp;quot;check_fluentd_monitor_agent_retry&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-fluentd-monitor-agent.rb -w 5 -c 10 -m &#39;retry_count&#39;&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;occurrences&amp;quot;: 3, &amp;quot;subscribers&amp;quot;: [&amp;quot;foo&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] }, &amp;quot;check_fluentd_monitor_agent_buffer_total_queued_size&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-fluentd-monitor-agent.rb -w 1024000 -c 51200000 -m &#39;buffer_queue_length&#39;&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;occurrences&amp;quot;: 3, &amp;quot;subscribers&amp;quot;: [&amp;quot;foo&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] } } }   アラート例(Example Alert)  CheckFluentdMonitorAgent WARNING: plugin_id object:XXXXXXX retry_count 8   アラートが出ているプラグインの確認(Check the plug-in target)  $ curl http://localhost:24220/api/plugins.</description>
    </item>
    
    <item>
      <title>AlfredのUTC時間を調べるworkflowをつくった</title>
      <link>https://blog.kenjiskywalker.org/2014/06/22/alfred-utc-get/</link>
      <pubDate>Sun, 22 Jun 2014 03:11:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/22/alfred-utc-get/</guid>
      <description>alfred-get-utc-workflow TL;DR 毎回UTCが何時だか計算してたので機械にやらせる
Ref  An Introduction to Workflows Pocketの記事をランダムに表示・検索するAlfred Workflowをつくりました - CreativeStyle https://github.com/zhaocai/alfred2-ruby-template  workflow  utc  だけで現在時刻に対するUTCの時間を
 utc 20:00  とhh:mmを引数で渡すとその時刻に対してのUTC時刻を表示する</description>
    </item>
    
    <item>
      <title>2014/05読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/06/21/201405-book/</link>
      <pubDate>Sat, 21 Jun 2014 03:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/21/201405-book/</guid>
      <description>新幹線乗ってる時めちゃくちゃ読書捗るから月一で新幹線乗りたい。
kenjiskywalkerの本棚 - 2014年05月 (7作品)Docker入門 Immutable Infrastructureを実現する
松原豊
読了日：05月01日
コード・シンプリシティ
MaxKanat-Alexander著、福嶋雅子、株式会社トップスタジオ訳
読了日：05月04日
デザイニング・データビジュアライゼーション
NoahIliinsky、JulieSteele著、小沢秀行、株式会社トップスタジオ訳
読了日：05月04日
私本太平記 03 みなかみ帖
吉川英治
読了日：05月07日
組込みユーザのための アセンブリ/C言語読本
橋本洋志
読了日：05月18日
Chef活用ガイド コードではじめる構成管理
澤登亨彦
読了日：05月22日
Chef実践入門 ~コードによるインフラ構成の自動化 (WEB+DB PRESS plus)
吉羽龍太郎
読了日：05月22日
powered by booklog </description>
    </item>
    
    <item>
      <title>homebrewでバージョンを固定してインストールしたい</title>
      <link>https://blog.kenjiskywalker.org/2014/06/19/brew-version-specify/</link>
      <pubDate>Thu, 19 Jun 2014 18:11:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/19/brew-version-specify/</guid>
      <description>homebrewがバージョン指定してインストールできないので
packageを作成してインストールする方法を記載します。
 バージョン指定してインストールできるようにするissueとかp-rあるだろう
と思って探してみたんですが見つからなかった。探し方が悪いかもしれない。
 TL;DR Brewfileなどでバージョン指定してインストールできないので
自分で利用したいバージョンのpackageを作成してそれをインストールする
Ref brew tap - Homebrew/homebrew
Formula Cookbook - Homebrew/homebrew
HomeBrewで自作ツールを配布する - SOTA
Homebrew vs Boxen を比較して、brewproj に着手 - ja.ngs.io
How To 例えばnginxの1.2.8のバージョンを静的に指定してインストールしたい場合
 GitHubの自分の利用したいアカウントにて、homebrew-fooというリポジトリを作成する。 brew versions nginxを実行してgitのハッシュを取得する /usr/local/Library/配下にて_2._で取得したハッシュをcheckout /usr/local/Library/Formula/nginx.rbをhomebrew-foo/nginx128.rbという名前で保存 nginx128.rb   before
class Nginx &amp;lt; Formula  after
class Nginx128 &amp;lt; Formula   上記のようにclass名を変更
 nginx128.rb をcommitしてpush brew tap username/fooのコマンドを発行してnginx128.rbを取得 brew search nginxのコマンドを発行して  nginx nginx128  と出れくれば成功。</description>
    </item>
    
    <item>
      <title>pecoを利用してAWSのインスタンスを取得する</title>
      <link>https://blog.kenjiskywalker.org/2014/06/18/peco-get-aws-instance-list/</link>
      <pubDate>Wed, 18 Jun 2014 12:19:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/18/peco-get-aws-instance-list/</guid>
      <description>peco を利用してAWSのEC2に簡単ログイン zsh、全然調べてなくて30分ぐらいで適当に書いたヤツです。
TL;DR zsh使っててaws-cli使っていてshellscriptを利用できるなら
aws-cliを利用してnameとpublic dnsを紐付けてpecoで絞り込むだけのもの
設定  shellscriptを起きます(get-ec2-list.sh)  #!/bin/bash instances=$(aws ec2 describe-instances \ --filters &#39;Name=instance-state-name,Values=running&#39; \ --query &#39;Reservations[].Instances[?PublicDnsName!=`null`].[Tags[*][?Key==`Name`].Value[],PublicDnsName]&#39; \ --output text) for item in ${instances[@]}; do if [[ `echo $item | grep &#39;compute.amazonaws.com&#39;` ]]; then printf &amp;quot;$item\n&amp;quot; else printf &amp;quot;$item &amp;quot; fi done   zshの設定にこんな感じのものを書きます(zshrc)  function get_ec2_list() { local get_list get_list=&amp;quot;/home/hoge/get-ec2-list.sh&amp;quot; BUFFER=$(eval $get_list | peco | awk &#39;{print $2}&#39;) CURSOR=$#BUFFER zle clear-screen } zle -N get_ec2_list bindkey &#39;^v&#39; get_ec2_list  こんな感じのものをつくると</description>
    </item>
    
    <item>
      <title>pecoを導入してzshのhistoryに使うようにした</title>
      <link>https://blog.kenjiskywalker.org/2014/06/12/peco/</link>
      <pubDate>Thu, 12 Jun 2014 16:48:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/12/peco/</guid>
      <description>TL;DR peco入れた。速い
peco https://github.com/lestrrat/peco
まだターミナルのヒストリの絞り込みぐらいしか使っていないけど便利です。
percol https://github.com/mooz/percol
元々moozさんが書いたpercolというものがあってlestrratさんがGoで書いたものがpeco。
導入方法  peco を go get  $ go get github.com/lestrrat/peco/cmd/peco/  .zshrc percolのものを流用させて頂きました。
function peco-select-history() { local tac if which tac &amp;gt; /dev/null; then tac=&amp;quot;tac&amp;quot; else tac=&amp;quot;tail -r&amp;quot; fi BUFFER=$(history -n 1 | \ eval $tac | \ peco --query &amp;quot;$LBUFFER&amp;quot;) CURSOR=$#BUFFER zle clear-screen } zle -N peco-select-history bindkey &#39;^r&#39; peco-select-history  ~/.peco/config.json C-c でキャンセルできるように
{ &amp;quot;Keymap&amp;quot;: { &amp;quot;C-p&amp;quot;: &amp;quot;peco.SelectPrevious&amp;quot;, &amp;quot;C-n&amp;quot;: &amp;quot;peco.</description>
    </item>
    
    <item>
      <title>GitHubで最近更新されていないプロジェクトを簡単に見分けるChrome Extentionつくった</title>
      <link>https://blog.kenjiskywalker.org/2014/06/09/github-add-color-to-recently-not-update-file/</link>
      <pubDate>Mon, 09 Jun 2014 00:57:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/09/github-add-color-to-recently-not-update-file/</guid>
      <description>GitHub Chrome Web Store ファイルが半年以上更新されていなければオレンジに、
1年以上更新されていなければ赤に色が変わるようになる。
比較的実利的だと思うのでご利用ください。
土曜日酒飲みながらダラダラとChrome Extention Hackathonみたいなのを
@soh335の家で@shiyakeitaと3人でやっていた。JavaScriptとか全然書いたことなくて
インターネット調べながら適当な感じで書いて動いたから、@damele0nにレビューしてもらったら
すごい雑な感じだったのにめちゃくちゃカチっとレビューしてもらえた。
よくわからないけどカヤックにいる人はもちろんだけど
いたことのある人たちもものをつくるみたいな習慣あって面白い。</description>
    </item>
    
    <item>
      <title>ConsulのDNSラウンドロビンの検証</title>
      <link>https://blog.kenjiskywalker.org/2014/06/06/consul-dns-round-robin/</link>
      <pubDate>Fri, 06 Jun 2014 01:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/06/consul-dns-round-robin/</guid>
      <description>Consul - hashicorp を利用しDNS Failoverを検証した
 Consul v0.2.0
 TL;DR hostnameやserviceなどでDNSを設定し
DNSはnodeの死活監視によって動的に生まれ死んでいく。
nodeとは別にserviceという概念があり、DNSラウンドロビンが行える
loopback alias @keita氏に教えてもらった
Mac OS X – Adding a loopback alias - THE DANGLING POINTER
このloopbackのaliasが大変役に立った。
nodeの用意  127.0.0.1(node01) 127.0.0.2(node02) 127.0.0.3(node03)  $ ifconfig lo0 alias 127.0.0.2 $ ifconfig lo0 alias 127.0.0.3  設定ファイルのディレクトリの用意 $ mkdir ./node01 $ mkdir ./node02 $ mkdir ./node03  設定ファイルの作成  node01/config.json  Web UI用のデータはここからダウンロードして
ui_dirにて指定してディレクトリへ配置する。
{ &amp;quot;node_name&amp;quot;: &amp;quot;node01&amp;quot;, &amp;quot;data_dir&amp;quot;: &amp;quot;./node01/&amp;quot;, &amp;quot;bind_addr&amp;quot;: &amp;quot;127.</description>
    </item>
    
    <item>
      <title>Route53を利用したフェイルオーバーシステムの作成</title>
      <link>https://blog.kenjiskywalker.org/2014/06/06/route53-healthcheck-failover/</link>
      <pubDate>Fri, 06 Jun 2014 00:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/06/route53-healthcheck-failover/</guid>
      <description>AWSのRoute53サービスを利用し、冗長構成のあるシステムをつくる。
TL;DR 同一のレコードをPrimaryとSecondaryで作成し
Primary、SecondaryそれぞれでHealth Check to Associateを設定する。
PrimaryのHealth Checkが失敗した場合、Secondaryに遷移する。
SecondaryもダメだったらPrimaryに変わる。
両方同じタイミングでダメになったらPrimaryのまま。
手順 Health Checkの設定 1. Health Checks にてヘルスチェック対象のホスト・サービスを設定 Health Checkを利用するレコードの作成 2-1. Hosted Zones にてフェイルオーバーを行いたいDNSを設定 2-2. Create Record Set にてレコードの作成(Primary) 2-3. Routing Policy にて Failover を選択 2-4. Failover Record Type にて Primary を選択 2-5. Associate with Health Check にて Yes を選択 2-6. Health Check to Associate にて 1. で作成したヘルスチェックを選択 2-7. Create Record Set にてレコードの作成(Secondary) 2-8. Routing Policy にて Failover を選択 2-9.</description>
    </item>
    
    <item>
      <title>shellscriptでmailコマンドを利用してGmailにメールを送るとnonameという添付ファイルが添付される問題</title>
      <link>https://blog.kenjiskywalker.org/2014/06/04/gmail-noname/</link>
      <pubDate>Wed, 04 Jun 2014 02:56:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/06/04/gmail-noname/</guid>
      <description>#!/bin/bash FOO=`command` echo ${FOO} | mail -s &amp;quot;foo command dayo&amp;quot; foo@example.com  のようなスクリプトを作成した時に、送信先である
Gmailで受信すると本文にコマンドの結果が出力されるのではなく
nonameという添付ファイルが送られてきた。
原因はコマンドの結果にEscape Sequenceが入っていたため
文字コードを上手く認識できなかったようだ。
Escape Sequenceとかガッツリやったことがなくて
IRCに色付けたりターミナルの文字列に色付けたりするぐらいしか
使ったことがなくて、原因が特定できなかった。
@keitap氏は一撃でEscape Sequenceだってわかった。
対応としては
colでエスケープシーケンスを除去 - うまい棒blog
hogemさんが書いてくれたように\を除外するとかして
Escape Sequenceとして認識させないようにして上手くいった。
#!/bin/bash FOO=`command` echo ${FOO} | col -b | mail -s &amp;quot;foo command dayo&amp;quot; foo@example.com  こちらからは以上です。</description>
    </item>
    
    <item>
      <title>Created check-fluentd-monitor-agent of sensu-plugin</title>
      <link>https://blog.kenjiskywalker.org/2014/05/30/sensu-plugin-check-fluentd-monitor-agent/</link>
      <pubDate>Fri, 30 May 2014 19:08:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/30/sensu-plugin-check-fluentd-monitor-agent/</guid>
      <description>Colleagues said to me that I want to monitoring fluentd&amp;rsquo;s state,
Then I created this plugin.
同僚がfluentdの状態を監視したいと言っていたので
私はこのプラグインをつくりました。
 Monitoring Fluentd - fluentd
 sensu-community-plugins/plugins/fluentd/check-fluentd-monitor-agent.rb  how to use.
使い方
{ &amp;quot;checks&amp;quot;: { &amp;quot;check_fluentd_monitor_agent_retry&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-fluentd-monitor-agent.rb -w 5 -c 10 -m &#39;retry_count&#39;&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;occurrences&amp;quot;: 1, &amp;quot;subscribers&amp;quot;: [&amp;quot;foo&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] }, &amp;quot;check_fluentd_monitor_agent_buffer_total_queued_size&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-fluentd-monitor-agent.rb -w 1024 -c 5120 -m &#39;buffer_queue_length&#39;&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;occurrences&amp;quot;: 1, &amp;quot;subscribers&amp;quot;: [&amp;quot;foo&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] } } }  Please try it.</description>
    </item>
    
    <item>
      <title>書評「Chef活用ガイド」と「Chef実践入門」について</title>
      <link>https://blog.kenjiskywalker.org/2014/05/22/chef-books/</link>
      <pubDate>Thu, 22 May 2014 01:08:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/22/chef-books/</guid>
      <description>同じような時期にChefの書籍が2冊(厚い方と普通の方)発行されるという
大変おもしろい現象もあり、日本のChefコミュニティは
これからより多くの人が活用する段階に入ってきたのかなという印象を持っています。
Chef活用ガイド コードではじめる構成管理著者 : 澤登亨彦KADOKAWA/アスキー・メディアワークス発売日 : 2014-04-25ブクログでレビューを見る» Chef実践入門 ~コードによるインフラ構成の自動化 (WEB+DB PRESS plus)著者 : 吉羽龍太郎技術評論社発売日 : 2014-05-22ブクログでレビューを見る» 2013/03に発売された@naoya_ito氏による「chef-solo本」から1年と少し
入門Chef Solo - Infrastructure as Code著者 : 伊藤直也伊藤直也発売日 : 2013-03-11ブクログでレビューを見る» 薄い本(chef-solo本)、普通の本(Chef実践入門)、厚い本(Chef活用ガイド)の3冊をもって
Chef三種の神本として本棚に祀ることをおすすめいたします。
書籍毎によるおすすめ chef-solo本(薄い本)  本を読むのが苦手、取り敢えずChefというものを動かしてみたい人向き  Chef実践入門(普通の本)  Chefはどのようなものか、手元でVagrantなどを利用して手で動かしながら学びたい人向き  Chef活用ガイド(厚い本)  普段からChefを利用しているユーザのリファレンス、およびふとした瞬間に開いて発見したい人向き  Chefを初めてさわる人へ Chefを取り敢えず触ってみようという人が
どちらを購入すべきか迷われる可能性は多いにあるかと思うので、
参考程度に違いを記載します。
Chefの導入自体が、会社にとって大変大掛かりなタスクになる可能性がある場合は
まずご自身が_Chef実践入門_を読み、手を動かしどのようなものか理解された上で、
_Chef活用ガイド_を読み、Chefに関連する知識を埋めるという流れをおすすめしたいです。
理由は、_Chef実践入門_の書籍自体が手を動かしながら
理解を深めることに重きを置いており、
_Chef活用ガイド_はChefに対するリファレンス的な要素が大きいからです。
 もちろん_Chef実践入門_にもChef Serverやtest-kitchen、
Serverspecを利用したテスト方法など記載されています:)
Chef活用ガイドはコーディングやcookbookの実行のされ方
LWRPについてなど、少し深い情報がリファレンス的に情報に辿りつけ
2冊ともよく棲み分けがされている印象です。
 両方読んでみて 私自身は、あまり深いところまでChefを利用しているわけではないのですが
２年ぐらいChefを扱って仕事を行っているので(もう2年ぐらい経つのか&amp;hellip;)
何の気なしに知っているような感覚にもなりますが、
ohai pluginについては全く知らなかったので、目からウロコでした。
_Chef実践入門_のPackerとVagrantの設定を読みながら、自分のものを見直します。 _Chef活用ガイド_のコラムは大変面白いですね。(ohaiの由来、考えたこともありませんでした)</description>
    </item>
    
    <item>
      <title>式年遷宮インフラストラクチャについて</title>
      <link>https://blog.kenjiskywalker.org/2014/05/21/shikinensengoo-infrastractor-blue-green-deployment/</link>
      <pubDate>Wed, 21 May 2014 01:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/21/shikinensengoo-infrastractor-blue-green-deployment/</guid>
      <description>参考エントリ 式年遷宮Infrastracture 「技術的負債」を問いなおす」というタイトルでJAWS DAYS 2014で話してきた - delirious thoughts どうでもいいこと 世界的な表現で言うBlueGreenDeploymentについて気付いたことがあったのでメモ。
式年遷宮が行われた2013年の当日のメンテナンス時間について調べてみた。
 皇大神宮 10月2日　午後1時から翌3日午前5時
 豊受大神宮 10月5日　午後1時から翌6日午前5時
  16hour x 2days ということだったらしい。
この間は神様もお休みしていたのだ。
これを稼働率で計算すると
24(hour) * 365(days) * 20(years) = 175,200 (16hour * 2days) / 175,200 = 0.0001826484 100 - 0.0001826484 = 99.9998173516  99.9998%の稼働率となる。わけはなく
そもそも24時間稼働しているわけではないのでそんな計算は成り立たない。
何が言いたいのかというと、ガチで毎日切り替わるような
BlueGreenDeploymentなシステムをつくるなら
少なくとも毎日アクセスの少ない30分ぐらいはダウンしてても良いのではないか。
それぐらい許容しないで運用でカバーするのは大変なんじゃないかと思った。
何でもかんでもノンストップのコストって結構あるよなって感じるけど
実際はどうなんだろ。神様も儀式立てて切り替えているんだし
その辺インターネットのシステムも儀式立てて本番環境切り替えた方が良いのではないか。
なんてことを日本酒飲みながら考えていたりした。</description>
    </item>
    
    <item>
      <title>AWSのAutoScalingで起動するインスタンスにEhemeral Diskをattachする</title>
      <link>https://blog.kenjiskywalker.org/2014/05/12/autoscaling-ami-attach-ephemeral-disk/</link>
      <pubDate>Mon, 12 May 2014 18:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/12/autoscaling-ami-attach-ephemeral-disk/</guid>
      <description>AutoScalignのLaunch ConfigurationでEphemeral DiskをAttachすることが可能です。
存在しない場合は無視されるので、下記のように4本など
事前に指定しておくのが良いかと思います。
 create-launch-configuration  $ aws autoscaling --region REGION create-launch-configuration --launch-configuration-name AUTOSCALINGLAUNGCONFIG \ --image-id AMI \ --instance-type m1.small \ --key-name KEYNAME \ --security-groups sg-00000000 sg-00000001 \ --block-device-mappings &#39;[ {&amp;quot;DeviceName&amp;quot;:&amp;quot;/dev/sdb&amp;quot;,&amp;quot;VirtualName&amp;quot;:&amp;quot;ephemeral0&amp;quot;}, \ {&amp;quot;DeviceName&amp;quot;:&amp;quot;/dev/sdc&amp;quot;,&amp;quot;VirtualName&amp;quot;:&amp;quot;ephemeral1&amp;quot;}, \ {&amp;quot;DeviceName&amp;quot;:&amp;quot;/dev/sdd&amp;quot;,&amp;quot;VirtualName&amp;quot;:&amp;quot;ephemeral2&amp;quot;}, \ {&amp;quot;DeviceName&amp;quot;:&amp;quot;/dev/sde&amp;quot;,&amp;quot;VirtualName&amp;quot;:&amp;quot;ephemeral3&amp;quot;} \ ]&#39;   aws autoscaling &amp;ndash;region REGION describe-launch-configurations  { &amp;quot;LaunchConfigurations&amp;quot;: [ { &amp;quot;UserData&amp;quot;: null, &amp;quot;EbsOptimized&amp;quot;: false, &amp;quot;LaunchConfigurationARN&amp;quot;: &amp;quot;arn:aws:ARN:REGION:NUM:launchConfiguration:NUM:launchConfigurationName/AUTOSCALINGLAUNGCONFIG&amp;quot;, &amp;quot;InstanceMonitoring&amp;quot;: { &amp;quot;Enabled&amp;quot;: true }, &amp;quot;ImageId&amp;quot;: &amp;quot;AMI&amp;quot;, &amp;quot;CreatedTime&amp;quot;: &amp;quot;2014-01-01T01:00:00.000Z&amp;quot;, &amp;quot;BlockDeviceMappings&amp;quot;: [ { &amp;quot;DeviceName&amp;quot;: &amp;quot;/dev/sdd&amp;quot;, &amp;quot;VirtualName&amp;quot;: &amp;quot;ephemeral2&amp;quot; }, { &amp;quot;DeviceName&amp;quot;: &amp;quot;/dev/sdb&amp;quot;, &amp;quot;VirtualName&amp;quot;: &amp;quot;ephemeral0&amp;quot; }, { &amp;quot;DeviceName&amp;quot;: &amp;quot;/dev/sde&amp;quot;, &amp;quot;VirtualName&amp;quot;: &amp;quot;ephemeral3&amp;quot; }, { &amp;quot;DeviceName&amp;quot;: &amp;quot;/dev/sdc&amp;quot;, &amp;quot;VirtualName&amp;quot;: &amp;quot;ephemeral1&amp;quot; } ], &amp;quot;KeyName&amp;quot;: &amp;quot;KEYNAME&amp;quot;, &amp;quot;SecurityGroups&amp;quot;: [ &amp;quot;sg-00000000&amp;quot;, &amp;quot;sg-00000001&amp;quot; ], &amp;quot;LaunchConfigurationName&amp;quot;: &amp;quot;AUTOSCALINGLAUNGCONFIG&amp;quot;, &amp;quot;KernelId&amp;quot;: null, &amp;quot;RamdiskId&amp;quot;: null, &amp;quot;InstanceType&amp;quot;: &amp;quot;m1.</description>
    </item>
    
    <item>
      <title>Sensuで一つのJSONファイルに複数の設定を記述する</title>
      <link>https://blog.kenjiskywalker.org/2014/05/12/sensu-multi-settings/</link>
      <pubDate>Mon, 12 May 2014 16:40:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/12/sensu-multi-settings/</guid>
      <description>deep_mergeなのでこう書けます。
 /etc/sensu/conf.d/checks/check_hoge.json  { &amp;quot;checks&amp;quot;: { &amp;quot;check_hoge_one&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-hoge.rb -C 1&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;subscribers&amp;quot;: [&amp;quot;all&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] }, &amp;quot;check_hoge_two&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-hoge.rb -C 2&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;subscribers&amp;quot;: [&amp;quot;all&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] }, &amp;quot;check_hoge_three&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-hoge.rb -C 3&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;subscribers&amp;quot;: [&amp;quot;all&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] } } }  </description>
    </item>
    
    <item>
      <title>AWSのAutoScalingGroupにタグを付けて起動されるEC2インスタンスにもタグが自動的に付与される</title>
      <link>https://blog.kenjiskywalker.org/2014/05/09/autoscaling-tag/</link>
      <pubDate>Fri, 09 May 2014 18:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/09/autoscaling-tag/</guid>
      <description>【AWS発表】オートスケールされたEC2インスタンスにタグ付け可能に - Amazon Web Services ブログ
こちらの便利機能が追加されたので早速設定してみました。
AWS CLI - create-or-update-tags  &amp;ndash;tags ResourceId=string,ResourceType=string,Key=string,Value=string,PropagateAtLaunch=boolean
 aws --region REGION autoscaling create-or-update-tags \ --tags ResourceId=AUTOSCALINGGROUP_NAME, \ ResourceType=auto-scaling-group, \ Key=KEY, \ Value=VALUE, \ PropagateAtLaunch=true   ResourceId  tagを設定するAutoScalingGroupの名前を指定
 ResourceType  他に何の設定があるのかは不明ですがauto-scaling-groupを指定しておけば問題ないかと
 Key  tagのKey名
 Value  tagのValue名
 PropagateAtLaunch  設定したtagをAutoScalingGroupによって起動されたEC2インスタンスにも適用させるかどうか
上記の設定を行うことで、AutoScalingGroupにて起動されたEC2インスタンスへ
タグが適用されるようになります。大変便利ですね。ありがとうございます。</description>
    </item>
    
    <item>
      <title>2014/04読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/05/04/201404-book/</link>
      <pubDate>Sun, 04 May 2014 11:37:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/04/201404-book/</guid>
      <description>秘密の国のアリスは本当に面白かった。
新版暗号技術入門　秘密の国のアリス著者 : 結城浩SBクリエイティブ株式会社発売日 : 2013-12-04ブクログでレビューを見る» キングダム 33 (ヤングジャンプコミックスDIGITAL)著者 : 原泰久集英社発売日 : 2014-01-17ブクログでレビューを見る» 進撃の巨人(13) (講談社コミックス)著者 : 諫山創講談社発売日 : 2014-04-09ブクログでレビューを見る» GIANT KILLING(31) (モーニングKC)著者 : ツジトモ講談社発売日 : 2014-04-23ブクログでレビューを見る» へうげもの(18) (モーニングKC)著者 : 山田芳裕講談社発売日 : 2014-04-23ブクログでレビューを見る» </description>
    </item>
    
    <item>
      <title>Sensuの監視の設定</title>
      <link>https://blog.kenjiskywalker.org/2014/05/03/sensu-monitoring-setting/</link>
      <pubDate>Sat, 03 May 2014 02:59:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/03/sensu-monitoring-setting/</guid>
      <description>Sensu導入と初期設定についての続きのエントリーになります。
pluginの書き方 http://sensuapp.org/docs/0.12/checks
http://sensuapp.org/docs/0.12/adding_a_check
上記ドキュメントを参考にして頂くとわかる通り
 status code が0であればOK
 status code が1であればWARNING status code が2であればCRITICAL status code が3であればUNKNOWN  という方法で監視を行います。
コミュニティプラグインを確認すると、そのほとんどが
require &#39;sensu-plugin/check/cli&#39;を呼び出していることがわかります。
https://github.com/sensu/sensu-plugin check用のメソッド、metrics用のメソッドを
それぞれ利用することが可能になります。
まだ私はpluginを書いたことがないので、また書く機会があれば
その時に改めて詳細を書きたいと思います。
気を付けなければならないこと 導入以前は、Sensuはアラートとメトリクスのデータを
同じデータを利用して監視を行うことができると考えていたのですが
これは誤りで、
 checkはcheck用のプラグイン metricsはmetircs用のプラグイン   と分かれています。なかなかZABBIXのように万能にはいかないようです。
checks { &amp;quot;checks&amp;quot;: { &amp;quot;check_cpu&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-cpu.rb -w 90 -c 100&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;occurrences&amp;quot;: 5, &amp;quot;subscribers&amp;quot;: [&amp;quot;all&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] } }, &amp;quot;checks&amp;quot;: { &amp;quot;check_cpu_nervous&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;/etc/sensu/plugins/check-cpu.rb -w 10 -c 30&amp;quot;, &amp;quot;interval&amp;quot;: 60, &amp;quot;subscribers&amp;quot;: [&amp;quot;admin&amp;quot;], &amp;quot;handlers&amp;quot;: [&amp;quot;hipchat&amp;quot;, &amp;quot;mailer&amp;quot;] } } }   &amp;ldquo;check_cpu&amp;rdquo;, &amp;ldquo;check_cpu_nervous&amp;rdquo;  設定内容の名前です。</description>
    </item>
    
    <item>
      <title>Sensu導入と初期設定について</title>
      <link>https://blog.kenjiskywalker.org/2014/05/02/newbie-sensu/</link>
      <pubDate>Fri, 02 May 2014 14:48:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/05/02/newbie-sensu/</guid>
      <description>Chef: 11.8.0
sensu: 0.12.3
RabbitMQ: 3.1.5
erlang R14B-04.1.4
Redis :2.6.17
 参考 : 監視ソフトをNagiosからSensuに切り替えて2ヶ月経ったのでまとめた - Glide Note
Amazon Linux 上に sensu-server を構築する（1）- ようへいの日々精進 XP
特にようへいさんのブログはSensuのエントリーが多く、大変参考になります。
ありがとうございます。
Sensu server + Sensu client のインストール Chefを利用します。
インストール自体はRabbitMQでコケる記事を参考にして下さい。
2014/05/02 現在、RabbitMQのインストールで失敗することはなくなりました。 また、下記に記載しますが、インストール先サーバのRubyのバージョンに環境が左右されないように
&amp;quot;use_embedded_ruby&amp;quot;: trueとしてembedded rubyを利用することをおすすめいたします。
tips sensu-chef から include_recipe&amp;rdquo;yum&amp;rdquo; 外す
基本的にsensuをインストールするのに既存のものを破壊することはないのですが
sensu-chefの中にinclude_recipe &amp;ldquo;yum&amp;rdquo;しているところがあり
この設定をよしなにしないとyum.confが書き換えられてしまいます。
sensuのインストールはsensu.repoを追加して行うので「include_recipe &amp;ldquo;yum&amp;rdquo;」は不要です。
既存のサーバにインストールするときは気を付けて下さい。
この前ryuzeeさんのpull requestが取り込まれて
Amazon Linuxにインストールすることができるようになりました。
 sensu_server.json  sensuとredisとrabbitmqをインストールしてください。
 sensu_server.json  { &amp;quot;sensu&amp;quot;: { &amp;quot;use_embedded_ruby&amp;quot;: true, &amp;quot;dashboard&amp;quot;: { &amp;quot;user&amp;quot;: &amp;quot;foo&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;bar&amp;quot; }, &amp;quot;rabbitmq&amp;quot;: { &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;, &amp;quot;port&amp;quot;: 5671, &amp;quot;vhost&amp;quot;: &amp;quot;/sensu&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;baz&amp;quot; }, &amp;quot;node_subscriptions&amp;quot;: [ &amp;quot;sensu_server&amp;quot; ] }, &amp;quot;run_list&amp;quot;: [&amp;quot;recipe[sensu]&amp;quot;, &amp;quot;recipe[sensu::redis]&amp;quot;, &amp;quot;recipe[sensu::rabbitmq]&amp;quot;] }  上記内容でChefを廻せばインストールされるかと思います。</description>
    </item>
    
    <item>
      <title>heartbleedの件があったので「秘密の国のアリス」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2014/04/28/alice-in-secret/</link>
      <pubDate>Mon, 28 Apr 2014 21:11:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/04/28/alice-in-secret/</guid>
      <description>heartbleedの件を持って、そもそもSSLというか
暗号はどうやってやりとりされているんだ？という謎に光りを当てててくれる本でした。
情報系の大学出てたり、根っからのプログラマだと理解しているのかもしれないけど
コンピュータについて詳しくないので大変助かった。
みんな当たり前に読んでるのかもしれないけど徳丸本
と合わせて必読なタイプの本だと思いました。
おすすめです。</description>
    </item>
    
    <item>
      <title>2014/03読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/04/27/201403-book/</link>
      <pubDate>Sun, 27 Apr 2014 17:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/04/27/201403-book/</guid>
      <description>忘れていた。しや君に教えてもらった
ハートで感じる英文法は面白かった。
生命保険のカラクリ (文春新書)著者 : 岩瀬大輔文藝春秋発売日 : 2009-10-17ブクログでレビューを見る» “お茶”はなぜ女のものになったか―茶道から見る戦後の家族著者 : 加藤恵津子紀伊國屋書店発売日 : 2004-12ブクログでレビューを見る» ハートで感じる英文法―NHK3か月トピック英会話 (語学シリーズ)著者 : 大西泰斗日本放送出版協会発売日 : 2005-12ブクログでレビューを見る» 宇宙兄弟(23) (モーニングKC)著者 : 小山宙哉講談社発売日 : 2014-03-20ブクログでレビューを見る» </description>
    </item>
    
    <item>
      <title>Rubyでconnect&#39;: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL::SSL::SSLError)
が出た時の対応方法</title>
      <link>https://blog.kenjiskywalker.org/2014/04/24/ruby-certificate-verify-failed/</link>
      <pubDate>Thu, 24 Apr 2014 23:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/04/24/ruby-certificate-verify-failed/</guid>
      <description>SensuでSSL使うプラグインでエラーが出ていた。
その対処法を忘れないようにメモ。
$ $ /opt/sensu/embedded/bin/ruby -ropenssl -e &amp;quot;p OpenSSL::X509::DEFAULT_CERT_FILE&amp;quot; &amp;quot;/opt/sensu/embedded/ssl/cert.pem&amp;quot; $ $ ls /opt/sensu/embedded/ssl/cert.pem ls: cannot access /opt/sensu/embedded/ssl/cert.pem: No such file or directory $ $ wget -O /opt/sensu/embedded/ssl/cert.pem http://curl.haxx.se/ca/cacert.pem --2014-04-24 08:10:09-- http://curl.haxx.se/ca/cacert.pem Resolving curl.haxx.se... 80.67.6.50, 2a00:1a28:1200:9::2 Connecting to curl.haxx.se|80.67.6.50|:80... connected. HTTP request sent, awaiting response... 200 OK Length: 250283 (244K) Saving to: “/opt/sensu/embedded/ssl/cert.pem” 100%[============================================================================================================================================&amp;gt;] 250,283 253K/s in 1.0s 2014-04-24 08:10:11 (253 KB/s) - “/opt/sensu/embedded/ssl/cert.pem” saved [250283/250283] $ ls /opt/sensu/embedded/ssl/cert.pem /opt/sensu/embedded/ssl/cert.pem $  以上です。</description>
    </item>
    
    <item>
      <title>IRKitのファームウェアをアップデートしてWi-Fiに繋がるようになった</title>
      <link>https://blog.kenjiskywalker.org/2014/04/20/irkit-firmware-update/</link>
      <pubDate>Sun, 20 Apr 2014 00:05:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/04/20/irkit-firmware-update/</guid>
      <description>IRKitの初期ロットを利用していたので、モールス信号で
設定がとばせなくなっていたのでファームウェアのアップデートをした。
やり方はGitHubのページの通りに行えば問題ない。
https://github.com/irkit/device
ファームウェアをアップデートしても赤点滅から先に進まなくて
参ったなーと思ったのだが、Wi-FiのアクセスポイントにMZK-SA300Dを利用していて
こいつがたまにgの回線だけ見えなくなる場合があったので
アクセスポイントを再起動して、無事接続できた。
 AppleTV -&amp;gt; 古いREGZA -&amp;gt; JVCのTH-BC2
 という形式でリビングで音楽流したりしていて、
REGZAとTH-BC2をIRKitで操作できるようになった。
操作がiPhoneだけで完結するようになったので大変便利になった。</description>
    </item>
    
    <item>
      <title>第6回 ZABBIX-JP勉強会で発表してきた #zabbix_jp</title>
      <link>https://blog.kenjiskywalker.org/2014/04/12/zabbix_jp_6/</link>
      <pubDate>Sat, 12 Apr 2014 16:54:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/04/12/zabbix_jp_6/</guid>
      <description>@ike_daiさん、登壇できる機会を頂きありがとうございました。
発表資料  参考URL ZABBIXでメトリクス監視の話   ZABBIXでメトリクス監視の話  from kenjiskywalkerslide 
Zabbixでメトリクス監視する - kenjiskywalker&amp;rsquo;s diary http://kenjiskywalker.hatenablog.com/entry/20120510/1336623133
Zabbix::Senriganをつくりました - さよならインターネット http://blog.kenjiskywalker.org/blog/2013/10/17/senrigan/
Zabbix::Senriganをつくった話をします https://gist.github.com/kenjiskywalker/7703670
結構プルダウン地獄に対する共感があってみんなそうなのか〜って思いました。
しかし2.4ですべて解決しそうなのでいよいよ最強になりそうですね。
zenbutsuさんのSerfの話は今インフラ周りで流行っているイミュータブルやら
ディスポーザブルやらの監視においても優位に働くのではないでしょうか。
ZABBIX、やはり超古代兵器だ&amp;hellip; #zabbix_jp
&amp;mdash; kenjiskywalker (@kenjiskywalker) April 12, 2014 
2014年もメトリクス＋アラートの最高システムは
ZABBIXで決まりっぽいですね。</description>
    </item>
    
    <item>
      <title>flunetd、forward先がダメだった時にforward元である程度ログを担保したい</title>
      <link>https://blog.kenjiskywalker.org/2014/04/01/fluentd-buffer-forward/</link>
      <pubDate>Tue, 01 Apr 2014 13:18:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/04/01/fluentd-buffer-forward/</guid>
      <description>fluentdのbufferとforwardについて調べたのでメモ。
 fluentd v0.10.45
 追記( 04/02 00:27) @kenjiskywalker flushしようとしてできなかったbufferにもlimitまで溜まるから、1kbのbufferが128個で限界にはならないような気がしますが
&amp;mdash; fujiwara (@fujiwara) April 1, 2014 
@fujiwara 今手元で試したんですけどflush_interval関係なさそうですね。普通にflush_interval 1s buffer_chunk_limit 10とか指定してもそれ以上のbuffer保持してました
&amp;mdash; kenjiskywalker (@kenjiskywalker) April 1, 2014 
@tagomoris @fujiwara なるほど〜！
&amp;mdash; ブラッド・ピット (@kenjiskywalker) April 1, 2014 
とのことです。
こちらも参照してください。
fluentd の buffer あふれ改善議論 - togetter
flush_intervalはあくまでflushするだけであって
貯まる分は
buffer_chunk_limit x buffer_queue_limit
が影響する。ということですね。
update( 04/02 11:40 )
参考 fluentd - Buffer Plugin Overview
tagomorisのメモ置き場 - FluentdでバッファつきOutputPluginを使うときのデフォルト値
構成  各ホストから集約サーバへfowardしている 集約サーバはログを受け取ってゴニョゴニョしている  Buffer BasicBuffer</description>
    </item>
    
    <item>
      <title>VyattaでVPN(PPTP)の設定</title>
      <link>https://blog.kenjiskywalker.org/2014/03/29/vyatta-pptp/</link>
      <pubDate>Sat, 29 Mar 2014 18:01:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/29/vyatta-pptp/</guid>
      <description>iOS用にPPTPで接続できるようにしたら便利だったので
VyattaでVPN(PPTP)設定したメモ。
参考：Vyatta で構築する簡単 VPN サーバ
$ configure # set vpn pptp remote-access authentication local-users username ${USER} password ${PASSWORD} # set vpn pptp remote-access authentication mode local # set vpn pptp remote-access client-ip-pool start ${IP_START} # set vpn pptp remote-access client-ip-pool stop ${IP_END} # commit # save  以上です。市販のルータ使っていたらGUIで設定して
反映する為にはルータの再起動が必要です。1分待って下さいとか
なかなか渋いことになりますが、VyattaはCLIで設定すれば
再起動など必要なく即反映されます。最高のユーザ体験です。
もう市販のルータ使うことはないと思います。　</description>
    </item>
    
    <item>
      <title>Chefのruby_blockを利用してファイル更新時に条件によってログを出力する</title>
      <link>https://blog.kenjiskywalker.org/2014/03/28/chef-ruby-block/</link>
      <pubDate>Fri, 28 Mar 2014 01:59:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/28/chef-ruby-block/</guid>
      <description>Chefには冪等性という特徴がありますが、実際の運用では
ミドルウェアの設定の更新はしたいが、ミドルウェアの再起動までは
自分の手で確認したい。という条件もあるかと思います。
 設定ファイルは常に更新しても良い 設定ファイルが更新された時だけミドルウェアを起動したい 設定ファイルが更新された時にミドルウェアが起動済みであればログに出力  上記条件を満たすために実施した内容について共有します。
 chef/site-cookbooks/apache/recipes/default.rb  template &amp;quot;/etc/httpd/conf/httpd.conf&amp;quot; do source &amp;quot;httpd.conf.erb&amp;quot; owner &amp;quot;www&amp;quot; mode 0644 notifies :run, &amp;quot;ruby_block[warn]&amp;quot;, :immediately end ruby_block &amp;quot;warn&amp;quot; do block do # httpdが起動中であればログ出力 unless `pgrep httpd` == &amp;quot;&amp;quot; print &amp;lt;&amp;lt;&amp;quot;EOS&amp;quot; \e[33m=================================================================== recipe:apache apacheが起動中です。 新しい設定を反映させるためにはapahceを再起動してください。 ===================================================================\e[0m EOS end end action :nothing notifies :start, &amp;quot;service[httpd]&amp;quot; end service &amp;quot;httpd&amp;quot; do action :enable end   /etc/httpd/conf/httpd.conf が更新される notifies :run, &amp;quot;ruby_block[warn]&amp;quot;でruby_blockを実行 ruby_block内でミドルウェアが起動中かどうかRubyのコードで条件分岐 起動中であればログを出力 ruby_blockでnotifies :start, &amp;quot;service[httpd]&amp;quot;を実行、ミドルウェアの起動を行う  ruby_blockは実行順序が最後になるというChefの設計上、</description>
    </item>
    
    <item>
      <title>対象のディレクトリの拡張子一覧を取得する方法と便利コマンド少々</title>
      <link>https://blog.kenjiskywalker.org/2014/03/27/get-extension-list/</link>
      <pubDate>Thu, 27 Mar 2014 03:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/27/get-extension-list/</guid>
      <description>bashの奥は深い。
 ext-list.sh  #!/bin/bash dir=`pwd` list=`find ${dir} -type f -perm 755` # not = ! # list=`find ${dir} -type f ! -perm 755` for file in $list do filename=`basename $file` ext=${filename##*.} ext_list=(&amp;quot;${ext_list[@]}&amp;quot; ${ext}) done echo ${ext_list[@]} | tr &#39; &#39; &#39;\n&#39; | sort | uniq -c | sort -n  などというスクリプトを作成しておいて
確認したいディレクトリでそのスクリプトを叩けば取得できます。
/usr/local/Cellarで実行したら
[&#39;-&#39;]% sh /tmp/ext-list.sh | tail -n10 5 1 5 6 6 0 7 py 10 test 11 sh 16 pl 27 result 62 so 116 la [&#39;-&#39;]%  こんな感じの結果になりました。</description>
    </item>
    
    <item>
      <title>Immutable Infrastructure Conference #1 に参加してきた #immutableinfra</title>
      <link>https://blog.kenjiskywalker.org/2014/03/26/immutableinfra-1/</link>
      <pubDate>Wed, 26 Mar 2014 00:54:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/26/immutableinfra-1/</guid>
      <description>とてもおもしろかったです。ありがとうございました！
以下個人メモ
Chef  手順書の代わりにコードにする Communityモノは必要以上に汎用性を持たせて複雑化していたり
include_recipeなど必要以上に密結合していたりするので基本的に利用しない 複雑なコード、複雑な処理にならないようにする ShellScriptやSalt、Ansibleなどで問題が解決できるなら何でもいい  Golden Image  同じ環境のサーバが簡単にできる Golden Imageを常にゼロからつくれることが前提 Golden Imageに変更があればドキュメントを更新する？  サービスを最新の状態にする  pull？ rsync？ ミドルウェアの変更は手動？  機能毎のサーバの理想型  インスタンスが勿体無いという理由で複数の機能を持たせている 機能毎にインスタンスが分かれていれば疎結合で柔軟性を持たせることができる インスタンスに障害が発生した時に影響を最小限にしつつ、
容易に同じインスタンスが作成できる  2014年にも存在している問題  秘伝のタレ化したサーバ 更新されることのないサーバ構築手順書 何が動いているかわからないサーバ 担当者しかわからない構成 入り組んだシンボリックリンク 謎のパーミッション 誰も知らないプロセス  Immutable Infrastructureで解決できるか  サーバは最小限の機能だけを持たせる 機能が最小限なので何が動いているか理解しやすい サーバは最小限の機能だけを持つので
サーバに問題があった場合、少ない工数で新しいサーバを起動できる  課題  サーバの状態のバージョニング管理(Docker以外で) メトリクスデータの管理方法(Host毎ではなくRole毎に管理する方法の確立)
(@mirakuiさんとちょっと話したんですが、上手く動けばまたちゃんと書きます) 機能毎のサーバとは言うものの、サーバが増えれば管理コストが増えたり
費用が増えたりするので、そういうところに投資できる
一部の余裕のある企業だけが導入できる話であって基本的な企業では不可能なのでは  Immutable Infrastructure、海外だとNetflix社が圧倒的な感じでやっていて
他にもこんな話などちょくちょく見つかるけど、
まだまだ色々試されている段階だと思う。
個人的には、便利にする為の機械を扱う為に、1byteでも間違えると
サービスが落ちたりデータが損失したりするのは原始的だと思う。
本当なら影響の度合いによって、作業する前に祈りとか踊りとかする必要がある。
そうすることで作業自体の重要性を理解して、集中することができる。
しかし、現実はそんなことをしていたらサービスはどんどん腐っていく。
例えば靴のことを考えると、</description>
    </item>
    
    <item>
      <title>Instance Store-BackedのAMIをつくる</title>
      <link>https://blog.kenjiskywalker.org/2014/03/18/instance-store-backed-ami/</link>
      <pubDate>Tue, 18 Mar 2014 23:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/18/instance-store-backed-ami/</guid>
      <description>Creating an Instance Store-Backed Linux AMI
基本的にドキュメントに従って作業をすれば作成できます。
気を付けなければいけない点が何点かあったのでシェアさせて頂きます。
 ec2-api-tools 1.6.12.0
ec2-bundle-vol 1.4.0.9 20071010
ec2-upload-bundle 1.4.0.9 20071010
  AMIをつくる元のインスタンスにて  [ec2-user ~]$ mkdir /tmp/cert [ec2-user ~]$ cd /tmp/cert   手元からファイルを送る  $ scp -i my-private-key.pem /path/to/pk-HKZYKTAIG2ECMXYIBH3HXV4ZBEXAMPLE.pem \ ec2-user@ec2-203-0-113-25.compute-1.amazonaws.com:/tmp/cert/   image元となるデータを作成  ami-bundle-volに書いてある通り--no-filterを付けないと
所々ファイルが消えます。
[root ec2-user]# $EC2_AMITOOL_HOME/bin/ec2-bundle-vol --no-filter \ -k /tmp/cert/pk-HKZYKTAIG2ECMXYIBH3HXV4ZBEXAMPLE.pem \ -c /tmp/cert/cert-HKZYKTAIG2ECMXYIBH3HXV4ZBEXAMPLE.pem \ -u your_aws_account_id -r x86_64 -e /tmp/cert   S3にAMIの元となるデータをアップロードします  AMIを作成するregionと合わせないとエラーになります。
--regionではなく--location
[ec2-user ~]$ ec2-upload-bundle -b my-s3-bucket/bundle_folder/bundle_name \ -m /tmp/image.</description>
    </item>
    
    <item>
      <title>アリとキリギリス</title>
      <link>https://blog.kenjiskywalker.org/2014/03/16/ant-and-grasshopper/</link>
      <pubDate>Sun, 16 Mar 2014 16:33:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/16/ant-and-grasshopper/</guid>
      <description>たくさんのすごい話と、すごいことをしているすごい人たちと話す機会があって
アリとキリギリスについて考えることがあったので書いてみる。
きっかけは色々あった。常に高い、正しいモチベーションを
持ち合わせていたわけではない。
今でもそうだ、何事に対してもその中で頂点を取ろうとか
有名になりたいとか、そういう強い志を持ち合わせているわけではない。
選択の連続が、奇跡的に、高いモチベーションを持ち合わす人たちと
出会うことができた現在に繋がっている。
もちろん、ある地点では自分の限界を越えてやろうと挑戦したこともあった。
選択の連続が世界を生んだが、自分の手で何かを切り開いてきたことではない。
一歩を踏み出すチャンスはあった、しかし現実はそう簡単に選択できることはない。
覚悟を産むのは自信だ。自信を産むのは何だ？自信を産むものは行動だ。
先人たちは常に自分に挑戦し続けた人だ。アリはキリギリスを意識したことはない。
アリは常に最善を選択し、目標を持ち、その目標にチャレンジし続けてきた結果だ。
キリギリスの結末は飢えて死ぬことだ。当然の結果だ。
何もせずに何かを得ることはそう簡単なことではない。
私はキリギリスだ。私を特定できるものは何もない。
先人たちは常に未来を見せてくれる。先人たちは常にチャレンジした結果を
我々に教えてくれる。世界は常に開かれていると教えてくれる。
生まれた時から閉ざされた世界に生まれた人もいる。
環境が閉ざされた世界だ。
 人間は環境によって影響される、毎日が映画のような素晴らしい日々ではない。
目を背けたくなるような現実が今日も目の前にぶら下がっている。
先人たちは常にチャレンジをし続けてきたからあの世界があり、
これからもきっと辿り着くことはできないだろう。
キリギリスの結末は飢えて死ぬことだ。当然の結果だ。
自分の置かれた環境が、妥協の連続しかなかったんだ。
そういう人が周りにいたら気付けたのかもしれない。しかしもう遅い。
仕方ない結果だ。目を背けたくなるような現実が
今日も目の前にぶら下がっているからだ。
環境の違いだ。仕方ない。仕方のないことなんだ。
どこかのタイミングで気付けていれば、何か突き抜けたものがありさえすれば
今いる世界は違うだろう。
私もアリの世界にいたのかもしれない。しかし現実は違う。
始めるのが遅かったんだ。自分が置かれた環境が
妥協の連続を選択してきた人間しかいなかったんだ。仕方のない結果だ。
私はキリギリスだ。私を特定できるものは何もない。
キリギリスの結末は飢えて死ぬことだ。当然の結果だ。
キリギリスが動き出すのはアリが動くよりも大変なことだ。
妥協の連続に慣れきった身体が鉛のように身動きを妨げるから。
キリギリスが動き出すのはアリが動くよりも大変なことだ。
目標なんてものを持ったこともなければ、達成した経験もない。
環境さえ違えば、別の道があったのかもしれない。
私はキリギリスの中で生まれてキリギリスのように死んでいく。
力があれば、経験があれば、知識が、体験があれば。
人間はいつか死ぬ。キリギリスはアリにはなれない。
私はキリギリスだ。キリギリスの結末は飢えて死ぬことだ。
当然の結果だ。
言い分はわかった。キリギリスはアリにはなれない。
環境が悪かった。周りの人間が悪かった。そうだろう。
結局お前はキリギリスとして何も行動をせず、
困難を受け入れるわけでもなく、目の前の現実に目を背け
誰に喜ばれるわけでもなく死んでいくんだ。</description>
    </item>
    
    <item>
      <title>2014/02読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/03/15/201402-book/</link>
      <pubDate>Sat, 15 Mar 2014 21:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/15/201402-book/</guid>
      <description>基本にカエル英語の本 英文法入門 レベル1著者 : 石崎秀穂スリーエーネットワーク発売日 : 2007-07ブクログでレビューを見る» 基本にカエル英語の本 英文法入門 レベル2著者 : 石崎秀穂スリーエーネットワーク発売日 : 2007-09ブクログでレビューを見る» 基本にカエル英語の本 英文法入門 レベル3著者 : 石崎秀穂スリーエーネットワーク発売日 : 2007-10ブクログでレビューを見る» 私本太平記 01 あしかが帖著者 : 吉川英治発売日 : 2013-10-22ブクログでレビューを見る» </description>
    </item>
    
    <item>
      <title>はてなの東京オフィスに美味しいランチをたべさせてもらいに行ってきた</title>
      <link>https://blog.kenjiskywalker.org/2014/03/14/hatena-lunch/</link>
      <pubDate>Fri, 14 Mar 2014 00:41:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/14/hatena-lunch/</guid>
      <description>エントランスがスタイリッシュ
めちゃうま健康ランチ
経緯
@kenjiskywalker 是非どうぞ！
&amp;mdash; Shinji Tanaka (@stanaka) December 18, 2013 
stanakaさんにOKを頂いたのが去年の12月で
色々モジモジしたりしていて、行きたいな〜行ってもいいのかな〜
とモジモジしており、モジモジしてても仕方ない
連絡しよう！と思ったのが火曜日の夜で、京都には何人か知り合いの人がいるけど
東京オフィスはどの人を頼ったらいいんだ&amp;hellip;
と悩んだ挙句、お問い合わせフォームから連絡しました。
これが色々とお手数をおかけしてしまったらしく
気軽に誰かに声かけた方がよかったらしいので、これを読まれている識者の方々は
オフィスへ遊びに行くときはまず知り合いの人を頼って連絡しましょう。
id:tomomiiさんからご連絡頂き、木曜日のランチにお邪魔させて頂きました。
id:onishiさんにご対応頂いてしまって本当に申し訳なかったでした。
今週末行われる
 JAWS DAYS 2014Immutable Infrastructure Track
  のパネルディスカッションのモデレーターと、今月末に行われる超満員の
 Immutable Infrastructure Conference #1
  を開催される神様のid:stanakaさんもいらっしゃって、
サマリーメンバーもなかなかの緊張感を持ったお昼でした。
突然の訪問にも関わらず、カンバン方式での開発態勢や
デザイナーとエンジニアの仕事の進め方など色々お話しすることができて
ともて有り難かったです。
ご飯も健康的で美味しくて、最近毎日のように学食ばかり食べている我々にとっては
最高の昼食でありました。ごちそうさまでした。美味しかったです。
次にお伺いするときはもうちょっと余裕を持って遊びに行けるようにします。
お邪魔させて頂きありがとうございました。
はてなさんではiOSエンジニアを募集中とのことでした。
美味しいお昼ごはんが食べられるので
美味しいお昼ごはんが食べたい人は応募してみると良さそうです。</description>
    </item>
    
    <item>
      <title>Redisの2.8.2からsplit brainの対策がされているようです</title>
      <link>https://blog.kenjiskywalker.org/2014/03/12/redis-2-8-sentinel-split-brain/</link>
      <pubDate>Wed, 12 Mar 2014 01:46:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/12/redis-2-8-sentinel-split-brain/</guid>
      <description>2.8.2 [FIX] Sentinel better desynchronization to avoid split-brain elections https://github.com/antirez/redis/blob/2.8&amp;frasl;00-RELEASENOTES#L149
Sentinel: better time desynchronization. https://github.com/antirez/redis/commit/75347ada7f431925b97b037b56b5e3801e3fd16d
 Sentinels are now desynchronized in a better way changing the time handler frequency between 10 and 20 HZ. This way on average a desynchronization of 25 milliesconds is produced that should be larger enough compared to network latency, avoiding most split-brain condition during the vote.
Now that the clocks are desynchronized, to have larger random delays when performing operations can be easily achieved in the following way.</description>
    </item>
    
    <item>
      <title>禅、写経、茶の湯</title>
      <link>https://blog.kenjiskywalker.org/2014/03/01/zen-cha-hannya/</link>
      <pubDate>Sat, 01 Mar 2014 17:01:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/03/01/zen-cha-hannya/</guid>
      <description>テレビでお坊さんが、写経をすることで別世界へ行くことができる。
言葉を永遠と写すことで精神の深いところへたどり着ける。
という話をされていた。
禅と瞑想も同じで、今日気になっていた茶の湯の本読んでいたら
決められた動作を静かに正確に行うことによって、精神の深いところへたどり着ける。
って書いてあって、昔から市中の山居なんて言葉もあったことだし
当時の人もまた、色々と忙しかったり表層的な事象にやんや悩んだりしていたんだろう。
禅、写経、茶の湯、全部のルーツは心の再生というか
深いところまで潜っていく浄化作用というか、そういうものがあったのではないかと
ふと考えた。</description>
    </item>
    
    <item>
      <title>EC2のインスタンスが立ち上がってきた時にEphemeral Diskを束ねてRAID0にするスクリプト</title>
      <link>https://blog.kenjiskywalker.org/2014/02/24/ec2-start-raid0-script/</link>
      <pubDate>Mon, 24 Feb 2014 18:15:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/02/24/ec2-start-raid0-script/</guid>
      <description>Ephemeral Diskが8本ある場合は条件を増やせば良い。
#!/bin/bash PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin:/usr/local/bin if [[ \`test -e /dev/xvdc ; echo \$?\` -eq 0 ]] ; then if [[ \`test -e /dev/xvde ; echo \$?\` -eq 0 ]] ; then # RAID用のファイルをつくる(ephemeral x4バージョン) umount /media/ephemeral0 yes | mdadm --create /dev/md127 --level=0 --raid-devices=4 /dev/xvd[bcde] mkfs.ext4 /dev/md127 mount /dev/md127 /media/ephemeral0 else # RAID用のファイルをつくる(ephemeral x2バージョン) umount /media/ephemeral0 yes | mdadm --create /dev/md127 --level=0 --raid-devices=2 /dev/xvd[bc] mkfs.ext4 /dev/md127 mount /dev/md127 /media/ephemeral0 fi fi  このスクリプトをrc.</description>
    </item>
    
    <item>
      <title>/var/lock/subsys/について</title>
      <link>https://blog.kenjiskywalker.org/2014/02/24/var-lock-subsys/</link>
      <pubDate>Mon, 24 Feb 2014 17:49:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/02/24/var-lock-subsys/</guid>
      <description>init.dスクリプトの中に/var/lock/subsys/という文字列を見たことはあったが
何をしているのかまで追ったことはなかった。
 （今さら）Linuxでサービスを登録する - あしのあしあと
  こちらのページに大切なことは全て書いてあった。ありがたい。
「インスタンス起動時にRoute53でゴニョゴニョして、
インスタンス終了時にゴニョゴニョしたい」
という機能を実装するのに、init scriptを作成するのはよくあることだと思う。
その際、stopが上手く動かなく、その原因が/var/lock/subsys/であったので
備忘録として記録しておく。
 /etc/init/rc.conf  # rc - System V runlevel compatibility # # This task runs the old sysv-rc runlevel scripts. It # is usually started by the telinit compatibility wrapper. # # Do not edit this file directly. If you want to change the behaviour, # please create a file rc.override and put your changes there.</description>
    </item>
    
    <item>
      <title>2014/01読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/02/11/201401-book/</link>
      <pubDate>Tue, 11 Feb 2014 11:29:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/02/11/201401-book/</guid>
      <description>@nakashii_さんから借りた「宗教で読む戦国時代」が面白かった。
坊さんが演説する時に三千人ぐらい集まってたり、
普通の農民が宣教師と宗教論語ったりするというのがすごかった。
あと３回ぐらい読み直したい。
技術書読む為に中学生の英文法を勉強していることもあってなかなか吸収が少ない。
吸収が少ないとはいえ、キングダムが無茶苦茶面白かった。
宗教で読む戦国時代 (講談社選書メチエ)著者 : 神田千里講談社発売日 : 2010-02-10ブクログでレビューを見る» 一個人 (いっこじん) 2014年 02月号 [雑誌]著者 : ベストセラーズ発売日 : 2013-12-26ブクログでレビューを見る» キングダム 32 (ヤングジャンプコミックスDIGITAL)著者 : 原泰久集英社発売日 : 2013-10-18ブクログでレビューを見る» GIANT KILLING(30) (モーニングKC)著者 : ツジトモ講談社発売日 : 2014-01-23ブクログでレビューを見る» </description>
    </item>
    
    <item>
      <title>SMTPが何故嫌いか</title>
      <link>https://blog.kenjiskywalker.org/2014/02/05/about-smtp/</link>
      <pubDate>Wed, 05 Feb 2014 18:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/02/05/about-smtp/</guid>
      <description>雑談です。
 送り先を間違えると二度と取り戻せない(メールサーバを管理している場合を除く)
 そのSMTPのトラフィックの半分以上はスパム(Kaspersky Security Bulletin. Spam evolution 2013)   送り先を間違えると二度と取り戻せないのは、人間に対して厳しい仕様ではないのかなと。
万が一間違えた場合、インターネットは無力なことが多くて
該当のメールを削除してくださいと電話したり、メール誤送信についてのFAXを送ったりする。
インターネットでは物騒が当たり前なようですが、大半がSPAMのトラフィックを捌く方も大変ですね。
で、どうしたら良いって話なんですが
メールアドレスじゃなくてhash値生成してそこのURLへアクセスすると
メッセージが見れてやり取りができる。万が一内容を間違えた場合は
誤った内容のメッセージを削除して再生成する。とかが良いのかなと。
そしてそのURLをどうやって送るかっていうとSMT(この文章はここで終わっている)</description>
    </item>
    
    <item>
      <title>「ワールド・ウォーZ」と「ニュー・ジャック・シティ」見た</title>
      <link>https://blog.kenjiskywalker.org/2014/02/02/2014-02-movie/</link>
      <pubDate>Sun, 02 Feb 2014 23:18:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/02/02/2014-02-movie/</guid>
      <description>意外に面白かった。
 今の原宿にいる女の子の服装こんな感じだった。
なんだかんだでこのジャケットが一番おもしろいと思う。</description>
    </item>
    
    <item>
      <title>Ubuntu 13.10でOMRONのUPS BY35Sを使う</title>
      <link>https://blog.kenjiskywalker.org/2014/02/02/ups-omron-nut/</link>
      <pubDate>Sun, 02 Feb 2014 11:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/02/02/ups-omron-nut/</guid>
      <description>Ubuntu 13.04 nut 2.6.4-2.2ubuntu1
nut-client 2.6.4-2.2ubuntu1
nut-server 2.6.4-2.2ubuntu1
 OMRON の UPS BY35S を Linux と使う - 酒日記はてな支店
家のブレーカーがバシバシ落ちるのでfujiwaraさんおすすめのUPSを買った。
SSSを使いたかったけどDebian系はフォローしてなかったのでNetwork UPS Toolsを利用した。
設定参考 OMRON BY50SをUbuntu 11.04で使用する
Configuring NUT for the Eaton 3S UPS on Ubuntu Linux
作業内容  BY35Sの電源入れる BY35Sからサーバの電源を取る BY35SとサーバをUSBでつなぐ。  サーバにて # apt-get install nut  nut-clientとnut-serverがインストールされる。
$ lsusb | grep -i omron Bus 002 Device 006: ID 0590:0080 Omron Corp. $ $ lsusb -v -s 002:006 Bus 002 Device 006: ID 0590:0080 Omron Corp.</description>
    </item>
    
    <item>
      <title>retrobot</title>
      <link>https://blog.kenjiskywalker.org/2014/01/26/retro-bot/</link>
      <pubDate>Sun, 26 Jan 2014 03:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/26/retro-bot/</guid>
      <description>mirakuiさんの「1年前の自分と暮らす - 昼メシ物語 」
という記事を参考に@_kenjiskywalkerをつくりました。
retweet機能はオフにさせてもらってます。
去年の自分がPOSTしてるのSF感があって面白いですね。
マリオカートのゴースト以来の衝撃です。
mirakuiさんありがとうございます。</description>
    </item>
    
    <item>
      <title>境界線と争い</title>
      <link>https://blog.kenjiskywalker.org/2014/01/25/peace/</link>
      <pubDate>Sat, 25 Jan 2014 01:14:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/25/peace/</guid>
      <description>昨日、二郎インスパイア系と言われているラーメン家に行った。
繁盛店なので５人ぐらい並んでいた。
食券を買うと普通盛りですか？大盛りですか？と聞かれる。
野菜を多めにしてほしかったので麺少なめで。と答える。
自分の次に並んでいる人も同じように
普通盛りですか？大盛りですか？と聞かれる。
麺固めで。と答えていた。
質問と答えが合っていなかった。
順番が来て、食券をカウンターへ置き、麺固めで。と告げる。
遅いので無理です。食券買われた時にお願いします。と告げられる。
麺の量を聞かれた時に、麺の固さを答えなければならないシステムだ。
よくよく考えてみるとこのお店では
店員「にんにくのせますか？」
客「全部で」
店員「にんにくのせますか？」
客「あぶらあぶらカラアゲ」
店員「にんにくのせますか？」
客「野菜にんにくまし、あぶら、カラアゲ別皿で」
など質問と答えが全くあっていなかった。
すごい内輪ノリだ。
二郎系はそういうものだけどよくよく見てみると面白かった。
この内輪ノリに入れない、馴染めない、心地良いなど
立ち位置次第で様々な感覚が生まれるんだと思う。
一種の仲間意識みたいなものなのかもしれない。
そもそも内輪ノリとはなんだ？
内輪ノリ。境界線を生むもの？
境界線。内側と外側を生むもの。
争いが起こる時、問題の根源は内輪ノリが原因ではないのか。
家族、団体、宗教、国家。
規模は違えど衝突が起こる時、そこに内側と外側が存在する。
仲間か、仲間ではないか。
境界線の内側と外側とは何が違うのか。
本当にそこに境界線は必要だったのか。
建設的な競争ではない争いは、
大抵どこかの内輪ノリから始まっているような気がする。
宗教と国家が一番わかりやすい。
境界線の内側と外側とは何が違うのか。
本当にそこに境界線は必要だったのか。
君が引いたその境界線の向こう側から
一体何が見える？
 追伸
ラーメン家うまいのでまた行きたい
 </description>
    </item>
    
    <item>
      <title>おばあちゃんたちとエレベーター</title>
      <link>https://blog.kenjiskywalker.org/2014/01/14/grandma-elevator/</link>
      <pubDate>Tue, 14 Jan 2014 23:10:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/14/grandma-elevator/</guid>
      <description>この前、駅のエレベーターの前でおばあちゃん２人組が笑いながらここよここ〜
あんなこともあるのね〜、って笑いながら話してて
なんだろうって思って話し聞いてたら、初めてこの駅に来たんだけど
エレベーターがどこだかわからなくて、おじいちゃんが目の前を歩いていたので
きっとこのおじいちゃんもエレベーターに乗るだろうってついて行ったら、
ベンチに座っちゃった。って話だった。</description>
    </item>
    
    <item>
      <title>pvmoveを利用して物理ディスクのデータを別の物理ディスクへオンラインで移設する</title>
      <link>https://blog.kenjiskywalker.org/2014/01/11/lvm-pvmove/</link>
      <pubDate>Sat, 11 Jan 2014 13:31:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/11/lvm-pvmove/</guid>
      <description>AWSとLVMを利用することによって、オンラインで
EBSをアタッチして、pvmoveでデータを新しいEBSへ移行し
元のEBSを切り離すことができる。
参考 redhat カスタマーポータル - 6 5.4. 論理ボリュームからのディスクの削除
pvmoveは同一VG内の空きPVに移動するのか。ということは旧ディスクから新ディスクへの移行は 1.新ディスクをLVMフォーマットで作成して 2.新ディスクをPV化して 3.旧ディスクがアサインされいるVGにvgexendでPVを追加して 4.pvmoveか
&amp;mdash; kenjiskywalker (@kenjiskywalker) 2014, 1月 7 
pvremoveするときはVGにアサインされているからまずvgreduceで対象のPVを切り離してからpvremoveか。当たり前っちゃあ当たり前か
&amp;mdash; kenjiskywalker (@kenjiskywalker) 2014, 1月 7 
とのことです。
検証環境 - ルートパーティション /dev/xvda1 16GB - EBS /dev/xvdb 64GB EBS - RAID0用EBS /dev/xvdc 16GB EBS /dev/xvdd 16GB EBS /dev/xvde 16GB EBS /dev/xvdf 16GB EBS  xvdbに既存データが存在していており
そのデータをmd127に移設する。
[root@lvm-test-server ~]# [root@lvm-test-server ~]# fdisk -l Disk /dev/xvda1: 17.2 GB, 17179869184 bytes 255 heads, 63 sectors/track, 2088 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x00000000 Disk /dev/xvde: 17.</description>
    </item>
    
    <item>
      <title>LVM入門</title>
      <link>https://blog.kenjiskywalker.org/2014/01/11/intro-lvm/</link>
      <pubDate>Sat, 11 Jan 2014 11:39:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/11/intro-lvm/</guid>
      <description>LVMについては、きちんと学習したことがなかったので
今回改めて学習した内容をまとめました。
参考  redhat カスタマーポータル - Red Hat Enterprise Linux 6 論理ボリュームマネージャの管理 it-資格.jp - LPIC対策 Pantora Networks - 2章 LVM操作 基本編  わかりやすかったRedhat社のLVM解説図 取り敢えずざっくりと PV = 物理ディスク
VG = PVを束ねたもの。VGを利用して複数のディスクをまたいで利用できる
LV = VGの中から指定したディスクサイズを仮想ディスクとして利用できる
検証環境 - ルートパーティション /dev/xvda1 16GB - 元々存在していたと仮定するディスク /dev/xvdb 64GB EBS - RAID0用のディスク /dev/xvdc 16GB EBS /dev/xvdd 16GB EBS /dev/xvde 16GB EBS /dev/xvdf 16GB EBS  [root@lvm-test-server ~]# [root@lvm-test-server ~]# fdisk -l Disk /dev/xvda1: 17.2 GB, 17179869184 bytes 255 heads, 63 sectors/track, 2088 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x00000000 Disk /dev/xvde: 17.</description>
    </item>
    
    <item>
      <title>2013/12読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2014/01/07/201312-book/</link>
      <pubDate>Tue, 07 Jan 2014 22:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/07/201312-book/</guid>
      <description>進撃の巨人(12) (講談社コミックス)著者 : 諫山創講談社発売日 : 2013-12-09ブクログでレビューを見る» シークレット・レース (小学館文庫)著者 : タイラー・ハミルトン小学館発売日 : 2013-05-08ブクログでレビューを見る» 医者に殺されない47の心得 医療と薬を遠ざけて、元気に、長生きする方法著者 : 近藤誠アスコム発売日 : 2012-12-13ブクログでレビューを見る» アジャイル開発とスクラム 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント著者 : 平鍋健児翔泳社発売日 : 2013-01-18ブクログでレビューを見る» Working With TCP Sockets著者 : Jesse Storimer発売日 : 2012-10-24ブクログでレビューを見る» WorkingシリーズのSocketsがとてもよかった。
Socketsいまいち理解していないところあったけど手を動かして学習できてよかった。
Goで書きなおしたい。
アジャイル開発とスクラムは@hbstさんに頂いた書籍で
細かいことは「アジャイル開発とスクラム」をよんだに書いてある。
会社のみんなで回し読みさせて頂きます。ありがとうございます。
シークレット・レースはモリスさんとあんちぽさんのレビュー読んで
図書館で借りてみた。社会の厳しさが凝縮された感じだった。</description>
    </item>
    
    <item>
      <title>AWS CLIでスポットインスタンスリクエストを送る</title>
      <link>https://blog.kenjiskywalker.org/2014/01/07/aws-cli-request-spot-instances/</link>
      <pubDate>Tue, 07 Jan 2014 20:39:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/07/aws-cli-request-spot-instances/</guid>
      <description>日本語の情報があまりなかったので共有しておきます。
 aws cli 1.2.9
 参考  AWS CLI / request-spot-instances
基本のドキュメント。
 AWS CLI / run-instances
&amp;gt; &amp;ndash;user-data (blob)
&amp;gt;
&amp;gt; Specifies additional information to make available to the instance(s). This parameter must be passed as a Base64-encoded string.
  user-dataをbase64で送らなければいけないことはこちらに書いてあった。
 Launch Your Own NAT Instance in VPC - Indefinable Hacking
ヘンリーさんのやり方がとてもセンスがあった。ほぼヘンリーさんのやり方を踏襲した。   exp) spot_instance_request.sh HOST=$1 AMI=&amp;quot;AMI&amp;quot; INSTANCE_TYPE=&amp;quot;t1.micro&amp;quot; PRICE=&amp;quot;0.1&amp;quot; KEYPAIR=&amp;quot;KEYPAIR&amp;quot; AZ=&amp;quot;AZ&amp;quot; USER_DATA=`echo &amp;quot;${HOST}&amp;quot; | openssl enc -base64` REGION=&amp;quot;REGION&amp;quot; SECURITY_GROUPS=&amp;quot;\&amp;quot;default\&amp;quot;, \&amp;quot;image\&amp;quot;&amp;quot; ### jq check JQ_COMMAND=`which jq` if [ -z ${JQ_COMMAND} ]; then echo &amp;quot;jq command not found&amp;quot; exit 1 fi ### SET JSON rm -f /tmp/launch_config.</description>
    </item>
    
    <item>
      <title>CentOS 6.5でChefからSensuをインストールしようとするとRabbitMQでコケる回避策</title>
      <link>https://blog.kenjiskywalker.org/2014/01/05/sensu-centos6-4-erlang-install/</link>
      <pubDate>Sun, 05 Jan 2014 18:33:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/05/sensu-centos6-4-erlang-install/</guid>
      <description>date : 2014/01/05
OS : CentOS 6.5
Sensu : sensu-0.12.3-1.x86_64
sensu-chef : 0.8.0
 === (2014/01/06)追記 =======================
@kenjiskywalker CentOS 6.4 → 6.5 にしたら出なくなった･･･うーむ
&amp;mdash; Naoya Ito (@naoya_ito) January 6, 2014 
ドラクエ氏によると、この解決策だと6.4は別のエラーがでるとのこと。
================================
@kenjiskywalker centos?
&amp;mdash; Naoya Ito (@naoya_ito) January 5, 2014 
@kenjiskywalker CentOS 6.4 の openssl のビルド設定が変わってて Erlang が crypto モジュールを読むところで落ちるです
&amp;mdash; Naoya Ito (@naoya_ito) January 5, 2014 
@naoya_ito まさにこれですw どうにかできないかやってみます
&amp;mdash; kenjiskywalker (@kenjiskywalker) January 5, 2014</description>
    </item>
    
    <item>
      <title>2013年の振り返り</title>
      <link>https://blog.kenjiskywalker.org/2014/01/03/2013/</link>
      <pubDate>Fri, 03 Jan 2014 11:58:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/03/2013/</guid>
      <description>去年の振り返り
発表したこと #qpstudyと仏教とわたし
mizzyさんと初めてガッツリ話すことができた。貴重な体験だった。
その後、カヤックの勉強会でhsbtさん、kentaroさんともお会いすることができて
本当に貴重だった。
#monitoringcasual Vol3 に参加してきました
fluentdのプラグインを2つつくったので発表してきた。
PerlCasual #5に参加してLTしてきた #perlcasual
yusukebe氏にお声がけ頂き発表してきた。
もうちょっと技術寄りの内容を話したかった。まだまだだ。
Chiba.pm #2に参加してきた #chibapm
愛するChiba.pmへの初参加だった。とても温かいバイブスが流れていた。
モズ君のエモいLTが見れてすごい！ってなってた。また参加したい。
#mysqlcasual vol.4 でカジュアルに発表してきました
myfinder氏にお声がけ頂き発表してきた。
会場で一番MySQLのこと知らない感じだった。まだまだだ。
Service on AWS #jawsug yokohama
kuwa_tw氏とtmae氏にお声がけ頂き発表してきた。
いまいち刺さらなかった感じがするのでもうちょっと発表の仕方を考えた方がいいと感じた。
Monitoring Casual Talk in Kyoto 行ってきた #monitoringcasual
京都最高だった。shiba_yu36君の家に泊まらせてもらってありがたかった。
布団がきちんと入らなかったの本当に申し訳なかった。
Fluentd Casual Talks #3 でChefの話をしてきました #fluentdcasual
fluentdが太ってきた時にどうしたか、みたいなハウツー共有したくて発表してきた。
20分ぐらいかかる内容を5分で話すのむずかしかった。
話し方についてもう少し工夫をする必要があるなって思った。
発表するの、今でも緊張するけどそれでもやっぱり場数踏めばそこそこ慣れてくるもので
2013年も発表するのでいっぱいいっぱいだったけど、2014年はもう少しゆっくり話せるようにしたい。
去年のブログ一覧 http://blog.kenjiskywalker.org/blog/archives/
AWS元年だった。やったことのないことをやらせて下さいって言って
やらせてもらえたから色々学べた。本当にありがたい限りだった。
やらせてもらえて学んだことはなるべくアウトプットしていった。
AWS費用試算例
計算方法とかちゃんと理解していなかったのでこのエントリーを書くことで理解が深まった。
t1.microを利用していても転送量で金額がいかようにもなることが頭で理解できた。
ChefとZabbixはだいぶ手に馴染むようになった。
細かいtipsなんかもちょくちょくアウトプットできた。
オペミスし易い自分としては、オペミスが起こってもなるべく影響がない状態に持っていければ問題がなくて、若田光一さんがインタビューで「ミスは必ず起こる、そのミスをいかに最小限の影響で終わらすのが大切だ」という話をしていて
2014年はまさにそこに注力していきたいと考えている。
設定のミスなどの気付きについてはserverspecを利用するのが最高だ。感動した流れでpull-reqした。
https://github.com/serverspec/serverspec/pull/63
https://github.com/serverspec/serverspec/pull/64
きっと時間が経つにつれてどんどん恥ずかしくなっていくpull-reqだと思う。
エレガントなpull-reqを送れるように精進していこう。</description>
    </item>
    
    <item>
      <title>あけましておめでとうございます</title>
      <link>https://blog.kenjiskywalker.org/2014/01/01/2014/</link>
      <pubDate>Wed, 01 Jan 2014 02:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2014/01/01/2014/</guid>
      <description>今年もよろしくお願いします。</description>
    </item>
    
    <item>
      <title>「Working With TCP Sockets」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/12/31/working-with-tcp-socket/</link>
      <pubDate>Tue, 31 Dec 2013 06:34:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/31/working-with-tcp-socket/</guid>
      <description>Working With TCP Sockets著者 : Jesse Storimer発売日 : 2012-10-24ブクログでレビューを見る» 大切なことはここにすべて載っています。
Working With TCP Socketsを読んだ - $shibayu36-&amp;gt;blog;
これも読みました。
電子書籍「irbから学ぶRubyの並列処理 ~ forkからWebSocketまで」EPUB版をGumroadから出版しました！
100円で完結にまとめられていて最高でした。
コード参考
EventMachine: scalable non-blocking i/o in ruby
send(2)のマニュアルページ
http://linuxjm.sourceforge.jp/html/LDP_man-pages/man2/sendmsg.2.html
ソケットの流れ   socket(2) ソケットの生成 bind(2) ソケットとポートの結合 listen(2) 接続キューの作成(サーバ) accept(2) 接続受け入れ(サーバ) send(2), write(2) パケット送信 recv(2), read(2) パケット受信 close ソケットの終了   基礎について改めて勉強になった。accept_loop便利だった。
IO.selectの部分はepollとかkqueueでやってるんじゃないのかな。
EventMachineどうなってるんだろう。って思って調べたら
 ext/project.h   #ifdef HAVE_EPOLL #include  #endif #ifdef HAVE_KQUEUE #include  #include  #endif #ifdef HAVE_INOTIFY #include  #endif  ってやってた。</description>
    </item>
    
    <item>
      <title>「アジャイル開発とスクラム」をよんだ</title>
      <link>https://blog.kenjiskywalker.org/2013/12/29/agile-and-scram/</link>
      <pubDate>Sun, 29 Dec 2013 03:32:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/29/agile-and-scram/</guid>
      <description>@hsbtさんから頂戴した本書、大変よかったです。
ありがとうございます！
アジャイル開発とスクラム 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント著者 : 平鍋健児翔泳社発売日 : 2013-01-18ブクログでレビューを見る» 実は、１年前ぐらいにアジャイルサムライを読んけどそんなにしっくりこなかった。
本書は
 アジャイル開発とは何か、スクラムとは何か アジャイル開発とスクラムを実践する アジャイル開発とスクラムを考える  という三部構成で、第一部でアジャイルとスクラムについてのわかりやすい解説があり、
第二部で実際に導入した事例の紹介と中の人の体験談を学び、
最後に歴史と、もう少し踏み込んだ話になっていて、大変わかりやすい内容だった。
前職では、３人でサーバサイドのインフラ部分の作業を分担していて、
他の部署の人たちがアジャイル開発を実践しているのを遠くで眺めていたレベルだった。
３人で特定の作業を行うだけであればとくにそういうことも必要なかったし
自主的に仕事を見つけては共有していたので問題はそんなになかった。
コミュニケーションも隣りの席にいてもなるべくIRCを利用し、
コミュニケーションのログに残すようにしていたので、
コミュニケーションロスはそんなになかった。疑問があったらすぐ相談していたのも
多分よかったのだと思う。
一方、現在は組織自体もできてそんなに時間が経っていない、
スタートアップなので組織うんぬんよりも、アプリケーションの新機能に
業務時間を費やしてきたパターンという印象だ。
自分が入社して１ヶ月ぐらい経つが、他の人が何をやっているのかわかっていない。
１週間の進捗確認はあるが、おおよそ１時間で誰が何をやっているのかの詳細をつかむことは
相当難しいと思う。そしてスタートアップ関係なしで
そういう組織は多いんじゃないかと思っている。
では、そのように誰が何をやっているのかいまいち共有されていない組織すべてが
本書を参考に全面的にアジャイルを導入すべく
コミュニケーションを取っていくかと考えるとそれは違うと思う。
自分の状況に当てはめると、スクラムマスターと
プロダクトオーナーを置いて、スプリントを決めてガッツリと組織立てて行うことは
あまりにも変化が大きすぎるからそのコストだけでも大変だ。というのが第一の理由で、
第二の理由は、そのようなことに時間を割いている余裕がないことである。
後者の理由については、スタートアップだから。という理由で御座なりにしていくと
後々大変なことになるのは経験上目に見えているので
&amp;gt; プロダクトと組織が大きくなる一方、
&amp;gt; プロダクトと組織を構成する仕組みや運用が脆弱なまま進んでいく危険
早めのうちに対応しておくべきだ。その点で、本書に掲載されているいくつかの施策は
試すに値するものがあると感じた。(自分で感じてもみんなが感じなければあんまり意味ない。)
なにはともあれ、各個人が自分の与えられた作業を遂行するのではなく
全員が集まって、課題に対してワイワイしながら
 課題に対する作業 自発的に誰が何をやるのか 誰が何の作業でどう困っているのか どういう進捗なのか 課題はなにか。
 失敗はあったか 失敗をどう克服したら良いのか  などなど、各個人やグループで完結するのではなく、チーム全員で共有し
邁進していくことが最高なんだ。という当たり前のことを改めて学べたので、
相談しながらどうしていくかみんなで考えたい。
考えたい。というか、みんなでどうやって進めていくのがいいのか
話し合ってやってみるところからが本当のスタートだと思う。
その上で2014年、本書は最高の課題図書になる。
ホワイトボード使ってかんばんやってみるのがいいのかな。
あわせてよみたい WEB+DB PRESS Vol.</description>
    </item>
    
    <item>
      <title>「ゼロ・グラビティ」をみた</title>
      <link>https://blog.kenjiskywalker.org/2013/12/29/gravity/</link>
      <pubDate>Sun, 29 Dec 2013 03:25:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/29/gravity/</guid>
      <description>http://wwws.warnerbros.co.jp/gravity/
IMAX 3Dで見た方が良いって言われたので見てきた。
アバターを見てから、3Dは残念感があって今回も飛び出す絵本だろうなって思っていた。
全くの見当違いだった。本当に宇宙に行ってきた感覚だった。
映画館でしか体験できないので是非体験してもらいたい。
座席は前から３、４列目をおすすめします。
視野全体がIMAXのスクリーンに覆われるぐらいがちょうどいい。
久々にエンドロール流れて３分ぐらい身動き取れなかった。</description>
    </item>
    
    <item>
      <title>本日の帷子川情報です</title>
      <link>https://blog.kenjiskywalker.org/2013/12/23/katabira-river/</link>
      <pubDate>Mon, 23 Dec 2013 12:50:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/23/katabira-river/</guid>
      <description>この記事は MySQL Casual Advent Calendar 2013 の 23 日目です。
業務でMySQLを使っていない場合、なかなか深い知見というものを得られないとは思います。
今回は常日頃自分が気になっていることをメモしておき、
データとして利用する一例を記します。
横浜駅から横浜三井ビルディングへ向かうと、途中で築地橋という橋を渡ります。
その築地橋の下には帷子川が流れ、目の前の相模湾へと続いているのですが
毎日見てみると、丁度築地橋の付近で陸地から海へと流れるはずの川の流れが
たまに逆流していることがあるのに気付きました。
帷子川の源流までってどうなってるの？ - はまれぽ.com
これは面白いなと思い、通る度にTwitterへメモを残すようにしていました。
今回はそのデータを利用し、何か面白い情報が得られないか確認してみようと思います。
本来であれば、天候、風、気温などの複合的情報があって
精度の高いデータとして利用できるのですが、
川を見てメモをする以上の作業を増やしたくなかったので
今回は行いませんでした。
まず、tweets.zipをMySQLに入れる作業ですが、以前メモをした内容の通りに行います。
メモ記載当時だとtweets.csvのフォーマットが
&amp;quot;tweet_id&amp;quot;, &amp;quot;in_reply_to_status_id&amp;quot;, &amp;quot;in_reply_to_user_id&amp;quot;, &amp;quot;retweeted_status_id&amp;quot;, &amp;quot;retweeted_status_user_id&amp;quot;, &amp;quot;timestamp&amp;quot;, &amp;quot;source&amp;quot;, &amp;quot;text&amp;quot;, &amp;quot;expanded_urls&amp;quot;  という並びだったのですが、現在は
&amp;quot;tweet_id&amp;quot;, &amp;quot;in_reply_to_status_id&amp;quot;, &amp;quot;in_reply_to_user_id&amp;quot;, &amp;quot;timestamp&amp;quot;, &amp;quot;source&amp;quot;, &amp;quot;text&amp;quot;, &amp;quot;retweeted_status_id&amp;quot;, &amp;quot;retweeted_status_user_id&amp;quot;, &amp;quot;retweeted_status_timestamp&amp;quot;, &amp;quot;expanded_urls&amp;quot;  という並びに変更になっています(2013/12/23現在)。
新しくretweeted_status_user_id,retweeted_status_timestampという
２つのステータスが取得できりるようになっています。
テーブルも新しい仕様に変更します。
CREATE TABLE tweets ( `id` INT UNSIGNED NOT NULL AUTO_INCREMENT, `tweet_id` BIGINT UNSIGNED, `in_reply_to_status_id` BIGINT UNSIGNED, `in_reply_to_user_id` BIGINT UNSIGNED, `timestamp` TIMESTAMP DEFAULT 0, `source` VARCHAR(255), `text` VARCHAR(140), `retweeted_status_id` BIGINT UNSIGNED, `retweeted_status_user_id` BIGINT UNSIGNED, `retweeted_status_timestamp` BIGINT UNSIGNED, `expanded_urls` VARCHAR(255), PRIMARY KEY (id) ) ENGINE = InnoDB DEFAULT CHARACTER SET utf8;  データをインサートします。</description>
    </item>
    
    <item>
      <title>「ロンドン起業日記」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/12/22/london/</link>
      <pubDate>Sun, 22 Dec 2013 16:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/22/london/</guid>
      <description>ロンドン起業日記　ヨーロッパで絶賛、奮闘中！【電子書籍】井上真
達人出版会
発行日: 2013-12-09
対応フォーマット: PDF, EPUB
詳細を見る ロンドン起業日記 を読んだ - HsbtDiary
@hsbtさんが読んでいたので読んでみた。
成功した話とかあまり教訓にならなくて、鮮度の高い体験談の方が
よっぽど得るものがあると思う。
 記されているその行いよりも、事前に存在したバックグラウンドが大切なのに
さもその行いだけで成功した文脈のものが多い。という意味で
 とくに本書はまだプロダクトをつくりあげていく途中の生の情報がたくさんあって
ゴールした後に整備された話ではなく、今走り続けている人の話なので
@makoto_inoueさんのお話を直接聞いているような熱量があってすぐに読み終わった。
blogのmakotoiの日記:from Londonも面白い。
昔、社会起業家みたいなの考えてた時期があった。
あの時は熱量だけで進んでいって、途中で全部投げ出してしまった。
あの頃は自分で何もかもやろうとしていた。若さ故のなんとかだった。
今ならもう少しうまくやれるかもしれない。もう少し人の役に立てるかもしれない。
など、読む人によって色々感じるものがあるのではないかと思います。
鮮度と熱量があって、大変良かったです。
お母さんからのメールに、新聞から抜粋した
 嘘をつかない
人に親切にする
ルールを守る
勉強をする
 この４つのしつけの話に背筋が伸びる思いでした。
お母さんのメールが書籍化されたらそちらも読みたいです。</description>
    </item>
    
    <item>
      <title>Fluentd Casual Talks #3 でChefの話をしてきました #fluentdcasual</title>
      <link>https://blog.kenjiskywalker.org/2013/12/14/fluentd-casual-3/</link>
      <pubDate>Sat, 14 Dec 2013 01:46:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/14/fluentd-casual-3/</guid>
      <description>Fluentd Casual Talks #3 で話してきました 会場をご提供頂いたDeNAさん、主催者の@tagomorisさん、ありがとうございました。
スライドはこちらです。
 設定が増えてくるとtd-agent.conf自体が肥えてきます。
その場合、include config.d/hoge.confというように
機能別に設定ファイルを分けることで、人間が管理できるようになります。
設定ファイルについては、必要な設定だけを人間が行って
ファイルの設置などについては、Chefに行ってもらうのが良いです。
Chefの設定方法についてはスライドを見てもらうとなんとなくわかるかなと思います。
ポイントはinclude_recipeを利用して、Chefのrecipe自体も分割するところです。
 chef/site-cookbook/td-agent/recipes/td-agent.conf  &amp;lt;source&amp;gt; type forward port 24224 &amp;lt;/source&amp;gt; include config.d/nginx.conf &amp;lt;match **&amp;gt; type file path /tmp/unmatched &amp;lt;/match&amp;gt;   chef/site-cookbook/td-agent/recipes/nginx.conf  template &amp;quot;/etc/td-agent/config.d/nginx.conf&amp;quot; do owner &amp;quot;root&amp;quot; mode 0644 source &amp;quot;nginx.conf.erb&amp;quot; end   chef/site-cookbooks/td-agent/templates/default/nginx.conf.erb  &amp;lt;match nginx.access.**&amp;gt; type copy &amp;lt;store&amp;gt; type file_alternative time_slice_format %Y%m%d-%H path /var/log/aggregated/nginx/access output_data_type attr:message localtime output_include_time false &amp;lt;/store&amp;gt; &amp;lt;/match&amp;gt; .</description>
    </item>
    
    <item>
      <title>2013/11読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2013/12/11/201311-book/</link>
      <pubDate>Wed, 11 Dec 2013 01:20:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/11/201311-book/</guid>
      <description>イーサネットスイッチ著者 : O&#39;Reilly Japan発売日 : 2013-10-24ブクログでレビューを見る» メタプログラミングRuby著者 : Paolo Perrottaアスキー・メディアワークス発売日 : 2010-08-28ブクログでレビューを見る» Eloquent Ruby (Addison-Wesley Professional Ruby Series)著者 : Russ OlsenAddison-Wesley Professional発売日 : 2011-02-07ブクログでレビューを見る» 仕事と幸福、そして人生について著者 : ジョシュア・ハルバースタムディスカヴァー・トゥエンティワン発売日 : 2009-02-18ブクログでレビューを見る» ワーク・シフト ― 孤独と貧困から自由になる働き方の未来図〈2025〉著者 : リンダ・グラットンプレジデント社発売日 : 2012-07-28ブクログでレビューを見る» 詳細! Objective-C iPhoneアプリ開発 入門ノート Xcode5+iOS7対応著者 : 大重美幸ソーテック社発売日 : 2013-11-02ブクログでレビューを見る» 坂本ですが? 1 (ビームコミックス)著者 : 佐野菜見エンターブレイン発売日 : 2013-01-15ブクログでレビューを見る» Rubyの2冊は何回でも読みたい本だ。
プログラミング、未だにわからないことだからけだけど
個人的なウェッブサービスやるやるって言って1年ぐらい経ってる。
アイデアはあるのでちゃんとやっていきたい。
Objective-Cの本はUI周りがほとんどでなんとなく違った感じだった。
Objective-Cはオフィシャルのドキュメントとか充実してるので
それを見てやれば良さそう。
転職前の１週間ずっと体調悪くて最低だった。
2014年は技術力の向上と合わせて健康力も上げていきたい。</description>
    </item>
    
    <item>
      <title>「利休にたずねよ」を見てきた</title>
      <link>https://blog.kenjiskywalker.org/2013/12/10/riq/</link>
      <pubDate>Tue, 10 Dec 2013 10:08:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/10/riq/</guid>
      <description>http://www.rikyu-movie.jp/
本物の黒茶碗が使われるのと、利休の異常さが見れそうだったので見てきました。
オープニングの10分ぐらいで利休の異常さに気付くと思います。
先週末、京都に行ったついでに利休追悼ツアーで大徳寺と北野天満宮に行ったので
よりリアルに感じることができました。
利休の異常さ、朝顔の話が有名だけど人間そぎ落としていくと最高の美が見つかるっていうのは
よくある話だし、それに関してはつきつめていくのが正しいと思います。
昔の人も色々とせわしなくて、市中の山居という概念が必要とされていたし
それはいつの時代も変わらないのかなとも思います。
弟子の織部も異常で、その異常さを面白く読めるへうげものはおすすめです。</description>
    </item>
    
    <item>
      <title>supervisorでログのディレクトリをSIGUSR2を使って開き直す</title>
      <link>https://blog.kenjiskywalker.org/2013/12/04/supervisor-sigusr2-reopen-logdir/</link>
      <pubDate>Wed, 04 Dec 2013 20:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/04/supervisor-sigusr2-reopen-logdir/</guid>
      <description>supervisorをインストール  $ sudo yum -y install python-setuptools $ sudo easy_install supervisor $ echo_supervisord_conf &amp;gt; /etc/supervisord.conf   テストスクリプト(/root/while.sh)を置く  #!/bin/bash while true ; do date ; sleep 1 ; done   /etc/supervisord.conf  [unix_http_server] file=/tmp/supervisor.sock ; (the path to the socket file) [supervisord] logfile=/var/log/supervisord.log ; (main log file;default $CWD/supervisord.log) logfile_maxbytes=50MB ; (max main logfile bytes b4 rotation;default 50MB) logfile_backups=10 ; (num of main logfile rotation backups;default 10) loglevel=info ; (log level;default info; others: debug,warn,trace) pidfile=/tmp/supervisord.</description>
    </item>
    
    <item>
      <title>Chefのnode[:hoge]をどうにかしたい</title>
      <link>https://blog.kenjiskywalker.org/2013/12/04/chef-merge-deep/</link>
      <pubDate>Wed, 04 Dec 2013 14:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/04/chef-merge-deep/</guid>
      <description>2013年オワコンの代表格として名指しされているChefですが
nodes/hoge.jsonで与えられたnode[:hoge]の値を
roles/role.jsonで値を追加したい場合があります。
そのやり方として、オフィシャルにはディープマージという方法が載っていました。
http://docs.opscode.com/essentials_node_object_deep_merge.html
 nodes/hoge.json
{ &amp;quot;run_list&amp;quot;: [ &amp;quot;role[role_one]&amp;quot; ] }  roles/role_one.json
{ &amp;quot;name&amp;quot;: &amp;quot;role_one&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;role one&amp;quot;, &amp;quot;json_class&amp;quot;: &amp;quot;Chef::Role&amp;quot;, &amp;quot;override_attributes&amp;quot;: { &amp;quot;hoge&amp;quot;: [ &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; ] }, &amp;quot;default_attributes&amp;quot;: { }, &amp;quot;chef_type&amp;quot;: &amp;quot;role&amp;quot;, &amp;quot;run_list&amp;quot;: [ &amp;quot;role[role_two]&amp;quot; ] }  roles/role_two.json
{ &amp;quot;name&amp;quot;: &amp;quot;role_two&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;role two&amp;quot;, &amp;quot;json_class&amp;quot;: &amp;quot;Chef::Role&amp;quot;, &amp;quot;override_attributes&amp;quot;: { &amp;quot;hoge&amp;quot;: [ &amp;quot;baz&amp;quot; ] }, &amp;quot;default_attributes&amp;quot;: { }, &amp;quot;chef_type&amp;quot;: &amp;quot;role&amp;quot;, &amp;quot;run_list&amp;quot;: [ &amp;quot;recipe[hoge_recipe]&amp;quot; ] }  cookbooks/hoge_recipe/recipe/default.rb</description>
    </item>
    
    <item>
      <title>Sumallyに入りました</title>
      <link>https://blog.kenjiskywalker.org/2013/12/02/sumally/</link>
      <pubDate>Mon, 02 Dec 2013 22:50:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/02/sumally/</guid>
      <description>人数の少ないスタートアップに参加して、
お金持ちになる夢を一度ぐらい見てみたいものだ。
サーバサイドだけどプロダクトにガッツリコミットして
みんなでワイワイやってみたいものだ。
という気持ちを持ってSumallyに入りました。
カヤックというエンジニア天国から身一つでどこまでできるかやってみます。
似たようなサービスが色々とありますが
できることをやっていこうと思うので、これからの活躍楽しみにしていてください。
また、Sumallyのここがイケてない、ここを良くした方がいい。
などご意見があれば気軽にお聞かせください。
頂いたご意見については、必ずメンバーで話し合います。よろしくお願いします。
=== 広告 ============================================
Sumallyとカヤックでは広く人材を募集しております。
気になる方は話を聞いてみるぐらいの感覚で連絡してみるとよいのではないでしょうか。
=====================================================
恥ずかしながら、末尾にウィッシュリストを掲載させて頂きます。
http://www.amazon.co.jp/registry/wishlist/2YLD8BNL4W5NT
貢献と年収。</description>
    </item>
    
    <item>
      <title>Monitoring Casual Talk in Kyoto 行ってきた #monitoringcasual</title>
      <link>https://blog.kenjiskywalker.org/2013/12/01/monitoringcasual-kyoto/</link>
      <pubDate>Sun, 01 Dec 2013 18:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/12/01/monitoringcasual-kyoto/</guid>
      <description>Monitoring Casual Talk in Kyotoへ参加してきました。
Zabbix::Senriganを成仏させるために発表の機会を求めていたら、
モニカジが京都で開催されるとのことだったので
夜行バスや新幹線などの費用を調べて、京都へ旅行へ行ってきました。
参加できたのも、@shiba_yu36君がお家に宿泊させてくれたからでした。
紅葉シーズンど真ん中でどこも空いていなかったので助かりました。
ありがとうございました！
また、京都に行くきっかけをつくってくれた@shoichimasuharaさん
ありがとうございました！おつかれさまでした！
発表、デモサーバとZabbixサーバを立ててる自宅サーバにつながらなくて
カミさんに連絡したら、ブレーカー落としちゃったって聞いて大変でした。
こういうこともあるのだなと、バックアップ体制について考えなおすきっかけになりました。
まともに発表できないのなら、せめて京都繋がりで有意義な発表をすべく
私の大好きな応仁の乱の話でもしようかと考えたのですが
40分ぐらいかかるようだったので、みなさんに聞きたいですか？と確認し
誰ひとり手を挙げてくれなかったので、普通にみんなのイメージに委ねながら発表をしました。
発表内容
完結に書くと、何かツールを使っていて
そのツールがイケていないなら自分で何かつくってフォローしようという話でした。
もちろんそのツールがプラガブルならどんどん組み込めばいいし
フォローツールのせいで管理するソフトウェアが多くなってくるなら
もともと利用しているソフトウェアを見直すべきです。
というように、状況も厳しく、内容も軽めだったのに
全体的にDocker、Sensu、Immutable Infrastructureなど
ウェブサービスのミドルウェア構成管理のモダンな話が多く
2014年を迎えるにあたっての技術者としての姿勢を正さなければならない状態でした。
関西で気軽に勉強会に参加すると返り討ちにあう可能性が高いです。
関東各位は気を引き締めて参加されたし。
会場ははてな社だったのですが、無限にビールが出てきて最高の勉強会環境でした。
近くの席に@hitode909っていう人がいていよいよ無限にビール出てくる状況でした。
飲み会、挙動不審の若者がいて、何やってるんですか？って聞いたら
鹿児島出身の大学生で広島の大学に通っていて、京都に旅行へ来ていて
調べたら宿泊しているホテルの隣りのビルがはてな社だったので
遊びに行ってみたら勉強会していたので参加した。みたいなこと言っていて
&amp;ldquo;持ってる&amp;rdquo;青年でした。はてなのサービスには興味がないって言って
ずっともりすさんにLINEのサービスのこと熱心に聞いてて面白かったです。
そういえば、帰り際に興味深い体験がありました。
新幹線までの時間、鴨川で遊んでいると、川沿いにある長屋が目に飛び込んできて
長屋、火事になると隣家が燃えて大変になる。そこで編み出されたのが
長屋を壊しやすくして、火事になればすぐに取り壊して建て替えるシステムだったな。
はて、これはもしやImmutable Infrastructureではないのか。
不要になったものを取り壊し、新しくつくりなおす。
まさにImmutable Infrastructureでした。
我々日本人は、ちょんまげの頃に既に
Immutable Infrastructureの概念を取り入れていたのです。
まるで新しい概念のように受け入れていたimmutable infrastructureは
車輪の再発明にすぎなかったことに、おろどきを隠せませんでした。
Blue-Green Developmentも式年遷宮の再発明なので、いい加減我々は
インターネットからもう少し視野を広げて物事を考えなければ
ならないのではないかと実感した京都旅行でした。
このように学びを得るために毎年京都に来たいです。
ありがとうございました。</description>
    </item>
    
    <item>
      <title>「ワーク・シフト 孤独と貧困から自由になる働き方の未来図&lt;2025&gt;」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/11/29/work-shift/</link>
      <pubDate>Fri, 29 Nov 2013 04:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/29/work-shift/</guid>
      <description>何故これを借りたのか全く覚えてなくて、
流し読み程度で読んでいたのですが大変興味深い書籍でした。
将来の自分の社会との関わり方に疑問を抱いていたので
今後の物事の指標を置くための補助としての情報として、役立てられればと想います。
ワーク・シフト ― 孤独と貧困から自由になる働き方の未来図〈2025〉著者 : リンダ・グラットンプレジデント社発売日 : 2012-07-28ブクログでレビューを見る» 訳者あとがきの一節が大変すばらしくまとまっていましたので
備忘録の為に抜粋させて頂きます。
 略) 私たちが働き方をどう&amp;lt;シフト(転換)&amp;gt;させるべきかを提案する。
&amp;lt;第一のシフト&amp;gt;は、一つの企業の中でしか通用しない技能で満足せず、高度な専門技能を磨き、ほかの多くの人たちから自分を差別化するために「自分」ブランドを築くこと
&amp;lt;第二のシフト&amp;gt;は、難しい課題に取り組む上で頼りになる少人数の盟友グループ(ポッセ)と、 イノベーションの源泉となるバラエティに富んだ大勢の知り合いのネットワーク(ビッグアイデア・クラウド)、そしてストレスを和らげるための打算のない友人関係(自己再生のコミュニティ) という、三種類の人的ネットワークをはぐくむこと
&amp;lt;第三のシフト&amp;gt;は、大量消費主義を脱却し、家庭や趣味、社会貢献などの面で充実した創造的経験をすることを重んじる生き方に転換すること。
 物質的にも精神的にも裕福ではなかった時代があって、
物質的に裕福になった一部の地域ができてきた時に、精神的に裕福になるためには
過剰に物質的欲求を満たすのではなく、社会貢献や、家族、仲間との時間を過ごす
方向に流れていくのは自然かなとは思います。
先人の経験や慣例から得られるものと、これから先の大きな変化と
自分が何ができるか、というものを並べて、常に問いながら、
なるべくならその選択が、自分を含めた環境にとって
最善の選択になるように生きていければよいですね。</description>
    </item>
    
    <item>
      <title>メルマガ、サイトにログインしないと配信停止できないの</title>
      <link>https://blog.kenjiskywalker.org/2013/11/20/click-to-unsubscribe/</link>
      <pubDate>Wed, 20 Nov 2013 23:15:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/20/click-to-unsubscribe/</guid>
      <description>Stop doing this crap on your startups website
 1: One click unsubscribe
Many sites butcher this process. You should have a link to 1-click unsubscribe at both the top and bottom of all emails you send. Don’t settle for “log in to unsubscribe” - Yes, its legal for transactional emails but its still stupid. You (the webmaster) will be the only one hurt when your user just marks you as spam instead because he doesn’t remember his password.</description>
    </item>
    
    <item>
      <title>Happy Hacking Keyboardがコーヒーを飲んだら</title>
      <link>https://blog.kenjiskywalker.org/2013/11/16/hhk/</link>
      <pubDate>Sat, 16 Nov 2013 14:35:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/16/hhk/</guid>
      <description>HHKの恐怖体験です pic.twitter.com/JAjpk5mFob
&amp;mdash; kenjiskywalker (@kenjiskywalker) November 16, 2013 
水で洗って終わりではありません。ゴムの部分に大量の水が付着しています。
水ジャブ放置だけではなく、必ず分解して乾かしましょう。
東プレさん、あともう少しだけケーブル伸ばしてくれ pic.twitter.com/YLfiYxNxP4
&amp;mdash; kenjiskywalker (@kenjiskywalker) November 16, 2013 
外すことはできるのですが、この部分もう少し長いとメンテが楽になるかと思います。
東プレさん、よろしくお願いいたします。
分解したきっかけはeがチャタりだして、おいおいマジかよ&amp;hellip;
って分解してみたら〜でした。ゴムと基板の間の他に、キートップの隙間にも
水分が溜まっていて、アチャ〜って感じでした。
全部掃除して、ハメ直して試したら今度はxがチャタってて、終わった&amp;hellip;
ってなったんですけど、基板とゴムの部分のネジを弛めて、
バネが真ん中の方に来るようにカタカタ揺らして、基板のネジを全部強く締め直したら直りました。
日頃の行いよくしてこ</description>
    </item>
    
    <item>
      <title>「Think Simple」を読んだ。おすすめです</title>
      <link>https://blog.kenjiskywalker.org/2013/11/16/think-simple/</link>
      <pubDate>Sat, 16 Nov 2013 12:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/16/think-simple/</guid>
      <description>何か事ある度に「人が集まるとろくなことがない」って口にしているのですが
その解がこの本には詰まっていました。
 人間と人間とがぶつかり合い、意見を戦わせることで良いものができるという研磨機おじさんの話はこちらを参照ください。
読んでいて引っかかったところをメモ。
進め方の話  プロジェクトの成果の質は、そこにかかわる人間の多さに反比例する
 渋い。
 プロジェクトの成果の質は、最終的な意思決定者がかかわる程度に比例する
 渋い。
 プロセスが王様のときに、アイデアはけっして王様にはなれない。プロセスの段階を増やせば増やすほど、完成品の質が悪くなることは、&amp;lt;常識&amp;gt;を働かせればわかるだろう。
 厳しい。
 フォーカスグループによって製品をデザインするのはとてもむずかしい。多くの場合、一般の人は実際に製品を見るまで、何がほしいかわかっていないからだ。
 有名なヤツだ。消費者を馬鹿にしているんじゃなくて、クリエイティブなものをつくるのに、人の意見ばかり気にするんじゃなくて、徹底的に最高のものをつくろうとすることが大切だ。みたいな話だった。
 ピクサー内部で彼(ジョブズ)は、クリエイティブな会議には出席しないように求められていた。さもなければ、ライターやアーティストが大量に造反する恐れがあったからだ。
 案外言うこと聞くんだなって笑ってた。
話しあいの話  シンプルさはせっかちだ。いきなり本題に入って、大事なことに集中したがる。
 会議で完結に要点を伝えないとすぐに追い出されるの、相当きついと思う。
 クライアントを結論に導くことと、クライアントを愚か者のように扱うことはわずかな違いしかない。おそらくスティーブが「導かれる」ことに反応したのもそこに理由があったのだろう。スティーブに対する最良のアプローチは、ただ事実をテーブルの上に並べて、議論を始めることだった。
 資料音読会議に対するアンサーソングだ。
 最後に「何かご質問は？」と問いかけても、議論を推奨しているわけではない。最終的に、ほとんどのビジネスは人間関係の問題になる。堅苦しくないプレゼンで正直な議論をすることは、人間関係を深める道であり、それがよりよい結果をもたらすのだ。
 建設的だ。
アイデアの話  アップルの競争相手が売る電話機は、ほとんどの名前が覚えられないほど難しい。その理由は、あまりにもモデルの数が多いのと、それらがブランド名や電話の機能とは関連がないからだ。
iPadが披露されたときに、ライバル各社は特徴がないと批判した。〜中略〜iPadに「欠けている」ものをすべて足して、魅力的な機器にしようとした。ところが、そうした足し算では売れなかった。消費者にとって魅力的に映ったのは、アップルがデザイン段階でおこなう引き算だったのだ。
 万物のすべてにおいて、デコ盛りしてよかった試しなんてほとんどない。
 たとえば、スティーブの承認を得た広告を作っていて、撮影中や編集中にもっといいアイデアを思いついたとしよう。そのとき私たちは、いつでも新しいアイデアをスティーブに提案することができた。彼もそれを期待しているようで、新しい広告が議題にあがることを楽しみにしていた。
 ロストインタビューで言っていた研磨機の話だ。
 スティーブはそうした「幸運なアクシデント」、つまり、ランダムに起こる話しあいを信じていた。
 研磨機おじさんだ。
 プロセスによって効率を上げることはできる。だが、イノベーションは人が廊下で出くわしたり、夜の10時半に電話をかけあったりするところから生まれるのだ。新しいアイデアを思いついたとか、ある問題に関して行き詰まっている原因に思い当たったとかいう理由でね。最高にクールで新しいものを考えだした人間が、そのアイデアについて意見を聞きたいと思って電話をかけた6人が集まる。そこで臨時会議がはじまるというわけだ。
 研磨機だ。
 シンプルさのためには、あなたも否定的な答えに遭ったときには精査するとよい。その「ノー」はたんにあなたの要求が高すぎることを言っているだけかもしれない。しかしそう要求することが、普通以上の結果を得るためには必要なのだ。
 プロジェクト単位で取り入れるとデスマ礼賛になる。これは自分自身への要求へ置き換えるのが正解だ。
 ある問題を解決しようとして、最初に考えだした解決策がとても複雑だったとしよう。ほとんどの人はそこで考えるのをやめてしまう。だが、そこでやめずに考えつづけて、タマネギの皮をむくようにムダなものをそぎ落としていくと、とても洗練されたシンプルな解決策にたどり着くことがよくある。
 良い話だ。
 イノベーションをするときに、ミスをすることがある。最良の手は、すぐにミスを認めて、イノベーションのほかの面をどんどん進めることだ。
 肝に銘じよう。</description>
    </item>
    
    <item>
      <title>シンデレラのようにブラピになる方法</title>
      <link>https://blog.kenjiskywalker.org/2013/11/13/brapi/</link>
      <pubDate>Wed, 13 Nov 2013 23:28:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/13/brapi/</guid>
      <description>TwitterのDevelopersサイトで必要な権限を取得(これは色んなところに載っているから省略) 実行したい時間にcronでスクリプトを叩く   これだけです。
brapi.rb #!/usr/bin/env ruby # encoding: utf-8 require &#39;twitter&#39; YOUR_CONSUMER_KEY = &#39;&#39; YOUR_CONSUMER_SECRET = &#39;&#39; YOUR_OAUTH_TOKEN = &#39;&#39; YOUR_OAUTH_TOKEN_SECRET = &#39;&#39; Twitter.configure do |config| config.consumer_key = YOUR_CONSUMER_KEY config.consumer_secret = YOUR_CONSUMER_SECRET config.oauth_token = YOUR_OAUTH_TOKEN config.oauth_token_secret = YOUR_OAUTH_TOKEN_SECRET end img = open(&#39;./brapi.png&#39;) Twitter.update_profile_image(img) Twitter.update_profile(:name =&amp;gt; &amp;quot;ブラッド・ピット&amp;quot;)  modoru.rb #!/usr/bin/env ruby # encoding: utf-8 require &#39;twitter&#39; YOUR_CONSUMER_KEY = &#39;&#39; YOUR_CONSUMER_SECRET = &#39;&#39; YOUR_OAUTH_TOKEN = &#39;&#39; YOUR_OAUTH_TOKEN_SECRET = &#39;&#39; Twitter.</description>
    </item>
    
    <item>
      <title>コミットしたら般若心経が流れるgit hookをつくった。</title>
      <link>https://blog.kenjiskywalker.org/2013/11/12/commit-hannyashinkyo/</link>
      <pubDate>Tue, 12 Nov 2013 22:15:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/12/commit-hannyashinkyo/</guid>
      <description> 告白されたいと思って、 告白しやすくしたりしたが、男からしか告白が来ない。
http://hisaichi5518.hatenablog.jp/entry/2012/11/10/003301
よく考えたら、大人になって、社会人になって、エンジニアになって、
おじさんと話すことは多くなったが、女の子と話すことがない。
告白なんて夢のまた夢だと気づいた。
でも、やっぱり女の子に告白されると嬉しい。
とくに可愛い女の子に告白されたら嬉しい。
可愛い女の子といえば、般若心経だと思う。
般若心経に「照見五蘊皆空、度一切苦厄」とか言われたい。早く苦悩から開放されたくなる。
般若心経に「能除一切苦」とか言われたい。早く苦悩を除いて良かった。
なので、コミットしたら般若心経が流れるgit hookを作った。
コードを書いてコミットをする、たったそれだけで般若心経が流れて
「羯諦羯諦、波羅羯諦、波羅僧羯諦、菩提薩婆訶」とか言われる。最高。解脱。
.git/hooks/post-commit open http://www.kenjiskywalker.org/hannyashinkyoo.html   commit般若心経 from kenjiskywalker on Vimeo.
合わせて読みたい  コミットしたら吉高由里子に告白されるgit hookを作った。 - パルカワ2 コミットしたら宮崎あおいに告白されるgit hookを作った。 - @soh335 memo  </description>
    </item>
    
    <item>
      <title>#isucon 2013 参加してきました</title>
      <link>https://blog.kenjiskywalker.org/2013/11/11/isucon2013-main/</link>
      <pubDate>Mon, 11 Nov 2013 10:02:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/11/isucon2013-main/</guid>
      <description>運営のみなさまおつかれさまでした。今回もとても楽しかったです。
今回は誰でもわかるようなボトルネック、例えばクソクエリとか
クソコードとかはなくて、現状のゼロベースからどうやってスコアを上げるか。
みたいな感じだった。なので最初の方向性付けがすべてだったのかなと。
出題者の@fujiwaraさんと@acidlemonさんすごい。
また、アプリケーションを確認した時点で
2人でできることって限界があるな。って感じていました。
細かいことはhttp://soh335.hatenablog.com/entry/2013/11/10/214457ここ読んでください。
課題  予選の時にはできていたスコアを着実に上げていくことができなかった。(人数の問題もあった) エラーが発生していて、その解決を@soh335待ちにしてたところがあった。問題解決とは別に平行して作業を行えばよかった。
 待ちにしていた実装が不可能だった場合、即切り替えてやればよかった。
 切り替えるにしろ、実装の確認、問題意識のすり合わせをしなかったのでそこは予選から改善されていなかった。(問題の複雑さと人数の少なさを意識し過ぎた) Redis載せ、取り敢えず画像を縮小するか 手分けして複数台でRedisに載せられるように改修できればよかった。自分の実装力が足りなかった。   残り2時間前まで何やっていたのか覚えていない。
 サーバ全員が同じ画像ディレクトリを見ていれば良い 内部ネットワークは1Gbpsって言っていたのでネットワークのボトルネックはない
  と信じてNFSの導入をした。30分ぐらいで全台NFSで見れるようになったけど
アプリでどうにかイケそうだ。っていう話だったのでNFSだと全台再起動してからのテストでコケた場合、
設定箇所の特定が間に合わないかもしれないと判断して、NFSは捨ててアプリのフォローに回った。
結果、改修は間に合わなかった。
まとめ Failで終わるのはプロとして恥ずかしい。
転職前にスピードワゴンはクールに去るぜ。の如くキメたかったけど
先は長く厳しい。日々戦いは続く。ベルマーレがJ2に落ちたとしても
オレたちは常に目の前の問題に最善をつくしていかなければならないんだ。
先は長く、厳しい。</description>
    </item>
    
    <item>
      <title>AWS費用試算例</title>
      <link>https://blog.kenjiskywalker.org/2013/11/07/example-aws-cost/</link>
      <pubDate>Thu, 07 Nov 2013 14:16:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/07/example-aws-cost/</guid>
      <description>実在するかどうかはわかりませんがこのような構成があった場合に
どのような費用が発生するのか試算してみました。
AWSは費用の算出が難しいので、参考になれば幸いです。
また、計算方法の誤りや、情報の過不足等あれば
gistにコメントか、Twitterなどで教えて頂ければ有難いです。
 Simple Monthly Calculatorを利用して算出しています。
 {% gist 7349351 %}</description>
    </item>
    
    <item>
      <title>「メタプログラミングRuby」と「Eloquent Ruby」を斜め読みした</title>
      <link>https://blog.kenjiskywalker.org/2013/11/04/meta-programming-eloquent-ruby/</link>
      <pubDate>Mon, 04 Nov 2013 20:14:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/04/meta-programming-eloquent-ruby/</guid>
      <description>読んだ時のメモです
{% gist 7281133 %}</description>
    </item>
    
    <item>
      <title>2013/10読んだ本</title>
      <link>https://blog.kenjiskywalker.org/2013/11/01/201310-book/</link>
      <pubDate>Fri, 01 Nov 2013 18:45:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/11/01/201310-book/</guid>
      <description>antipopさんの真似事をしてみる。
歴史人、体系的に明治政府設立の過程が理解できてよかった。
なるほどUnixプロセスはずっと前から持っていたけどサラサラ〜っと読んで終わっていた。
実際に手を動かすことで理解が深まった。
Linuxシステムコールプログラミングもサラサラ〜っと読んだだけなので
コード書いて実際にそのシステムコールを利用しているプログラムの
ソースを読んで理解したい。
図書館上手く使えていないので使いたい。
キングダム 31 (ヤングジャンプコミックス)著者 : 原泰久集英社発売日 : 2013-07-19ブクログでレビューを見る» 多重人格探偵サイコ (18) (カドカワコミックス・エース)著者 : 田島昭宇角川書店(角川グループパブリッシング)発売日 : 2013-02-01ブクログでレビューを見る» 多重人格探偵サイコ (19) (カドカワコミックス・エース)著者 : 田島昭宇角川書店発売日 : 2013-10-03ブクログでレビューを見る» バガボンド(36) (モーニングKC)著者 : 井上雄彦講談社発売日 : 2013-10-23ブクログでレビューを見る» 宇宙兄弟(22) (モーニングKC)著者 : 小山宙哉講談社発売日 : 2013-10-23ブクログでレビューを見る» 歴史人 2013年 11月号 [雑誌]著者 : ベストセラーズ発売日 : 2013-10-12ブクログでレビューを見る» 吉田松陰 留魂録 (全訳注) (講談社学術文庫)著者 : 古川薫講談社発売日 : 2002-09-10ブクログでレビューを見る» 自然言語処理ことはじめ―言葉を覚え会話のできるコンピュータ著者 : 荒木健治森北出版発売日 : 2004-06-12ブクログでレビューを見る» なるほどUnixプロセス ― Rubyで学ぶUnixの基礎著者 : Jesse Storimer達人出版会発売日 : 2013-06-21ブクログでレビューを見る» Linuxシステムコールプログラミング (エッセンシャルソフトウェアガイドブック)著者 : 山森丈範技術評論社発売日 : 2009-09-24ブクログでレビューを見る» キングダム、定価で良いので紙と同じ日に発売してほしい。</description>
    </item>
    
    <item>
      <title>「興福寺仏頭展」と「京都なんとか展」に行ってきた</title>
      <link>https://blog.kenjiskywalker.org/2013/10/31/buttoh-ten/</link>
      <pubDate>Thu, 31 Oct 2013 19:54:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/31/buttoh-ten/</guid>
      <description>仏像の頭と
 障壁みてきた
 丁度気候が良かったのもあるかもしれないけど東京藝術大学、とてもいい雰囲気だった。
あの辺から国立博物館付近お散歩するのとても良いかもしれない。
障壁、風俗がわかって資料として面白かった。
けど寺とかにある絵とか二条城の襖の絵とか飾ってあっても
そうですか。っていう感じだった。
古典、あまり詳しくはないんですが、狩野派と呼ばれる人より
俵屋宗達の方が構図が面白くて好きです。光悦とのコラボ作品とかとても面白い。
そもそもやっぱり仏像の方が面白い。
厨子入木造弥勒菩薩半跏像は細かい装飾が綺麗に残っていて玄関に飾りたかったです。
木造十二神将立像なんですが、頭に干支が乗っかってるんですね。
で、みんなよく出来ているんです。説明読まなくてもああ虎だなとか
これは牛だなとか、わかるんです。干支は小さいながらも
とても細かく掘られているのでわかるんです。
ですが猿だけ、プロトタイプみたいな感じでやたら雑だったんです。
で、多分ですけど、これ掘った人猿見たことなかったんじゃないかなって。
板彫十二神将像は板なのに声が聞こえそうで、みんなひょうきんでとてもおもしろかったです。
何かつらいことがあってもこの１２体の神様がそばにいたら楽しくなりそう。
あと国立博物館行ったら是非常設展に足を運んでみてください。 定期的に中身入れ替わってて、東海道中膝栗毛の原本とか、
勝海舟の本物のポラロイドとか置いてあったりするのでおすすめです。

写真もOKなものあるので、撮影して祈りたい放題ですね。</description>
    </item>
    
    <item>
      <title>「なるほどUnixプロセス ― Rubyで学ぶUnixの基礎」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/10/21/working-with-unix-processes/</link>
      <pubDate>Mon, 21 Oct 2013 14:43:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/21/working-with-unix-processes/</guid>
      <description>サラサラ〜っと読んで放置していた
「なるほどUnixプロセス ― Rubyで学ぶUnixの基礎」を読みました。
週末手を動かしながら読めたのでよかった。
fork(2)周りの所作とpipe(2)、socket(2)も簡単に試せてよかった。
daemon化するために孫プロセスで動かすとか古典的な感じだった。
本書は簡単に書きながら試せる。っていうのが最高に最高だと思います。
何で放置していたものを手に取ったかは
なるほどUnixプロセス読んだ - デーモン化のためのdouble fork - はこべブログ ♨
このはこべさんのエントリー読んだのがきっかけでした。
親プロセスは2度死ぬ - デーモン化に使うダブルforkの謎 - 睡眠不足？！
そしてこちらのエントリーへ行って、詳解UNIXプログラミングに行きあたり
いい加減読むか〜って思って色々見ていたら
『詳細UNIXプログラミング』の原書『Advanced Programming in the UNIX Environment』(通称APUE)の3rd Editionが出てました - (ひ)メモ
というひろせさんのブログにぶち当たり
APUEか〜、いい加減読まないとダメだな〜ってなって買いました。
 洋書なので多分今年中に読み終わらないと思います。
購入の決め手はサンプルコードが毎回記載されてて
サンプルコード毎に実行できそうだったので、コード読めばなんとなく
わかるかなって判断しました。
なるほどUNIXなんとか読む =&amp;gt; hakobeさんのブログでdouble forkについて理解する =&amp;gt; 詳細UNIXプログラミングが気にある =&amp;gt; (ひ)に辿り着く
&amp;mdash; kenjiskywalker (@kenjiskywalker) October 20, 2013 次から次に壁が現れるぜコンチクショ〜</description>
    </item>
    
    <item>
      <title>Zabbix::Senriganをつくりました</title>
      <link>https://blog.kenjiskywalker.org/2013/10/17/senrigan/</link>
      <pubDate>Thu, 17 Oct 2013 23:14:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/17/senrigan/</guid>
      <description>千里眼、どんなメリットがあるのか見えないとのことなので
もう少し詳細に書きます。
demo：http://un.kenjiskywalker.org/senrigan/ 動きます。
screen shot こんな感じのZabbixのグラフを取得してきて一覧で表示してくれるものです。
何のために？ グラフの一覧を表示するためなら、Zabbixのスクリーンを利用するのが良いですね。
しかし、スクリーンが案件毎やグループ毎に分かれていた場合、
横断的にCPU使用率を確認しようとすると、全てのスクリーンへ
アクセスしなければならない。世に云うZabbix画面右上プルダウン地獄です。
案件担当者であれば、特定のスクリーンだけ見ておけば問題ないかもしれませんが
システム全域に目を通さなければならない運用者にとって
このZabbixプルダウン地獄はそこそこストレスになります。
私はなりました。
そして、横断的に確認するコストが高くなると
目視で定期的に確認する間隔が減り、変化に気付きにくくなります。
私はなりました。
そこで、解決策として
 動的ではなくて良い 決まった期日の間のグラフ一覧がほしい なるべくプルダウンしなくて良いようにする
 全てのグラフをシンプルに表示する   この3点を叶えるオレ得ツール、Zabbix::Senriganを作成しました。
https://github.com/kenjiskywalker/p5-Zabbix-Senrigan/ demo：http://un.kenjiskywalker.org/senrigan/ 改めてdemo。
screen shot 自宅環境だとグラフ少ないのでメリットないのですが、プロダクト環境で
CPUのグラフが400個ぐらいあるとだいぶ便利です。
https://github.com/kenjiskywalker/Mzcs これのバージョンアップ版みたいな感じです。
導入方法  Zabbixを利用していることが前提条件です
 carton install、carton exec perl script.plで動きます。
egの中にscript.plがあるので
#!/usr/bin/env perl use strict; use warnings; use utf8; use FindBin; use lib &amp;quot;$FindBin::Bin/../lib&amp;quot;; use Zabbix::Senrigan; my $snrgn = Zabbix::Senrigan-&amp;gt;new( username =&amp;gt; &amp;quot;zabbix_user&amp;quot;, ### Zabbixのユーザ名 password =&amp;gt; &amp;quot;zabbix_password&amp;quot;, ### Zabbixのパスワード zabbix_url =&amp;gt; &amp;quot;http://localhost/zabbix&amp;quot;, ### ZabbixのURL data_source =&amp;gt; &amp;quot;DBI:mysql:zabbix&amp;quot;, ### ZabbixのDB名 db_username =&amp;gt; &amp;quot;zabbix&amp;quot;, ### ZabbixのDBのユーザ名 db_password =&amp;gt; &amp;quot;zabbinx&amp;quot;, ### ZabbixのDBのパスワード graph_name_list =&amp;gt; [&amp;quot;CPU utilization&amp;quot;, &amp;quot;Swap usage&amp;quot;], ### 見たいグラフ view_graph_num =&amp;gt; 30, ### 1ページに表示するグラフ数 period =&amp;gt; 86400, ### グラフの間隔 time =&amp;gt; &amp;quot;120000&amp;quot;, ### 12:00:00 からのデータ create_dir =&amp;gt; &amp;quot;.</description>
    </item>
    
    <item>
      <title>「自然言語処理ことはじめ」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/10/17/natural-lang/</link>
      <pubDate>Thu, 17 Oct 2013 22:23:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/17/natural-lang/</guid>
      <description>n-gram(隣接する文字を2、3文字で区切って、統計的に出現頻度を求める) bigram(隣接する文字を2、3文字で区切って、2つの文字を統計的に出現頻度を求める) trigram(隣接する文字を2、3文字で区切って、3つの文字を統計的に出現頻度を求める)  無作為に分けるだけではなく、名詞、接続詞、動詞などで区別したりもする。
 n-gram
「私は眠い」
|私は| |は眠| |眠い|
 「わたしははがいたい」=&amp;gt; 「私母が痛い」 「わたしははがいたい」=&amp;gt; 「私は歯が痛い」
 最長一致法 トップダウン法 ボトムアップ法  どのように適切な単語区切りを行うか(アルゴリズム)
文章の中の単語の前後関係をどうやって上手く使うか(アルゴリズム)
与えられた言葉を正確にコンピュータが理解できれば
コンピュータのリソースの効率化が行われて、
人間の生きる速度が上昇するなーって思いました。
最終的に与えられたものだけではなく、その先の
自分が考えなければならないことや決断しなければならないことを
コンピュータが補助してくれたら面白そうだなって思いました。</description>
    </item>
    
    <item>
      <title>IRCでお願いしたら分散図つくってくれるscatter_kunつくった</title>
      <link>https://blog.kenjiskywalker.org/2013/10/14/scatter_kun/</link>
      <pubDate>Mon, 14 Oct 2013 15:51:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/14/scatter_kun/</guid>
      <description>https://github.com/kenjiskywalker/Scatter_Kun Songmuさんにモジュール化しろ。っていわれていたけど
サクっとできなさそうだったので取り敢えず上げておいて
誰かがモジュール化してくれたりするのを祈ることにしました。
つくった理由は、負荷テストで同じテストケースを利用して
並列数を上げた時にどのようにスコアが変化するかを
ぱっと見でわかるようにしたかったのと、簡単にHTMLで残るように
したかったのが理由です。
良かったら書きなおしたりしてご利用ください。
テンプレートはGoogle ChartsのScatter Chartを利用しています。
Google Charts、とても便利ですね。</description>
    </item>
    
    <item>
      <title>「スティーブ・ジョブズ 1995～失われたインタビュー～ 」見た</title>
      <link>https://blog.kenjiskywalker.org/2013/10/14/steve-jobs-the-lost-interview/</link>
      <pubDate>Mon, 14 Oct 2013 15:22:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/14/steve-jobs-the-lost-interview/</guid>
      <description>「スティーブ・ジョブズ 1995～失われたインタビュー～ 」 特に傾倒しているとかではないのですが面白そうなので見てきました。
ずっとお茶目な感じで話してて、インタビュアーとの
信頼関係ができあがっているのか、物事の内面の話というか、
ものづくりの人の話でした。
ものをつくる意識とかあまりないのですが、ものつくってる、つくりたい
っていう自覚のある人は見て損はないと思います。
 最初から完成しているものはなく、人間と人間が
本気でぶつかり、罵り合い、意見と意見、思想と思想を戦わせて
そのモノがどんどん変化してき、
関わった人間が込めた時間や情熱によって
美しいものが生まれる。
 ということを本気で信じているのが印象的でした。
インタビューを受け答えしているスティーブ・ジョブスは
蒼天航路の曹操とそっくりでした。
消失したインタビュー嫌いのジョブズの映像、映画化へ～失意とアップル躍進への決意  インタビューの中で、ジョブズは若い頃の話を始める。芝刈りのバイトで出会った老人が古い研磨機をジョブズに見せ、なんの変哲もない石ころが大きなうるさい音をたててこすれ合い、翌日には驚くほど美しく磨き上がった石になっていたという。「ずば抜けた才能を持つ者が集まって、ぶつかり合い、議論を戦わせ、喧嘩して怒鳴り散らす。そうやってお互いを磨き合い、アイデアを磨き上げて美しい石を創り出す。私にとってはこの体験こそが、情熱を持って働くチームの象徴なんだ」と。
実際、ジョブズは信念を持って反論してくる社員を評価しており、ハードな論争を好んでいた。彼とやり合えるほどの実力のある社員は限られていたが、ジョブズはたびたび激昂し、こてんぱんに罵倒し合うということは日常茶飯事だったらしい。
 極端にまとめると、黒いタートルネックを着た
やたらアツいおじさんの話でした。
本気のヤツは強い。</description>
    </item>
    
    <item>
      <title>Vimで日本語の切り替えで毎回っっっっっっってなる対策</title>
      <link>https://blog.kenjiskywalker.org/2013/10/11/vim-de-multi_byte_ime/</link>
      <pubDate>Fri, 11 Oct 2013 14:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/11/vim-de-multi_byte_ime/</guid>
      <description>.gvimrcに
if has(&#39;multi_byte_ime&#39;) || has(&#39;xim&#39;) highlight Cursor guifg=NONE guibg=White highlight CursorIM guifg=NONE guibg=DarkRed endif  って書いたら
こんな風に全角の時に赤色になるから
ノーマルモードで全角で入力しちゃってうわああああ！！！
っていうことなくなるのでおすすめです。
MacVimだとmulti_byte_ime使えなくて
macvim-kaoriyaだと使えました。
マコピーに教えてもらいました。ライフチェインジング！</description>
    </item>
    
    <item>
      <title>音楽</title>
      <link>https://blog.kenjiskywalker.org/2013/10/11/music-20131009/</link>
      <pubDate>Fri, 11 Oct 2013 00:27:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/11/music-20131009/</guid>
      <description> Ambivalence Avenue / Bibio Silver Wilkinson / Bibio Fi / Bibio Ignorant - In the Grid EP / Funkinevil  Night/Dusk / Funkinevil  Feast - Beast / Clark Hide / The Bloody Beetroots </description>
    </item>
    
    <item>
      <title>「ブッダ・マウンテン 希望と祈りの旅」みてきた</title>
      <link>https://blog.kenjiskywalker.org/2013/10/11/buddha-mountain/</link>
      <pubDate>Fri, 11 Oct 2013 00:17:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/11/buddha-mountain/</guid>
      <description>「ブッダ・マウンテン 希望と祈りの旅」
単館系久々に見に行ったけど気楽に見れてよかった。
映画の内容も良かった。酒と煙草と女と音楽がほしくなる感じだった。
中国でも人は一生懸命生きてるんだなって当たり前のこと考えた。</description>
    </item>
    
    <item>
      <title>Goでvalue domainのアップデートスクリプトかいた</title>
      <link>https://blog.kenjiskywalker.org/2013/10/10/value-domain-update-go/</link>
      <pubDate>Thu, 10 Oct 2013 15:28:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/10/value-domain-update-go/</guid>
      <description>書き方あってるのか微妙なのでGoに明るい方のご指摘をお待ちしております。
{% gist 6914101 %}
Goでpit使えないのかなって@soh335さんに聞いたらtype氏のリポジトリ見ろ
って言われて見に行ったらあった。@typester++
 pitDomainで設定されているdomainとpasswordを取得 recordsで現在のIPアドレスに変更したいレコードリストを入れる temple-kun.appspot.comで現在のIPを取得 現在のIPとレコードに設定されているIPが違ったら更新、同じであればスルー   という感じです。</description>
    </item>
    
    <item>
      <title>#isucon 2013 予選1日目に参加しました</title>
      <link>https://blog.kenjiskywalker.org/2013/10/07/isucon2013/</link>
      <pubDate>Mon, 07 Oct 2013 09:55:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/07/isucon2013/</guid>
      <description>isucon 2013の1日目に参加しました。
@fujiwaraさん、@acidlemonさんありがとうございました。
本戦の問題作成頑張ってくださいね(・ω&amp;lt;)
細かいことはisucon3 の予選に参加しました #isucon - @soh335 memoに書いてあります。
大切なことは#isucon の予選に参加してきた。 - パルカワ2に書いてあります。
補足としては、ひさいち君は335さんがあれ〜〜〜〜〜？？？なんで〜〜〜〜？？？
って言い出したらコード見てこれがこうじゃない？？？って言って、
あ〜〜〜〜〜〜〜〜〜！！！っていう
デバッグ職人の役割とアプリケーションの細かい修正とかをやってもらってました。
漫画読んでたのは残り時間2時間残して、5位以内当確間違いないでしょ〜みたいな
奢りの象徴でした。
残り2時間ぐらいやることなくなったのは、
workload数を昔のISUCONのレギュレーションと勘違いして
時間内の最高スコアが実スコアなのに、最後に運営側で回したスコアがそれだろ。
って335さんと勘違いしてworkload 1しばりやってたからでした。
これはひさいちが遅刻してこなければ免れたかもしれません。
開始からいきなり忙しいぶってたり、攻殻機動隊のサントラをかけろ！！！
gitの設定より先にそれやれ、gitはオレがやるから！！！な！！
テンションあげてこ！！！？？とかやらずに
開始と同時に、良い茶葉が入りましたので、
ハーブティーでも飲みませんか？ぐらいの心の余裕が必要でした。
それと、ベンチマーク走らせる度に
「カムカムカムカム〜〜〜〜〜〜〜〜〜！！！！」「ノオ〜〜〜〜〜〜〜〜〜！！！！」
「ワイワイワイワイワイエラー！！！」
「きっとベンチマーク遅くなると思うけどやらせてくれッッ！！！！」
「ヒュ〜〜〜〜〜〜！！！キマったぜ！！！」みたいに
やたらテンションが高かったのも反省点でした。
自分がやったことは
1- nginx化はボトルネックわかってからやろう！って言ってたのに
nginx化してもらわないとわからないみたいな
当たり屋みたなこと言われて渋々ボトルネック探す前にnginx化し、
ログフォーマットはLTSVを利用し、必要最低限のログだけ出すようにし、
閲覧性を向上させていました。
2- MySQLは、結局見ませんでしたが
取り敢えずクエリを全部吐くようにしてログに出しておきました。
3- ボトルネック探しはdstatとiotopでCPUとI/O周りを確認していました。
一番効果があったのはDBIx::SunnyがどこのコードがそのSQL吐いてるのか
クエリに出してくれるので、そこひたすら眺め
335さんとこうした方が良い、ああした方が良い。って話していました。
実装は全部335さんに任せていました。
SQLで重い処理はRedisに持って行きました。
Redis、長期的に運用すること考えない場合こんなに楽なのか〜って震えました。
4- 335さんがRedisの実装書いてる時はチラチラコード読んで、データの中身確認して
こそ泥みたいなチューニングしてる #isucon
&amp;mdash; kenjiskywalker (@kenjiskywalker) October 5, 2013 
こんな感じのことをしていました。
残り2時間ぐらいになってくると、innodb_buffer_pool_size上げるだけ上げたので
ほとんどのデータがメモリに載り、Disk Readなどほとんどなくなり</description>
    </item>
    
    <item>
      <title>誕生日とウィッシュリスト</title>
      <link>https://blog.kenjiskywalker.org/2013/10/06/tanjyobi/</link>
      <pubDate>Sun, 06 Oct 2013 00:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/10/06/tanjyobi/</guid>
      <description>誕生日です〜とか言ってウィッシュリストのURL送りまくってたら
@hsbtさん、@soh335さん、@hisaichi5518くん、@Keita_Shiyaくんから誕生日プレゼント頂きました。
ありがとうございます！
勉強します！</description>
    </item>
    
    <item>
      <title>YAPC::Asia Tokyo 2013に遊びに行ってきました</title>
      <link>https://blog.kenjiskywalker.org/2013/09/26/yapcasia2013/</link>
      <pubDate>Thu, 26 Sep 2013 23:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/26/yapcasia2013/</guid>
      <description>http://yapcasia.org/2013/ 前夜祭から３日間参加しました。
今回は発表者の人たちの年齢も若く、大変刺激的でした。
このような有意義な場を設けて頂き有難うございました。
また、参加するにあたり、業務として参加することを許している会社にも
合わせて感謝します。
今回会場でお話させてもらったエンジニアの人たちはみな
24歳〜26歳の方々ばかりで、年齢とは関係なしに第一線で活躍されていて
私の目には、ただただ輝いて見えました。
私は前職がライブドア関係ということもあり、現LINE社の方々にはよくして頂き
面白法人の方々には、当たり前のようにオープンソースの活動をされている姿に
刺激を与えてもらい、決して初心者扱いせず、一流のエンジニアとして
プログラミングを教えて頂きました。
学生時代は、オープンソースはインターネットの向こう側の話で
情報系の専門学校を出たものの、プログラミングは一切せず、最近までは
特に何をするでもなく面白おかしく生きていました。
現在の私の環境も、最初は社内SEということで適当に仕事しようと思っていたら
インターネットの向こう側のfujiwaraさんと同じ仕事をすることとなり、
必死でプログラミングやサーバサイドの勉強をしたりと、
意図せず竹槍一本でインターネットの最前線にいます。
当たり前のことですが、最前線で活躍されているエンジニアの方々は日々誰よりも勉強をし
日常の改善を行い、オープンソースにコミットする形で切磋琢磨されています。
最近は私もプログラミングやサーバサイド、ウェッブサービスの勉強をしはじめ、
色々なコミュニティの会にお声がけして頂く機会ももらえ、
その度に、エッ？もっとバリバリやってきたのかと思ったら案外初心者なんですね！
ってリアクションされています。
その期待を良い意味で裏切れるよう、また、オープンソースのコミュニティの方々に
もっとしっかりしろ！もっとできるだろ！さっさとこっちに来いよ！と
激励のお言葉を頂いたりして、絶対全員ぶっ潰す。と内心思いながら
たまに背伸びして会話に参加しては、何言っちゃってんのコイツ？？？というように
空気を乱しつつ、精進している毎日でございます。
私自身、既に30歳を過ぎ、エンジニアは30歳までに自分の基礎を築き
そこからはどれだけその基礎に新しいものを乗せられるかだ。みたいな話を聞く度に
基礎なんかねーよ、優秀な新卒氏らにいびられながら精一杯やるしかねーんだよクソが。
と管を巻く毎日でございます。
環境に活かされている。多分それはすたじおさんぐらいしか理解者がいないのですが
環境によって活かされていて、結果的に一流のエンジニアの方々と面識があるだけで
何かすごいコミットをしてきているわけではありません。
それでも、つたないことでも良いから何かを発信して、誰かの琴線に触れたり
どこにでもあるような基礎的な話でも、この話が役に立ったといってもらえる瞬間はあります。
コミュニティの場で、スーパーなエンジニアの方に気軽に声をかけることよりも、
声をかけるきっかけをつくることが大事なんじゃないのかなと
最近は思うようになりました。
2日目に、諸事情があってウロウロしていたらmizzyさんに声をかけて頂き
serverspecのステッカーを貰いました。
 ついでに本番環境でのserverspecの運用方法の話もしました。
そしたらひろせおじさんがやってきて、ドラクエ氏が
買ってきたばかりのiPhone5sを見せびらかしていて、
いつの間にかスーパーなおじさんだらけでした。
つらつら書きましたが、どうしようもないことでも発信したり
発表したりすると、色んな人たちと話すきっかけができておすすめです。
地域でやってるPerlのコミュニティ、Hachioji.pmやChiba.pmはとてもフランクな場で
Perlじゃないことを話している人も多いので、何かを発表してみる
というチャレンジをするのに最適な環境だと思います。
やらないことや、冷めること、諦めることに理由を付けるのは簡単なので、
何も持てるものはなくても現状に抗ってみるってことが大切なのかな、
と思う今日このごろです。
前夜祭   らすた麺、麺硬め、ライス小
 1日目   pushし損ない。
ラーメン、ノリまし、麺硬め、ライス中
 2日目   ラーメン、ノリまし、麺硬め、油少なめ、ライス中</description>
    </item>
    
    <item>
      <title>fluent-plugin-cloudwatch 1.2.4 release</title>
      <link>https://blog.kenjiskywalker.org/2013/09/25/fluent-plugin-cloudwatch-1-2-4/</link>
      <pubDate>Wed, 25 Sep 2013 23:06:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/25/fluent-plugin-cloudwatch-1-2-4/</guid>
      <description>https://rubygems.org/gems/fluent-plugin-cloudwatch リリースしました。
CloudWatchのAPIが、値なしでレスポンス返してくることはよくあったのですが、
リクエストに対してレスポンスが取得できずに詰まってしまう現象があり、
その解決策としてtimeoutを追加しました。
同現象でお悩みの方はバージョンアップをお願いいたします。
 本件でアドバイスを頂いたfujiwaraさん有難うございます。
 また、td-agentのversion 1.1.17から正式にconfigtestが導入され
設定に誤りがあった場合、エラー内容が出力され、
reload、およびrestartが走らないようになっています。
この変更により、運用中の設定ファイルの更新作業も楽しく行えるかと思います。
合わせてアップデートをおすすめいたします。
@repeatedly++</description>
    </item>
    
    <item>
      <title>Text::Xslateで配列</title>
      <link>https://blog.kenjiskywalker.org/2013/09/22/xslate-array/</link>
      <pubDate>Sun, 22 Sep 2013 13:30:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/22/xslate-array/</guid>
      <description>配列の要素数と配列の中身を渡したかっただけだったのに
2時間ぐらい時間つかいました。
\@hogeを@hogeで渡してたからだった。
#!/usr/bin/env perl use strict; use warnings; use utf8; use 5.010; use Text::Xslate; use Data::Section::Simple; my @hoge = qw/foo bar baz hage/; my $vpath = Data::Section::Simple-&amp;gt;new()-&amp;gt;get_data_section(); my $tx = Text::Xslate-&amp;gt;new(path =&amp;gt; [$vpath]); my $template = $tx-&amp;gt;render(&amp;quot;template.tx&amp;quot;, { hage =&amp;gt; \@hoge } ); printf $template; 1; __DATA__ @@ template.tx : for $hage -&amp;gt; $item { item is &amp;lt;: $item :&amp;gt; Number is &amp;lt;: $~item.index :&amp;gt; : }  ちなみにRubyだと</description>
    </item>
    
    <item>
      <title>本番環境でのserverspecの運用方法</title>
      <link>https://blog.kenjiskywalker.org/2013/09/20/serverspec-with-cron/</link>
      <pubDate>Fri, 20 Sep 2013 02:18:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/20/serverspec-with-cron/</guid>
      <description>ミドルウェアの管理はchefを使用している サーバへのデプロイはcapistranoを使用している   上記2点が当てはまる場合、serverspecの使い方として
 Testing #chef Cookbook by #serverspec #devops / さよならインターネット serverspecでchefのjsonを読み込む / さよならインターネット serverspecをJenkins氏で回す場合について / さよならインターネット
  上記エントリーを参考にして頂ければchef + serverspecである程度の
インフラストラクチャの構築とテストが行えるかと思います。
また、こちらのエントリーのように、chefのrecipeからserverspecのテスト自体を
生成してしまうという素晴らしいアイデアもあります。最高ですね。
Chef のレシピから serverspec のテストを自動生成する chef-serverspec-handler という gem を作ってみた で、結局使えるのはわかったのですが、どのように運用すべきか
というところは各所で試行錯誤中かと思います。
一例として、基礎的な内容ではありますが、現在試している内容を
記載してみようと思います。
前提条件  capistranoを実行するサーバは、対象の全サーバのrootアカウントに
鍵認証でノーパスワードでログインが可能である
 chefをcapistranoでdeploy時にテスト capistranoの設定にserverspecの項目を増やすことで
chef-soloなどが実行された後に、serverspecが実行されます。
これは台数が多いと時間が結構かかるので良し悪しがあるかと思います。
 desc &amp;quot;run serverspec&amp;quot; task :run_serverspec do `cd /root/chef/ ; rake` end  cronで定時実行 /etc/cron.d/serverspec
0 */1 * * * root cd /root/chef/ ; rake 1&amp;gt; /dev/null  正常終了であればログを破棄、エラーが出力された際には</description>
    </item>
    
    <item>
      <title>ログファイルをS3にバックアップする</title>
      <link>https://blog.kenjiskywalker.org/2013/09/20/logfile-backup-to-s3/</link>
      <pubDate>Fri, 20 Sep 2013 00:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/20/logfile-backup-to-s3/</guid>
      <description>デイリーのログファイルをS3へバックアップしたいという事案はよくあると思います。
一つの例として私の方法を載せますので、よりよい方法などあれば教えて頂きたいです。
backup dir /var/log/backup/nginx/YYYYMMDD/
/var/log/backup/app/YYYYMMDD/
backup file /var/log/backup/nginx/20130918/access.20130918-00.log.gz /var/log/backup/nginx/20130918/access.20130918-01.log.gz /var/log/backup/nginx/20130918/access.20130918-02.log.gz
&amp;hellip;
/var/log/backup/app/20130918/app.20130918-00.log.gz /var/log/backup/app/20130918/app.20130918-01.log.gz /var/log/backup/app/20130918/app.20130918-02.log.gz
&amp;hellip;
上記ディレクトリに、それぞれ
nginx、アプリケーションのログがあるとします。
nginxのログはtd-agentによって
&amp;lt;store&amp;gt; type file_alternative time_slice_format %Y%m%d-%H path /var/log/backup/nginx/access output_data_type attr:msg localtime output_include_time false &amp;lt;/store&amp;gt;  /var/log/backup/nginx/access.20130919-00.log /var/log/backup/nginx/access.20130919-01.log /var/log/backup/nginx/access.20130919-02.log
このように吐き出され、それを日付が変わったのち
#!/bin/sh # set -e DATE=`date --date &#39;1 days ago&#39; +%Y%m%d` BASE=&amp;quot;/var/log/backup&amp;quot; for type in nginx app; do DIR=&amp;quot;${BASE}/${type}/${DATE}&amp;quot; mkdir &amp;quot;${DIR}&amp;quot; mv ${BASE}/${type}/*${DATE}*log &amp;quot;${DIR}&amp;quot; nice gzip --fast ${DIR}/*log done  こちらのアーカイブスクリプトによって
/var/log/backup/nginx/YYYYMMDD/
というディレクトリを作成し、その配下へ昨日分のログファイルをgzip化し退避します。</description>
    </item>
    
    <item>
      <title>imayaro-bot</title>
      <link>https://blog.kenjiskywalker.org/2013/09/19/imayaro-bot/</link>
      <pubDate>Thu, 19 Sep 2013 15:55:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/19/imayaro-bot/</guid>
      <description>げんきだしてbot / すぎゃーんメモ
類似品つくらせてもらいました。
@kenjiskywalker いますぐやりましょう！
&amp;mdash; imayaro_bot (@imayaro_bot) September 19, 2013 
 https://github.com/kenjiskywalker/imayaro-bot https://twitter.com/imayaro_bot
  やりたいことを今やろう！って気概になると思います。</description>
    </item>
    
    <item>
      <title>ビンディングペダルにした</title>
      <link>https://blog.kenjiskywalker.org/2013/09/18/dzr-spd/</link>
      <pubDate>Wed, 18 Sep 2013 23:20:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/18/dzr-spd/</guid>
      <description>SPECIARIZED ALLEZ COMPACT 2010 というロードバイクに載っているのですが、今までは
Power Gripsというものを使っていたのですが
一度は試してみようということで、ビンディングペダルに換装してみました。
買ったもの  SHIMANO(シマノ) PD-A530 シルバー ペダル 片面SPD DZR　midnight
  結果的には普段履きの靴としてもイケるので、SPDペダルは両面でもよかったなって感じです。
街乗りでもそこそこ面白いけど高速巡航の時の爽快感が全然違う感じです。</description>
    </item>
    
    <item>
      <title>golang on GAE で軽いものを取り敢えずつくる</title>
      <link>https://blog.kenjiskywalker.org/2013/09/18/temple-kun/</link>
      <pubDate>Wed, 18 Sep 2013 22:16:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/18/temple-kun/</guid>
      <description>http://temple-kun.appspot.com/ IPアドレス返すだけのヤツ。
元ネタはこれ。
http://ifconfig.me/
本家のifconfig.meはUserAgent見て返す値変えてるんだけど取り敢えず。
手順は
the Go Getting Started Guide / google app engine
ファイルのアップロード自体は
Python アプリケーションのアップロード、ダウンロード、管理 / Google App Engine
に書いてあるようにappcfg.py update myapp/でイケる。
gitでもdeployできるけど
Using Git and Push-to-Deploy / Google App Engine
Request failed because the app binary was missing. This can generally be fixed by redeploying your app.
というようにエラーになってしまって上手く行かなかった。
やり方が悪いのだと思う。この辺は改めて調べたい。
{% gist 6609648 address-check.go %}
{% gist 6609648 local-address-check.go %}
fprintfとかprintlnとか10年ぶりぐらいに見た。
プログラミング初心者だけどすぐ動いてくれるので面白かった。
ドキュメントもシンプルに載ってて簡単に試せて有り難い。
http://golang.org/pkg/net/http/
プログラミング面白いのでちまちま色々つくって行くの楽しい。</description>
    </item>
    
    <item>
      <title>「UNIXという考え方」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/09/13/the-unix-philosophy/</link>
      <pubDate>Fri, 13 Sep 2013 00:02:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/13/the-unix-philosophy/</guid>
      <description>UNIXという考え方―その設計思想と哲学 / @soh335 memo
面白くないだろうなと思って読んだけど面白かった。
ただ時代背景をちゃんと理解しないと何言ってんだオッサンみたいになる。
移植性の話でシェルスクリプトが礼賛されてるけど
今だとクロスコンパイルの効くgolangが良いと思う。
UNIXというか、Linuxを使ってると、入力コマンドをたった1byte間違えただけで
OSが吹っ飛んだり、ちょっと間違えた時に昔の状態に戻れないの
もしかしたら何十年後かにはそんなこともあったね。みたいな話になってるかもしれない。
コマンドの成否をOSがフォローするよりも、バージョン管理システムみたいに
そのコマンドによってファイルシステム上のファイルに変更があった場合、
コマンド実行以前の状態に戻す。みたいなのできたら最高だと思う。
シェルスクリプト、とても便利でsystem()とかecho ~のように
外部コマンド呼び出さなくても良いのが利点だけど、
テストするのに毎回echo &amp;quot;command&amp;quot;みたいにprint debugぐらいしかできなくて
石器時代の代物にはかわりないと思う。
けど、その辺はわりかしどうでもよくてこの本の面白かったところは他にあった。
スモール・イズ・ビューティフル プログラミング初心者なので、ゴリっとしたでかいコード見ると
おお、すげぇ。。。って思うけど、実際は目的に対して少ないコードが良いし
行き着く先は無刀の境地みたいに、1行もコード書かないで目的が達成されるのが最高で
プログラムを書く場合に、量は少なくシンプルに、読んでわかりやすいコードを目標にすべきなんだ。
ひとつのプログラムにはひとつのことだけさせる ひとつのメソッドで色んな機能盛り込まない的な話だ。
できるだけ早く試作を作成する アジャイルだ。
ソフトウェアの梃子を使う 先人が書いたコード、拝借できるものは拝借した方が効率が良いって話だ。
対話的プログラムの危険性 おしゃべりなプログラムは例外発生させた時にわけわからん動作したりするから
最低限の機能にすべきって話だ。
感想 色々面白いところはあったけど、lsのコマンドオプションの多さの問題点や、
100％を完成としないで90%で完成とした方が良いみたいなことは昔から言われていたんだ。
っていうことを知れて面白かった。
本書の中の抜粋なんだけど「人月の神話」に
「開発プロジェクトがある程度進行した段階でプログラマを追加投入すると、完成は早まらずむしろ遅れる」
っていうことが書いてあるらしく、電車の中で笑ってしまった。</description>
    </item>
    
    <item>
      <title>「マン・オブ・スティール」見た</title>
      <link>https://blog.kenjiskywalker.org/2013/09/12/manofsteal/</link>
      <pubDate>Thu, 12 Sep 2013 09:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/12/manofsteal/</guid>
      <description>クリストファー・ノーラン関わってるなら
ダークナイトっぽい仕上がりだろヒャッホー！！！って見に行ったけど
痛快アクション映画だった。
多分何割か帰りに消化不良でダークナイト借りてると思う。</description>
    </item>
    
    <item>
      <title>自宅ルータをVyattaにして快適になった</title>
      <link>https://blog.kenjiskywalker.org/2013/09/10/vyatta-ubuntu/</link>
      <pubDate>Tue, 10 Sep 2013 23:39:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/10/vyatta-ubuntu/</guid>
      <description>市販のルータ兼無線アクセスポイント君が
2日に1回再起動しないとAirPlayできなくなってしまったので
この際自宅のネットワーク環境を一新すべく
Vyattaを導入した。その際のメモ。
参考URL  自宅ルータをVyattaに移行しました - IT 東京 楽しいと思うこと Vyatta_QuickStart_R6.1_v02_1.pdf  環境  Ubuntu: 12.04.3 LTS (KVM HOST) Vyatta: VC6.6R1  ネットワーク 買ったもの 追加NIC用に「Intel Gigabit CT Desktop Adapter EXPI9301CT」
無線LAN用に「PLANEX FFP-PKA04D」
スイッチは前職で頂いた8ポートのスイッチングハブを利用
構築 ブリッジのインタフェースを２つつくる  eth0 Internal eth1 External  /etc/network/interfaces auto lo iface lo inet loopback iface eth0 inet manual iface eth1 inet manual auto br0 iface br0 inet static address 192.168.0.3 network 192.168.0.0 netmask 255.255.255.0 broadcast 192.</description>
    </item>
    
    <item>
      <title>やり残しハッカソン#2 行って HappyHackingKeyboard買った</title>
      <link>https://blog.kenjiskywalker.org/2013/09/01/happyhackingkeyboard/</link>
      <pubDate>Sun, 01 Sep 2013 16:32:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/09/01/happyhackingkeyboard/</guid>
      <description>やり残しハッカソンがあったので鎌倉に行ってきた。
８月の最後の日ということもあり、鎌倉へ向かう電車の中は
ワイワイしていた。
 灯りというお店、ひさいち君がアジフライ食べるって言ってて
アジフライ最高だから最後まで迷ったけど唐揚げにした。
唐揚げ、２ピースと３ピースがあって、３ピースいくと
午後何もできなくなるぐらいの量なので、
うぉオン 俺はまるで食べ盛りの男子高生だ。っていうテンションじゃないと
なかなかチャレンジできない。味は最高。生姜が効いてて本当に最高。
隣りのおばちゃんがホタテ丼食べてて、カーッ！って言ってた。
鎌倉に行ったら是非食べてもらいたいお店だ。
やり残しハッカソン、遂に禁断のRubyMotionをやるか！って思ったけど
Vimだと補完があんまり上手くできなくて、Hello Motion!!って
表示させて終わった。
本当はMzcsっていう
ZABBIXに登録されているグラフを一覧で出すヤツの
クソコードのリファクタリングしようと思ったんだけど
自宅サーバをUbuntuに変えたおかげで色々入れなおしてたら終わった。
KVMで立ち上げるまでは自分のブログとか参考にしてスラスラいけて
昔のオレ最高〜って言ってたんだけどsshだけできなくて？？？ってなってた。
原因は接続元のsshのポート変更していて、
その変更したポートで接続しようとしていたのが原因だった。
デバッグログを見るのサボると大抵こういうどうしようもないところで悩む。
 UbuntuでTimeMachineのバックアップ先にする Subsonicを使えるようにする AirVideoを使えるようにする UbuntuにKVM入れてCentOS動かしてサーバっぽいのはそいつにやらせる CentOSにZABBIXサーバ入れる Ubuntu - さくらVPS - CentOS(KVM) - Mac をVPNで繋ぐ さくらVPSをCentOSからZABBIXで監視する 定期バックアップのリファクタリング   とかは２日かかったけどできてよかった。
結局Mzcsのリファクタリングできてない。
そもそもMozcsと名前似てるから名前変えた方が良い。
 あとハッピーハッキングキーボードかった。
元々ずっとRealForce使ってて、RealForce、すごすぎて
サササ〜ってキーボードの上なぞるだけで入力できて
最高だったんだけど、最近やたらtypoが多くなってきてて
ドライビングアシストモードが効きすぎて運転が下手になる
感覚が近いんだけど、ちょっとHHK試してみたくて買ってみた。
買ってみたっていっても25kもしてめちゃくちゃ高いんだけど
これで少しでも仕事とかtypo減るならと思ってる。
RealForceとの違いは、１番大きいのは```のキーが逆っていうところぐらいで
矢印とかfnキー押しながらは多分すぐ慣れると思う。
キーボード変えるとちょっと引越しっぽい感覚がして良い。
 夕飯の海鳴も最高だった。鎌倉は最高だ。
HHKでタイピングするの面白くて無駄に長文になった。</description>
    </item>
    
    <item>
      <title>パシフィック・リム観た</title>
      <link>https://blog.kenjiskywalker.org/2013/08/31/pacificrim/</link>
      <pubDate>Sat, 31 Aug 2013 11:54:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/31/pacificrim/</guid>
      <description>AV無理っていうアダルトビデオのシリーズものの題名に似てるとおもった。</description>
    </item>
    
    <item>
      <title>plenvとperl-buildを走らせるchefのcookbookを書いた</title>
      <link>https://blog.kenjiskywalker.org/2013/08/31/plenv-chef-cookbook/</link>
      <pubDate>Sat, 31 Aug 2013 03:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/31/plenv-chef-cookbook/</guid>
      <description>perl-buildまでやるやつ書いた。
参考元：plenvによるPerl環境を構築するchefのオレオレサンプルレシピ - hirobanex.net
https://github.com/kenjiskywalker/mychefrepo/tree/master/site-cookbooks/plenv
これでchef使って一撃でPerlの環境用意できます。</description>
    </item>
    
    <item>
      <title>AWSのAutoScalingで立ち上がってきたVPC内のEC2インスタンスに強制的にEIPを付与する</title>
      <link>https://blog.kenjiskywalker.org/2013/08/27/eip-set-autoscaling-vpc/</link>
      <pubDate>Tue, 27 Aug 2013 23:50:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/27/eip-set-autoscaling-vpc/</guid>
      <description>前提条件  グローバルにアクセスできる管理サーバが一台ある
 対象のVPCにアサイン可能なEIPがある(AssociateされていないEIPがある)  という前提条件が成立していれば、管理サーバで
{% gist 6354555 %}
このようなスクリプトを
*/1 * * * * root /root/set_eip.sh 2&amp;gt; /dev/null  と噛ましておけば、EIPが付与されていないインスタンスを発見し次第
強制的にEIPをアサインすることができます。
2&amp;gt; /dev/nullとかやってるとイスが飛んできそうなものですが
1分毎に実行していると、内部DNS結構頻繁に取りこぼしたりするので闇に葬りました。
成功した場合はADDRESS i-XXXXXXXX eipalloc-XXXXXXXX eipassoc-XXXXXXXX
という内容のメールがとんできて、お、アサインされたのか。と気付けます。
CloudWatchのAutoScaling発動トリガーで何かしらの通知設定をされているかと思うので
まずその通知でAutoScalingの発火を確認し、
上記EIPアサイン通知でインスタンスの起動を確認。のようなこともできます。
【AWS発表】 VPC内のパブリックIPアドレスの取い扱いがより柔軟に
ということを頑張らなくてもそのうち上記Public IPがAutoScalingにも対応すると思う。
ところでEIPとPublic IPの違いって何なんですかね？</description>
    </item>
    
    <item>
      <title>GitHubのIRC hookの設定</title>
      <link>https://blog.kenjiskywalker.org/2013/08/27/github-issue-irc/</link>
      <pubDate>Tue, 27 Aug 2013 18:43:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/27/github-issue-irc/</guid>
      <description>github の irc hook に幾つかの event type が追加されました - @soh335 memo
GitHubのissueやpull reqにcommentが付いたらIRC Hoooks経由で通知されるように設定した - Glide Note
pull_request_review_commentを追加しても来ないなーって思ってたら
commit_commentを有効にしないとダメだった。
各位注意されたし</description>
    </item>
    
    <item>
      <title>GitHub Yokohama Drinkupに遊びに行ってきた</title>
      <link>https://blog.kenjiskywalker.org/2013/08/22/github-drinkup-yokohama/</link>
      <pubDate>Thu, 22 Aug 2013 23:17:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/22/github-drinkup-yokohama/</guid>
      <description>GitHub Yokohama Drinkup @soh335と、@handlenameと行ってきた。
お店の前でモジモジしてたらお店の人に中どうぞ。って言われて
中入ってモジモジしてたら写真の真ん中で座ってる人にヤア！って声かけられて
@soh335がbeer!って言って、どうぞどうぞ。って言ってくれた。
さて、どうするかな。って見回してたら@sora_h君と思われる人物に
ワッペン付けないと無料にならないよ。って教えてもらって
ありがとう！って言ってビール飲んだりサーモンとかパエリアくったりした。
GitHub社の人たくさん来てたのに
あんまり人いなくてもったいなかった。
もったいなかったって言っても
内輪とグリーの人とかと話してただけで
GitHub社の人と話さなかった。
英語で話せるようになった方が良いなって思った。
話せる話せないじゃなくて話すか話なさないかだけど。
ギットハブいつも使ってるよ、ありがとう。
今日は🍻ごちそうになるね！ぐらいのことは言いたいもんスね。
 I really enjoyed the beer!
Thank you GitHub!</description>
    </item>
    
    <item>
      <title>メモリの相性</title>
      <link>https://blog.kenjiskywalker.org/2013/08/21/memory/</link>
      <pubDate>Wed, 21 Aug 2013 21:06:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/21/memory/</guid>
      <description>メモリの相性とか都市伝説だと思っていたけど
元同僚のミャンマー人の人からもらった新品のADATAのメモリ
差し込むとうんともすんとも言わなくなった。
メモリほしいなー程度だったんだけど
そのもらった4GB x2が動かなかったおかげで
今刺さってるCFDのメモリ4GB x2と全く同じもの買った。
これで認識しなかったら泣いちゃう。</description>
    </item>
    
    <item>
      <title>EC2をTerminateした時にEBSも削除してほしい</title>
      <link>https://blog.kenjiskywalker.org/2013/08/20/ebs-terminate-remove/</link>
      <pubDate>Tue, 20 Aug 2013 19:35:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/20/ebs-terminate-remove/</guid>
      <description>@kenjiskywalker DeleteOnTerminationをTrueにすると、Instance がTerminationしたときに一緒に消え去ってくれますよー
&amp;mdash; con_mame (@con_mame) August 19, 2013 
AWSで悩みがあったら大体@con_mameさんが解決してくれるんだ。
お会いしたらbeerをおごりたい。
先日のAuto Scalingの検証時に、インスタンスがTerminateされても
利用されたEBSがうんちみたいに残ってしまうことがあった。
残したくない場合は、AMI作成時に
上記のようにDeleteOnTerminationを有効化すれば良い。
Auto ScalingでDeleteOnTerminationを有効化したAMIを指定すれば
EC2のインスタンスがTerminateされた時に、同時にEBSボリュームも削除してくれる。
便利だ。</description>
    </item>
    
    <item>
      <title>便利キーボード情報です</title>
      <link>https://blog.kenjiskywalker.org/2013/08/18/mini-keyboad/</link>
      <pubDate>Sun, 18 Aug 2013 19:41:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/18/mini-keyboad/</guid>
      <description>外出時、iPad miniとかで対応する必要がある場合
これあればまず困らない。
サーバで軽く作業したい場合
これがあればマウスとかいらないのでまず困らない。
おすすめの品です。</description>
    </item>
    
    <item>
      <title>「終戦のエンペラー」みた</title>
      <link>https://blog.kenjiskywalker.org/2013/08/18/emperor/</link>
      <pubDate>Sun, 18 Aug 2013 19:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/18/emperor/</guid>
      <description>http://www.emperor-movie.jp/
面白かった。アヤのところいらないだろって思ったら
おじいちゃんが&amp;rdquo;情熱的な愛のエピソードがあるといいね&amp;rdquo;ってと言って
ってあったから、それは仕方ないなって思った。
宮城事件とか知らない人多いと思うし
一度「日本のいちばん長い日」見ておくと良いと思う。
当時の狂気な感じが伝わってくる凄みのある映画だ。
あと多分、現代の日本人の家行ってもああいう感じでお茶出てこないと思う。</description>
    </item>
    
    <item>
      <title>AWSのVPCでAuto Scalingを試した記録</title>
      <link>https://blog.kenjiskywalker.org/2013/08/14/aws-vpc-autoscaling/</link>
      <pubDate>Wed, 14 Aug 2013 17:41:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/14/aws-vpc-autoscaling/</guid>
      <description>Auto Scaling ELBにぶら下がっているVPC内のEC2のインスタンスのCPU使用率が
n%以上になったらインスタンス増やして負荷を分散する。
普段AWSはGUIでしか操作していない為
GUIが用意されていないAuto Scaling(以後:AS)を使うのは不安だった。
全体像が掴めればそんなに困ることはない感じだ。
大抵AWSの設定でハマるのはregionの指定のところだろう。
これはマニュアルやコマンドのhelpはregionの省略を止めるべきだと思う。
設定する必要のある項目 LaunchConfig  起動するAMIの指定 そのAMIを利用して起動するインスタンスタイプの指定 適応するセキュリティグループ名(VPCに適用するセキュリティグループ名) 対象のリージョン  AutoScalingGroup  ぶら下がるELBの指定 立ち上がった後のインスタンスの状態の確認方法(今回はELB) HelthCheckが走るまで待機する時間 &amp;gt; これを60秒とか短めに設定するとインスタンスが立ち上がる前にチェックが走って
&amp;gt; 間に合わなくてターミネイトされて起動してターミネイトされてという地獄みたいな状態になった 立ち上げるインスタンスを配置する予定のアベイラビリティゾーン Auto Scalingで立ち上げる最小インスタンス Auto Scalingで立ち上げる最大インスタンス 立ち上げるVPCのサブネット 対象のリージョン  ScalingPolicyを設定する  これはスケールアウト(インスタンス増加)とスケールイン(インスタンス減少)
の2つのパターンを作成する
  何台増加(減少)させるかの指定 typeがよくわからない 次にスケールするまでの待機時間(cooldown) 対象のリージョン  CloudWatch  アラートの設定   CPUUtilization が n分間 m% の使用率以上(以下)であったらアラートを発行
という設定を行う。このアラートがスケールアウト(スケールイン)のトリガーとなる
 設定していく LaunchConfig # 作成 $ as-create-launch-config ExampleLaunchSetting --image-id ami-XXXXXXXX --instance-type m1.small --region ap-northeast-1 --group sg-XXXXXXXX # 削除 $ as-delete-launch-config ExampleLaunchSetting --region ap-northeast-1 # 確認 $ as-describe-launch-configs --region ap-northeast-1   --image-id ASで利用するAMI --instance-type ASで起動するEC2のインスタンスサイズ --group 起動するインスタンスに適用するSecurityGroup  AutoScalingGroup # 作成 $ as-create-auto-scaling-group ExampleScaleOutGroup --launch-configuration ExampleLaunchSetting --load-balancers example-vpc-elb --health-check-type ELB --grace-period 300 --availability-zones ap-northeast-1b,ap-northeast-1c --min-size 1 --max-size 2 --desired-capacity 1 --vpc-zone-identifier subnet-XXXXXXXb,subnet-XXXXXXXc --region ap-northeast-1 # 削除 $ as-delete-auto-scaling-group ExampleScaleOutGroup (--force-delete) --region ap-northeast-1 # 確認 $ as-describe-auto-scaling-groups --region ap-northeast-1   --launch-configuration 上記で作成した起動設定 --load-balancers ELB配下にぶら下げるので対象のELBを指定 --health-check-type ELB以外のチェック方法調べてない --grace-period ヘルスチェックをはじめるまでの時間 &amp;gt; これを60秒とか短めに設定するとインスタンスが立ち上がる前にチェックが走って &amp;gt; ターミネイトされて起動してターミネイトされてという地獄みたいな状態になった --availability-zones ASで起動させるインスタンスを置くAZを指定(複数可) --min-size ASの最小インスタンス数</description>
    </item>
    
    <item>
      <title>お盆とは</title>
      <link>https://blog.kenjiskywalker.org/2013/08/13/obon/</link>
      <pubDate>Tue, 13 Aug 2013 23:19:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/13/obon/</guid>
      <description>お盆  一般に仏教の行事と認識されているが、仏教の教義で説明できない部分も多い。
古神道における先祖供養の儀式や神事を、江戸幕府が庶民に強いた檀家制度により
仏教式で行う事も強制し、仏教行事の「盂蘭盆」（うらぼん）が習合して
現在の形が出来たとされる
 古神道   仏教、儒教、道教、渡来以前の日本の宗教。原始神道。 江戸時代の復古神道の流れを汲み、幕末から明治にかけて成立した神道系新宗教運動。
仏教、儒教、道教、渡来以前の日本の宗教を理想としている。 通常はこちらを古神道という。
神道天行居や出雲大社教、神理教、古神道仙法教などの教団が存在している。 大本などに影響を与えた。   盂蘭盆  盂蘭盆会（うらぼんえ、ullambana、उल्लम्बन）とは、安居（あんご）の最後の日、
旧暦7月15日を盂蘭盆（ullambana）とよんで、父母や祖霊を供養し、
倒懸（とうけん）の苦を救うという行事である。
これは『盂蘭盆経』（西晋、竺法護訳）『報恩奉盆経』（東晋、失訳）などに説かれる
目連尊者の餓鬼道に堕ちた亡母への供養の伝説による。
 お盆のいわれと由来
［盂蘭盆会・うらぼんえ］とは
インドのサンスクリット語のウラバンナ（逆さ吊り）を漢字で音写したもので、 転じて
「逆さまに釣り下げられるような苦しみにあっている人を救う法要」という意味です。
目連伝説  この行事は本来インドのものではなく、仏教が中国に伝播する間に起こってきたものであろう。
現在、この「盂蘭盆会」のよりどころとしている『盂蘭盆経』は、
『父母恩重経』や『善悪因果経』などと共に、中国で成立した偽経であると考えられている。
したがって、本来的には安居の終った日に人々が衆僧に飲食などの供養をした行事が転じて、
祖先の霊を供養し、さらに餓鬼に施す行法（施餓鬼）となっていき、それに、
儒教の孝の倫理の影響を受けて成立した、目連尊者の亡母の救いのための
衆僧供養という伝説が付加されたのであろう。
 大乗仏教の意味の分からない話ばかりだ。
シッダールダが脇から生まれたとか、甘茶の雨が降ったのだの
四万六千日の日に通えば四万六千日毎日通ったのと同じ効能があるだの。
 「夏の修行が終った7月15日に僧侶を招き、
多くの供物をささげて供養すれば母を救うことが出来るであろう」
 仏像をつくるな、崇拝するな。と願ったシッダールダの想いは叶わず
大乗仏教のおかげで現在もこんな感じによくわからない由来とか効能を持ちながら
世界中でありがたがられたりしてる。
由来がよくわからないお盆(盂蘭盆会)だけど、先祖供養は良いことだと思う。
じーさんばーさんの墓参りに行きたい。</description>
    </item>
    
    <item>
      <title>MySQLのスレーブサーバを別サーバに移設する時に注意すること</title>
      <link>https://blog.kenjiskywalker.org/2013/08/12/mv-mysql-slave-server/</link>
      <pubDate>Mon, 12 Aug 2013 19:20:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/12/mv-mysql-slave-server/</guid>
      <description>移設元のスレーブサーバのMySQLが停止できる場合
移設先のスレーブサーバで
 CREATE DATABASEして
 master.infoからreplユーザ作成して dumpファイルをバックアップサーバから持ってきて〜
  などの作業を行わなくてもSLAVE STOPし
MySQLを落とし変更が走らない状態にして
MySQLのディレクトリを移設先にrsyncで渡した方が手間も処理速度も遥かに速い。
ただし、移設先でMySQLを起動してSLAVE STARTをすると
 Could not find target log during relay log initialization rellay.log
 このようにrelay_logが見つからないよ。というエラーが発生する。
16.2.2.1. The Slave Relay Log / MySQL 5.1 Reference Manual 
上記のようにホスト名が変わった場合にrelay_logのindexを修正する必要がある。
これでレプリケーションが再開できるはずだ。
オペレーションの手間も少なく効率的なので、移設元のスレーブサーバの
MySQLが一時的に停止可能であれば、rsyncでデータを持っていくのが
効率的ではないでしょうか。
移設先のサーバの利用可能なメモリ容量により
innodb_buffer_pool_sizeなどのチューニングが必要になるので
設定ファイルなどは注意したい。
また、スレーブサーバの増設などの場合は、server-idの変更漏れにも
気を付けたい。取り敢えず移設でもserver-id変えておくのが吉だ。
毎回同じようなハマり方をする自分の為への戒めも兼ねた戒メモ
追記(2013/08/13) relay_logとか暗黙のデフォルトでホスト名が使われるところは明示的に指定しておいたほうがハマりにくいですよ / “MySQLのスレーブサーバを別サーバに移設する時に注意すること - さよならインターネット” http://t.co/IVPKvyxXWi
&amp;mdash; Ryuta Kamizono (@kamipo) August 12, 2013 
kamipoさんのこちらのmy.cnfが参考になる。
kamipoさん、ありがとうございます。</description>
    </item>
    
    <item>
      <title>式年遷宮Infrastracture</title>
      <link>https://blog.kenjiskywalker.org/2013/08/11/shikinen-sengoo-infrastracture/</link>
      <pubDate>Sun, 11 Aug 2013 15:19:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/11/shikinen-sengoo-infrastracture/</guid>
      <description>Immutable Infrastracture について / apatheia.info
こちらのエントリーを読んでふと思いついたので書きました。
式年遷宮 / 伊勢神宮
今年、伊勢神宮は20年に一度の式年遷宮の年なのだが、
このシステム、今のインターネットのインフラストラクチャの
モデルとして結構参考になるのではないだろうか。
さすがに20年間無停止で動いているサーバは
その存在自体が重要文化財になってしまうが、例えば、１つのシステムを
ロードバランサ、スイッチ、サーバ、ミドルウェア、ログ集約サーバなど
完全に冗長化しておき、１週間毎に冗長化されたシステム、A、Bをそれぞれ入れ替える。
このアーキテクチャを採用した場合、
アプリケーションの大規模な改修が発生した場合にも
スタンバイ側となっているインフラストラクチャ側で
スナップショットのようなものを取得しておき、テストを行い、
スナップショット時に戻れば、実サービスと同じ環境でテストが行える。
アクティブ側となっているインフラストラクチャのハードに
何かしらの問題が発生した場合、スタンバイ側のインフラストラクチャへ
切り替えることにより、対障害性能を向上することが可能になる。
また、アクティブスタンバイ化されたシステムは、なかなかどうして
テスト時と同じ結果になってくれず、サービスダウンした際に
フェイルオーバーしないことがよくある。
しかし、この式年遷宮インフラストラクチャを採用すれば
定期的に切り替えが発生するので、切り替え時にエラーが発生した場合にも
発見が早くなり、結果的にシステムそのもののテストという側面を持ち、
障害発生時に高確率でフェイルオーバーが成功するのではないだろうか。
問題となるのは、切り替えそのものの正確性の確保、一つのシステムを冗長化するコスト、
切り替え前、切り替え前後の監視対象の切り替え、切り替え時のログの欠落をなくす工夫、
切り替え時にサービスに影響を及ぼさない工夫など、実現する為には様々な困難はある。
とはいえ、機械を利用し利便性を向上してきた我々は
やはりその機械を運用するというそのものについても利便性を求め
職人の技、秘伝のタレなど閉鎖的な情報に頼ること無く、また、運用担当者が
毎日深い眠りに就けるよう、日々楽をする為の努力をしていきたいものであります。</description>
    </item>
    
    <item>
      <title>リーダブルコード読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/08/03/art-of-readable-code/</link>
      <pubDate>Sat, 03 Aug 2013 14:18:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/08/03/art-of-readable-code/</guid>
      <description> 本読むより人のコード読んだ方が勉強なるけど
こういう所作の話全然知らないから面白かった。
自分メモ  ワンラインでシュッっとさせてわかりづらくなるならそれは止めた方が良い 汎用的な単語を使うのを止める。直接的で何をしているのかわかりやすい単語を使う
hosts,status,get,list,この辺汎用的な名前付けがちなのでわかりやすいようにする スコープが小さければx,yとか使っても良いけど目視で追い切れないところで使うと追う手間が発生する コメントで補う前にコードや変数名をよしなにできないか考える ループロジックは簡潔に、かつそれぞれのメソッドがわかりやすいように  </description>
    </item>
    
    <item>
      <title>serverspecでchefのjsonを読み込む</title>
      <link>https://blog.kenjiskywalker.org/2013/07/31/serverspec-attribute/</link>
      <pubDate>Wed, 31 Jul 2013 09:48:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/31/serverspec-attribute/</guid>
      <description>  2013/12/25 update
 Testing #chef Cookbook by #serverspec #devopsの続きみたいなものですが
Chefのjsonファイルでフラグ立てたりしてると、そのフラグによって
テスト対象が変化する場合があるかと思います。
その場合、serverspecにはpropertyの機能があるのでそれを利用します。
spec/spec_helper.rb {% gist 6118553 spec_helper.rb %}
set_propertyの項目を追加します。
nodes/host.json {% gist 6118553 nodes_host.json %}
こんな感じでこのMySQLはSlaveですみたいなフラグがあって
cookbooks/mysql/templates/default/my.cnf.erb {% gist 6118553 cookbooks_mysql_templates_default_my.cnf.erb %}
こんなテンプレートがあったら
cookbooks/mysql/spec/is_slave_spec.rb {% gist 6118553 cookbooks_mysql_spec_is_slave_spec.rb %}
このようにproperty[&amp;quot;mysql&amp;quot;][&amp;quot;is_slave&amp;quot;]として値を利用することができます。
 specファイル、if ~ endで囲ってるのがモサいので、良案をお待ちしております
 </description>
    </item>
    
    <item>
      <title>2013年 宮古島で最高の夏情報</title>
      <link>https://blog.kenjiskywalker.org/2013/07/30/miyako-osusume/</link>
      <pubDate>Tue, 30 Jul 2013 23:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/30/miyako-osusume/</guid>
      <description>最近宮古島行ってきたのでおすすめ情報載せますね。
レンタカー 島１周するのに２時間もあれば周れるので、レンタカーおすすめします。
伊良部島行きたい場合はレンタカーに確認しておいた方が良いです。
沖縄本島と比べると日差しが全然違うので
歩いてとか移動するとだいぶつらいと思う。
お金あるなら毎回タクシーでも良いかもしれない。
１人ツール・ド・宮古島やるなら夏避けないと無理っぽい。
信号はほとんどないので優雅なドライブできておすすめです。
宿泊先 東急リゾートとか海の近くも良いけど
メシ屋が大量にある平良付近をおすすめします。
海の近くが良いとか思うかもしれないですが、
海岸自体はどれも小さくて、色んなところにあるので
朝起きたら海を見たい or ホテルで引きこもりメインの旅行
でなければ、利便性とかお店がたくさんある繁華街のホテルをおすすめします。
飯屋 菊栄食堂 ベーシックな宮古そばが500円で食べれるのでおすすめ。
バックパッカーみたいな人が悩んで肉そば頼んでて
肉、めちゃめちゃ乗っかってエッ！？ってなってた。
宮古島の人に聞いたら、宮古島の人は安くてたくさん食べたいんだって言ってた。
ハイサイ居酒屋 食べ飲み放題3000円っていうのがあって
いやー、これで食べ飲み放題3000円かーって言ってたべてて
肉ばっかりだったからサラダとかあります？って聞いて
あとで出すよ！って言われて待ってたら
餃子１２個乗っかったサラダ出てきて、？？？ってなって
え、これもですか？って聞いたら足りない？まだ出すよ？って言われて
大丈夫です。って言った。宮古島の質量を実感した夕飯だった。
シークワーサーサワーが絶品だった。
ここ以外のお店でもシークワーサーサワー飲んだけど
多分都内の沖縄料理屋の方が質が良いと思う。
最終日シークワーサーサワー飲みたくてまた行った。
まなつスパイスカフェ茶音間 オシャレ系カレー屋さん。スパイス効いてて美味しい。
宮古牛喜八 店員さんが面白い。閉店の時間だったけどボクシング最後まで見てた。
厚切りタンが美味い。
DOUG&amp;rsquo;S BURGER ダグズ・バーガー美味い。オニオンリングも美味い。コーヒーも美味かった。
元ライブドア社長の照井さんのご兄弟が経営されてるらしい。
ダグ氏、ずっとアメリカ人だと思ってた。
二枚屋 2000円で飲み食べ放題。バイキング形式で近くでとれるカツオが並んでたりした。
安くたらふく呑んで食う。ザ・宮古島スタイルのお店だった。
亜熱帯工房 宮古島 マンゴーつくってるところでマンゴージュース飲める。めちゃ美味い。
マンゴーのピクルスが絶品だった。
マリンスポーツ シュノーケル、ツアーとか使わないでも吉野海岸行けば
市が運営してる海の家で道具借りれて、目の前珊瑚だらけで魚いっぱいいるらしい。
やたら離島すすめてくるヤツ の気持ちわかった。海、大体貸し切り状態だったし
信号ほとんどなかったし、普段人がたくさんいるところでイライラしたり
インターネットとかでせかせかしてる意味何なんだろうとか
人にとっての幸せって何なんだろうとか考えるヤツの気持ちもわかった。
現地のヤンキーっぽい女の子のおすすめのお店 居酒屋しか知らないらしくて穴場とか知らないって言ってた。
ひとつおすすめされたお店行ったけど都内にあるような普通の店だった。
かわいい現地の女の子に声かけまくるの
カミさんに怒られるから気を付けた方がいい。
最高の夏 アイツらと行った宮古島の思い出、最高の夏</description>
    </item>
    
    <item>
      <title>「飢餓と戦争の戦国を行く」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/07/18/kiga-to-sensou/</link>
      <pubDate>Thu, 18 Jul 2013 22:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/18/kiga-to-sensou/</guid>
      <description>「七度の餓死に遇うとも、一度の戦いに遇うな」  1150年 ~ 1600年のデータ 応仁の乱前は3 ~ 5年に1回の割合で間欠的、集中的に飢饉と疫病が起きていた 応仁の乱後は2年に1回の割合で慢性的に飢饉と疫病が起きていた 天災の34%が旱魃、66%が長雨だった 「町にはぶらぶら遊んでいる人ばかりで、農民の姿は少ない。必死に耕している人もいるが、聞こえてくるのは飢民が食を乞う声ばかりだ。日本には人は多いが、飢人もまた多く、疫病で動けなくなっている人も多い。彼らはいたるところの路ばたに集まってすわり、通る人ごとに銭を乞うている。」  生命維持の習慣  鎌倉時代、飢饉が発寛喜の飢饉をうけて、幕府は時限的に飢民奴隷精度を設けた 内容は、飢饉の年に誰かがもし飢えた人を買い取って養えば、養育の功労として奴隷にしてもいい ただし人身売買は本来は国禁である 故に、これは飢饉の年だけの時限立法である 飢饉が去った後、売主が飢餓発生時に超安値で売った価格で買い戻そうとしても、それは無効である 売主と買主が双方合意しているのであれば、問題はない。など ある宣教師のメモ「父親たちは、極度の貧窮に迫られた際に、自分たちの子供を売る、という習慣を今でも持っている」 北条泰時の施策『吾妻鏡』寛喜三年三月十九日条所収の北条泰時奉書－追加法２０ / 我が九条 田麦に税をかけてはならぬ 二毛作が流行った頃、百姓の夏の麦作ばかりが倍増して、領主は空きの年貢がろくに取れなかった。制限しようとするも、百姓たちは聞く耳持たず。麦年貢を徴収しようとしても、百姓たちは言うことを聞かない 百姓たちは田麦に精を出し、水田の稲の作付けが遅れ、水不足になる。百姓たちは日照りが原因だと年貢減免を言い立てる。 &amp;lt;= 面白い  応仁の乱  応仁の乱の46年前に応永の大飢饉が発生する 翌年の春、都周辺の国々は深刻な飢餓と疫病に襲われる 周辺の国々から飢えた貧しい人々が難民となって京に殺到する 飢餓難民を救おうと、鴨川の五条の河原で仮小屋を設けて難民を収容し、粥の施しなどを行った。京にはまだ食料のゆとりはあった 粥を急に食べたのが命取りとなり、衰弱した人々の間には疫病も広がり、難民たちは尽く死んでいった 諸国の飢餓難民はまず山野、江河に食物を求めて殺到し、それも尽きると京に向かって物乞いの大きな奔流となっていった 食料生産地の村々が、大消費地の京より先に飢えた 難民たちの殺到で、ついには京も二次飢饉に襲われた 応仁の乱の24年前に嘉吉の大飢饉が発生する 「天下飢饉し、悪党充満す」といわれ、夜ごと高利貸しが襲われた 辺境の村が飢えると、生き延びるために京を目指し、時には高利貸しや富商を襲った 応仁の乱の20年前、台風、洪水、炎早による凶作、三日病や咳病流行る 徳政の土一揆起こる 応仁の乱の7年前、河内では畠山家の内戦が四年続いており、凶作と飢饉を加速させていた 寛正の大飢饉起こる。京には餓死者が山を成すほどであった 京は流入型飢饉とよばれる二次飢餓に襲われる ある禅僧は嘆く「諸国の炎早、連年の災い」 食の乏しい端境期の三月になると、餓死者は鴨川にあふれて流れをふさぐほどだった ある高僧曰く「去年は諸国が旱魃に襲われた。諸国ではお家騒動の戦乱が続き、領内の人は戦争難民、飢饉難民となり、京に流れ込んで餓死し、疫病まで広がっている。これは御成敗の不足、足利義政の政治が問題である」 飢饉発生時、金持ちは私財を投じ、難民は労働を施し、寺や橋、住宅をつくる事業モデルがあった 西芳寺では「ただ人に物を食わせ、何のなすことも無うては、その身のためにも悪い」と荒れた庭の修復作業を行い、労働に応じて食べ物を与えた 東大寺の再建を行った重源も同じように飢餓に苦しむ周防の人たちを雇い、食料と働き口を提供し、安く済ませることに成功している 足利義政の悪政の代表例である花の御所の復旧も、このモデルに沿ったものであったのではないか 何故生産者から先に飢餓難民になるのか。それは余剰分を都市へ分配しているのではなく、決められた作付けが強制され、それを上納することで村の生活の保証がされていた この偏った受給システムにより、生産地がまず飢え、生き延びるために富が集中していた首都を目指したのではないか 一揆も頻繁に発生していた。嘉吉の徳政一揆が有名である 足軽の発生。応仁の乱発生時、土一揆が消え、戦場となった都には足軽が大量に現れた 足軽とさえいえば、略奪も野放しであった 足軽は歴史的建造物も略奪の対象だった。その盗品を狙って商人が集まり、闇市が行われていた 寺宝を盗まれると、信者が闇市まで行き、買い取って寄付をしていた 足軽たちのルーツは周辺の貧民や浮浪民、また難民などであったのではないか。戦場の戦いは土一揆と同じ下克上の動きであり、第飢饉と過酷な搾取を生き延びてきた義憤の度合いが強く、故に富や物を盗むことに抵抗はなかったのではないか。という視点もある  奴隷売買  戦国時代になると、敵軍に攻められた村は奴隷狩りにあった 敵軍に攻められた村の村人は、衣類を身ぐるみ剥がされたり、田畑を荒らされたりした 女子供は強姦された。戦国時代、少年は男色の対象であったので、少女と同じように強姦の対象であった 大航海時代であったので、日本人が日本人の奴隷を売買し、島原からスペイン、ポルトガルの奴隷船に連れられマカオなどに売られていった スペイン人に買われた少女の奴隷は、性奴隷となった  村の城  このように、戦国時代に敵軍に捉えられると悲惨な待遇が待ち受けているので、村人たちは自衛手段を持っていた 敵が攻めてきた場合は、金品を穴や井戸などに隠し、領内の城へ逃げた。城には戦闘員が２割で、残りの８割は逃げてきた村人という状態をよく見た 裏山などに村の城と呼ばれる避難用のエリアを用意していた。用意していたとは言うものの、軽い井戸があるだけや、木々を切り倒したものぐらいで、屋根などはない 村の武装用に穢多・非人を雇っていた。 &amp;lt;= 差別対象として書かれていたが、差別対象になるのは江戸時代からなので、ここら辺の記述は要確認  後半雑になったけど、取り敢えず何で応仁の乱でそんなに神仏の類のものが壊れたのか</description>
    </item>
    
    <item>
      <title>chefの中身読んで、外部からrun_listを利用する</title>
      <link>https://blog.kenjiskywalker.org/2013/07/17/chef-run_list/</link>
      <pubDate>Wed, 17 Jul 2013 00:29:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/17/chef-run_list/</guid>
      <description>run_listを渡してるところを探した。
といってもほとんど@soh335が教えてくれた。さすが一流エンジニアだ。
/chef/lib/chef/run_list.rb
def expansion_for_data_source(environment, data_source, opts={}) case data_source.to_s when &#39;disk&#39; RunListExpansionFromDisk.new(environment, @run_list_items) when &#39;server&#39; RunListExpansionFromAPI.new(environment, @run_list_items, opts[:rest]) end end  ここが怪しかった。
/chef/spec/unit/run_list_spec.rb
ここ見たら
 describe &amp;quot;from disk&amp;quot; do it &amp;quot;should load the role from disk&amp;quot; do Chef::Role.should_receive(:from_disk).with(&amp;quot;stubby&amp;quot;) @run_list.expand(&amp;quot;_default&amp;quot;, &amp;quot;disk&amp;quot;) end it &amp;quot;should log a helpful error if the role is not available&amp;quot; do Chef::Role.stub!(:from_disk).and_raise(Chef::Exceptions::RoleNotFound) Chef::Log.should_receive(:error).with(&amp;quot;Role stubby (included by &#39;top level&#39;) is in the runlist but does not exist. Skipping expand.</description>
    </item>
    
    <item>
      <title>testing #chef cookbook by #serverspec #devops</title>
      <link>https://blog.kenjiskywalker.org/2013/07/13/serverspec-chef-cookbook/</link>
      <pubDate>Sat, 13 Jul 2013 13:04:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/13/serverspec-chef-cookbook/</guid>
      <description>serverspec use chef json file and cookbooks.
serverspec take run_list of host.json,
serverspec do test each cookbook_name/spec/any_test_spec.rb.
tools  serverspec chef  The configurations, please read at each document.
howto  chef cookbooks /root/chef/cookbooks/{foo}/recipes/default.rb /root/chef/cookbooks/{bar}/recipes/default.rb
&amp;hellip;
 serverspec file /root/Rakefile
/root/spec/spec_helper.rb
/root/spec/{host_a}/host_a_mysql_spec.rb # host a specific test /root/spec/{host_a}/host_a_redis_spec.rb # host a specific test /root/spec/{host_b}/host_b_redis_spec.rb # host b specific test
 test file /root/chef/cookbooks/{foo}/spec/default_spec.rb
/root/chef/cookbooks/{bar}/spec/default_spec.rb
  exp)
/root/chef/cookbooks/redis/spec/setting_spec.rb
/root/chef/cookbooks/redis/spec/process_spec.rb</description>
    </item>
    
    <item>
      <title>IFTTTを使ってReadabilityでFavったエントリーをはてブする</title>
      <link>https://blog.kenjiskywalker.org/2013/07/10/readability-hatebu-ifttt/</link>
      <pubDate>Wed, 10 Jul 2013 22:10:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/10/readability-hatebu-ifttt/</guid>
      <description>ep15: After Google Reader, DIY Blogging, The Go language (typester)
を聞いてて、IFTTT使ってReadabilityとはてブの連携するの思い出した。
快適に「あとで読む」ための環境 - TATSUHIKO MIYAGAWA&amp;rsquo;S BLOG
このmiyagawaさんのエントリーを参考にして設定した。
やっていることは全部同じで、Gmailの設定して、PINコード受けて登録して こんな感じで本文にURLが入るようにして
To addressにはてブの投稿用のメールアドレスを指定する。
この設定を入れると
ReadabilityでFav =&amp;gt; はてブに登録
されるようになる。
ライフチェインジングだ。
長そうだな、後で読みたいなって思ったものは片っ端からReadabilityに突っ込む。
突っ込んだエントリーを移動中とか合間の時間に読んで、
良かったものははてブに登録するということをしていたので、
それがReadability側で完結するのとても捗る。おすすめです。
また、画像の一部を黒でマスキングすると昭和のエロ本みたいで趣が出る。
こちらも合わせておすすめしたい。</description>
    </item>
    
    <item>
      <title>earthquake.gemプラグイン３つ</title>
      <link>https://blog.kenjiskywalker.org/2013/07/10/hisaichi-tweet/</link>
      <pubDate>Wed, 10 Jul 2013 00:07:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/07/10/hisaichi-tweet/</guid>
      <description>Twitterで言いたいけど、言えないようなツイートを楽に言えるようにした。 - パルカワ２
このearthquake.gemのpluginつくった。
https://gist.github.com/kenjiskywalker/5955552
この前日光でハッカソンしようとか話してて
結局つくりあげられなくて、メシ食う前の３０分でつくったプラグインもある。
https://gist.github.com/kenjiskywalker/5787351
POSTを逆にするヤツ。
https://gist.github.com/kenjiskywalker/5787448
POSTをランダムに並べ替えるヤツ。
もう少し生産的なものをつくりたい</description>
    </item>
    
    <item>
      <title>serverspecをJenkins氏で回す場合について</title>
      <link>https://blog.kenjiskywalker.org/2013/06/30/serverspec-jenkins/</link>
      <pubDate>Sun, 30 Jun 2013 02:47:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/06/30/serverspec-jenkins/</guid>
      <description>今流行りのserverspec、みなさんどうやって活用しているのでしょうか。
インフラもCIだ！みたいな話最近よく聞くので、CIといえばJenkins！
的な感じで試してみました。
ほんのさわり程度やってみたところで、工夫が必要だと感じたのは
Jenkinsをどうやって回すか。という根本的なところです。
Jenkinsのアカウントをsudo許可するのか、別アカウントを用意するのか、
もうなんだったらルート権限付与してしまうのか。色々方法はあるかと思います。
ほんのさわり程度ですが、良さそうだなと感じたのは
Publish Over SSH Pluginこのプラグインを利用して
NOPASS sudo権限のあるアカウントを作成し、秘密鍵を設定して
Jenkins用のアカウントとしてSSHログインさせてテストを回すのが良いかなと。
ほんのさわり程度なので、もっと良い方法ありそうですね。
あとIRC Pluginこれ、動かなくて
どっちかっていうとIRCでserverspecのテストの結果チラチラ見たいんんだよぉ〜
むしろその為にやってたんだよぉ〜ってなって、3時間ぐらいああだこうだやってて
なんで〜！！！ってなってたけど
 Jenkins casual notification using Remote access API / 烏賊様   ikasam_aさんのおかげでできるようになった！！！ありがたい！！！
もうちょっと触っていったら色々やりたい。</description>
    </item>
    
    <item>
      <title>さくらVPSでJenkinsたちあげたくてVPN繋いでdnsmasqで名前解決できるようにした</title>
      <link>https://blog.kenjiskywalker.org/2013/06/29/jenkins-dnsmasq-chef/</link>
      <pubDate>Sat, 29 Jun 2013 20:49:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/06/29/jenkins-dnsmasq-chef/</guid>
      <description>Jenkins氏、存在は知ってるけど自分で使ったことなかったので
取り敢えずインストールしてみた。
さくらVPSだとグローバル経由でアクセスすることになって
誰でも見れちゃうので悲しい感じになる。
ということでVPNを貼って内部で接続しに行く。
+--------+ +-----+ | sakura | --- vpn --- | MBA | +--------+ +-----+ [10.9.0.1] [10.9.0.6]  VPNの貼り方とはかここを見て貰いたい。
Jenkins氏  /etc/sysconfig/jenkins  JENKINS_ARGS=&amp;quot;--httpPort=${JENKINS_PORT} --ajp13Port=${JENKINS_AJP_PORT} --httpListenAddress=127.0.0.1&amp;quot;  として、自分自身のアクセスだけ許可
nginx氏  /etc/nginx/conf.d/hoge.conf  server { listen 80; server_name jenkins.kenjiskywalker.org; root /home/skywalker/www; location /{ proxy_pass http://localhost:8080; allow 10.9.0.0/16; deny all; } }  で、jenkins.kenjiskywalker.orgでアクセスを受け付けるようにする。
MBAにdnsmasqを入れて/usr/local/etc/にPATH通しておいて
 /usr/local/etc/dnsmasq.conf  address=/jenkins.kenjiskywalker.org/10.9.0.1   $ sudo /usr/local/sbin/dnsmasq   とかで起動させて、コントロールパネルの方で、DNSサーバを
127.0.0.1を最初に見に行かせるようにすれば名前解決できるようになる。</description>
    </item>
    
    <item>
      <title>2013 / あじさい / 鎌倉</title>
      <link>https://blog.kenjiskywalker.org/2013/06/26/ajisai-2013/</link>
      <pubDate>Wed, 26 Jun 2013 00:47:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/06/26/ajisai-2013/</guid>
      <description>あかっぽいあじさい あおっぽいあじさい 一眼もらったんだけど持ち歩くの面倒くさくて相変わらずDP2持って歩いてる。
DP2、家に帰るまでどんな感じで撮れてるのか全くわからないし
家で見ると７割ぐらいピント合ってなくて面白い。
確実性求めすぎない方が心に余裕生まれる気がする。</description>
    </item>
    
    <item>
      <title>AWSのリザーブドインスタンスについて理解していなかったので理解した</title>
      <link>https://blog.kenjiskywalker.org/2013/06/18/reserved-instances/</link>
      <pubDate>Tue, 18 Jun 2013 15:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/06/18/reserved-instances/</guid>
      <description>Amazon EC2 リザーブドインスタンス 先に1年か3年かのどちらか使用する予定の期間の予約金を支払うことで
割り引いてもらえるサービス。
詳しくはこちら
【AWS発表】 リザーブドインスタンスに新しい2つの料金モデルを追加 古い情報なので値段など変更されている場合があるので
あくまで参考までに。
リザーブドインスタンスの種類  軽度使用(Light) RI 中度使用(Medium) RI 重度使用(Heavy) RI  何が違うの？  15%以下: オンデマンドインスタンス
15% - 40%: ライトユース・リザーブドインタンス
40%-80%: ミディアムユース・リザーブドインタンス
80%以上: ヘビーユース・リザーブドインタンス
 上のパーセンテージは年間で使用するパーセント。
雑な計算をすると、365日中の15%だから、54.75日。
54.75日以下しか使わない場合はリザーブドインスタンスの方が損をしてしまう。
15%以上(54.75) - 40%以内(146日)以内であれば、軽度使用RIを使った方がお得。
どれぐらいお得かは参考ページに記載されている。
取り敢えず2ヶ月以上使う予定があれば軽度使用で安くなる。
ただ当たり前だけどインスタンスサイズ変更できないので
カジュアルにスケールアップすることができなくなる。
EC2が単体でスケールアウトができる構成じゃない場合つらくなる可能性ある。
不要になったRIはマーケットプレイスで販売もできるらしいけど
今はまだ米国専用って感じっぽい。
なにはともあれ選択ができるっていうのはありがたいことだ。</description>
    </item>
    
    <item>
      <title>大神社展行ってきた</title>
      <link>https://blog.kenjiskywalker.org/2013/06/05/daijinjyaten/</link>
      <pubDate>Wed, 05 Jun 2013 23:57:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/06/05/daijinjyaten/</guid>
      <description>国宝 大神社展 神道、基本アニミズム信仰だから仏教と違って
神を象ることはないんだけど、祀ることに関するものが色々あった。
色々あったけどどれも地味だったからあんまり面白くなかった。
そもそも神道が地味だからそんなもんだと思う。
秀吉の字がめちゃくちゃ汚いとか、空海の字がめちゃめちゃ綺麗だとか
そういう感じの面白さあんまりなかった。最終日に行ったから
人多くてそんなにちゃんと見なかったのが原因だと思う。
いずれにせよ原始的な宗教に変わりはないから
それはすごいなーって思った。
仏教、大乗仏教になって仏像とか彫っちゃってみんな好き勝手やりだしたけど
本来は神道みたいな地味なもんだったと思う。
隣りでやってたグレートジャーニー人類の旅が面白かった。
カミさんが異常に干し首に執着してて気持ち悪かった。
どうやって干し首つくったのか、みたいな映像熱心に見てた。
関野さんがイヌイットの人たちと生活していた映像あって、
セイウチの皮を綺麗に剥いで、捨てるものはなにもない。ってやってて
ああいうのもっとちゃんとやった方が良いって思った。
普段口にしてるもの、加工されてて死の実感ないのはよくない。
けど実際やれって言われたらだいぶ厳しい。イソメもちょっと厳しい。
NHKスペシャルで昔、「日本人イヌイット　北極圏に生きる」って番組やってて
よくこんなところに暮らせるなーって思った。
インカとかアマゾンとかで自然と共に生きるのと
経済社会の中で生きるの、幸せとは〜とか考えた。
最後に、人生とは旅なのかもしれない
「life is journey」って言葉があって、在り来りかもしれないけど
日々冒険だなって。
関係ないけど与論島行きたい。</description>
    </item>
    
    <item>
      <title>「サードウェーブ！：サンフランシスコ周辺で体験した最新コーヒーカルチャー」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/05/22/chataromameoh/</link>
      <pubDate>Wed, 22 May 2013 23:36:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/05/22/chataromameoh/</guid>
      <description>めちゃくちゃ面白くて、サラサラ〜って読んだ。
会社、typester氏とかkameda氏とかSOMTD氏とかバリスタいて
影響されて豆だけ持ってきて、飲む時は豆挽いてドリップしてるんだけど
色々と良い感じなので、会社で豆挽いて飲むのおすすめしたい。
私の行きつけの豆売ってるお店は
横浜は白楽にあるTERA COFFEE and ROASTER。
おじさんめちゃ良い人でどれも良い豆使ってて、
エチオピア・ナチュラル最高で、近くまで行ったら
是非足をはこんでほしいお店だ。
コーヒー、淹れ方も色々あってこってくると色々と面白い。
とかいって私はクレバーコーヒードリッパーで時間適当で
スプーンで適当にまぜまぜして飲んでる。楽で良い。
みんな忙しい感じだから、コーヒー飲んでゆっくりする時間つくると良さそう。
あわせてよみたい サードウェーブ！ ： サンフランシスコ周辺で体験した最新コーヒーカルチャー - soh335 memo</description>
    </item>
    
    <item>
      <title>音楽</title>
      <link>https://blog.kenjiskywalker.org/2013/05/22/music-20130522/</link>
      <pubDate>Wed, 22 May 2013 00:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/05/22/music-20130522/</guid>
      <description>Flats / HVL Black / PVGVN The Last Skeptik / Thanks For Trying どれも良かった</description>
    </item>
    
    <item>
      <title>Chefで公開したくないJSONデータを暗号化するためにDataBagsを利用してみた記録</title>
      <link>https://blog.kenjiskywalker.org/2013/05/20/chef-databag/</link>
      <pubDate>Mon, 20 May 2013 18:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/05/20/chef-databag/</guid>
      <description>ruby 1.8.7
chef 11.4.4
knife-solo_data_bag 0.3.2
 2013/05/20 現在
 knife-solo 0.2.0 では &amp;ldquo;knife solo data bag&amp;rdquo; は使えず
https://github.com/thbishop/knife-solo_data_bag こちらを利用
 参考  About Data Bags — Chef Docs Encrypt a Data Bag — Chef Docs  knife-solo_data_bagのインストール # gem install knife-solo_data_bag # cd /root/chef/ ; pwd  暗号化用の鍵を用意 # openssl rand -base64 512 &amp;gt; encrypted_data_bag_secret  環境整備 # mkdir /root/chef/data_bags # cat /root/.chef/knife.rb cookbook_path &#39;/root/chef/cookbooks&#39; data_bag_path &#39;/root/chef/data_bags&#39; encrypted_data_bag_secret &#39;/root/chef/encrypted_data_bag_secret&#39; #  のような感じでknifeの設定を整えます</description>
    </item>
    
    <item>
      <title>zabbix-proxyに複数のServerを設定することはできない</title>
      <link>https://blog.kenjiskywalker.org/2013/05/07/zabbix-proxy-not-many-server/</link>
      <pubDate>Tue, 07 May 2013 17:50:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/05/07/zabbix-proxy-not-many-server/</guid>
      <description>忘れそうだから書いておく。
 3.2.3 Zabbixエージェント (UNIX、スタンドアロンデーモン) 3.2.2 Zabbixプロキシ    ZabbixサーバのIPアドレス(またはホスト名)をカンマ区切りで指定します。
 っていう文言の有無で確認すればよかった。
けど、書いてないのは「わざわざ言わせんな恥ずかしい・・・///」
みたいな感じにも受け取れるけど、取り敢えず送れない。
2時間ぐらいあーだこーだしてた。最終的にngrepして
パケットの送受信されていないこと確認して終わった。ngrep便利だ。</description>
    </item>
    
    <item>
      <title>「アシュラ」劇場版と原作両方みた</title>
      <link>https://blog.kenjiskywalker.org/2013/04/30/asura/</link>
      <pubDate>Tue, 30 Apr 2013 21:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/30/asura/</guid>
      <description>劇場版見た。期待してたけどそこまでじゃなかった。
原作、Kindleで買えたので買った。
京都の寺とか仏像のこと調べると、大抵応仁の乱の時に焼かれたとか書いてあって
応仁の乱、1467~1477まで京都で戦争してたって書いてあって、それだけでも悲惨なのに
 &amp;ldquo;京都では長禄3年（1459年）旧暦8月に台風が直撃し、賀茂川が氾濫して多数の家屋が流出し、
数え切れないほどの死者が出たほか、飢饉がより深刻化した寛正2年（1461年）には、
大量の流民が市中に流れ込み更に事態は悪化した。
飢餓と疫病によって、寛正2年の最初の2ヶ月で京都で8万2千人の死者が出たと言われている。
だが、室町幕府の将軍足利義政はこの最中に花の御所を改築し、世事に全く関心を示さず、
堪りかねた後花園天皇の勧告をも無視した。
こうした混乱は、5年後に発生する応仁の乱への下敷きともなった。&amp;rdquo;
 長禄・寛正の飢饉
日本文化のルーツ、義政とか東山文化は重要な位置にあると思うけど、
その背景には、鴨川が氾濫して家屋が全部流されて、人が人を食ってたり、
鴨川に死体の山ができて流れが止まったりとか、そういう狂気じみた世界があるし
そういう背景を理解した上で歴史見ると、また色々と違った見え方ができると思う。
平安時代、優雅な時代とか書いてあるの見ても、その頃もやっぱり都は
 『方丈記』では京都市中の死者を4万2300人と記し、「築地のつら、道のほとりに、飢ゑ死ぬもののたぐひ、
数も知らず。取り捨つるわざも知らねば、くさき香世界に満ち満ちて、変わりゆくかたち有様、
目もあてられぬ事多かり」として、市中に遺体があふれ、各所で異臭を放っていたことが記されている。
また、死者のあまりの多さに供養が追いつかず、仁和寺の僧が死者の額に「阿」の字を記して回ったとも伝える。
 養和の飢饉
こんな感じで悲惨なことになってる。アシュラ、連載打ち切りになったらしいんだけど
物事の表面ばっかりなぞってもの本質見えてこないし、そういうのちゃんと教えた方が良い。
生活水準は遥かに向上してるけど
やっぱり人が人と生きるっていうのは
修羅の世界に生きるみたいなもんなんだなって思う。</description>
    </item>
    
    <item>
      <title>「壊れた仏像直しマス」１巻読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/04/30/repair-buddha/</link>
      <pubDate>Tue, 30 Apr 2013 21:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/30/repair-buddha/</guid>
      <description>@soh335さんから貰った。
ハートフルな話だった。
仏師、仏像を彫るだけじゃなくて人を助ける仕事でもあった。
今の仕事も誰かの助けになるように頑張って生きたい。</description>
    </item>
    
    <item>
      <title>「誰のためのデザイン」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/04/27/darenotameno/</link>
      <pubDate>Sat, 27 Apr 2013 23:01:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/27/darenotameno/</guid>
      <description>会社の給湯室の蛇口、下に下げると止まって、上に上げると出てくるつくりで
これ感覚的に逆だなーって思ってて、会社のIRCで、これ感覚的に
逆じゃないですか？って聞いたら、直感とかでキメるのイケてないって言われて
みんな詳しいなーと思って、デザインの基礎っぽい本読みたくて読んだ。
人間中心のデザインの原則－『誰のためのデザイン？』を読んで－ / マーケターのメモ帳
この人のまとめ記事がすごいよくまとまってて、
もう本読む必要ないのではって思うほどだった。
本、400ページ超あるから時間ない人はこの記事読むだけでも良さそう。
感想  ofの知識とhowの知識
ofの知識は表現できるけどhowの知識は意識下でやってるから伝えるのがむずかしい。
自転車はどうやって進むかって説明するのは簡単にできるけど
どうやって進ませるかを説明するのはむずかしいみたいな話載ってて
なるほど〜って言ってた。
 正確さはあまり必要ではない
5円玉がどういう模様で、どんな色で、とかあんまり必要ない。
ただ、すごい似た硬貨とか作っちゃうと見分けつかなくなって大変なことになる。
たしかに10円玉とか平等院鳳凰堂がどう書かれているのかってあんまり覚えてない。
覚えてないけど小銭入れの中に100円玉とか1円玉とか入ってても、10円玉かどうかわかる。
10円玉の平等院鳳凰堂、オレは正確に書けるとか言う人、その才能活用したら良いと思う。
  サーバのホスト名とか、srv10、srv11とかたまに見ることあって
見分け付きづらいし、そもそも何のサーバだかわからないの良くないって改めて感じた。
 トライアンドエラー
物流のスピードが上がったおかげで、昔みたいなシンプルで洗練されたデザインのものが
なくなってきてて、どんどん機能追加していった方がいいみたいになってるの、
昔は市場に出回った後でも何回かトライアンドエラーしていって、デザインの精度を
上げられたけど、今は多くても2,3回出して失敗したらもうダメっていうのが多い。
っていうデザイナーの話、そういう面もあるのか。って知った。
90年発行の本にそんなこと書いてあるんだから、 今のデザイナーもっと大変っぽい。
ウェッブサービスのデザインは結構トライアンドエラーできる印象ある。
 エラーが起きても大丈夫なようにデザインしておく
操作間違えて後戻りできないの、インターネットの運用とかやってるとよくあって
そう簡単に言われても〜、とか思ったけど、ミスが起こりにくいデザインとか
失敗しても元に戻せるデザインとかは、目指すべきところなんだと思う。
個人的に注意力散漫でリフレッシュ力高いから、こういうところに力入れていきたい。
そもそもそういう人間がそういう仕事してるの危険極まりないので
仕事では面倒くさい感じの臆病なヤツでいたい。
  最後の方あんまりちゃんと読んでなかったから
次読んだらまた新しい発見あると思う。
なんとなく 本、細かく読めばもっと発見とかあると思う。
また読みたくなったら図書館で借りると思う。
図書館、便利なのでおすすめです。
デザイン、要は誰かが何かをしようとした時に、
その目的を達成するための助けになるものが良いってことだと思った。
何かがあって、そのデザインを見てもわからないの、人間でいうと
主語がなくて、何の話してるのかわからない人の話と同じっぽい。
そのものだけ見てもよくわからなくて、マニュアルとか説明書き読まないと
理解できないのも、その話(目的)自体が難解なのか、
ただの説明(デザイン)下手なのかのどっちかっぽい印象ある。
これから  端的でわかりやすい
 簡単な操作で目的まで辿りつける
 操作を誤っても安全に操作前の状態に戻れる
  この辺を意識していくと色々と物事見えてきそうな気がした。</description>
    </item>
    
    <item>
      <title>「7つの習慣」を読んだ</title>
      <link>https://blog.kenjiskywalker.org/2013/04/27/seven-habits/</link>
      <pubDate>Sat, 27 Apr 2013 20:31:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/27/seven-habits/</guid>
      <description>たまに自己啓発っぽい本読みたくなる。
「7つの習慣」だいぶ良書だっていうのは聞いていたけど
本棚に置いておきたい本だった。
ソウルジェムが濁った時とか、人間関係に疲れた時に読むと良さそう。
読んでる時の自分の環境次第で感じるものが変わってくるタイプの本だ。
書いてあることは当たり前で、当たり前だ。って思うのが良くて
例えばある日、空は赤いって思ってる日々が続いて、
久しぶりにこの本を読んで、ああ、空は元々は青かったのか。
って思い出すような存在だと思う。
パラダイムと原則  オレは知ってるから〜。お前の言ってることまちがってるから〜
オレわかってるから〜、オレもうそれ知ってるから〜
 ってやってると物事の真理が見えなくなる。
常に物事に対して自分の立ち位置を変えながら見てみることが大切。
沢庵和尚の変幻自在の話と同じこと言ってる。
1. 主体性を発揮する 自己責任として色んなものに関わると良いって話書いてあった。
取り敢えずブチャラティを参考にしたら良さそう。
2. 目的をもってはじめる ミッションステートメントの話おもしろかった。
毎日仕事に追われてると、その仕事以上の成果出せないし
仕事がなくなったら次の働き口がなかったりする、1日とか1週間とかで
自分の学びたいこととか、やりたいことか、家族とすごす時間とか
そういうものをつくることが大切だ。みたいな話だった。
この話カミさんにすると週末どっか連れてけって言われるから黙っておこうと思う。
3. 重要事項を優先する デレゲーションの話おもしろかった。
は〜、結局自分でやっとけばよかったわ〜、ごめんごめん、次から自分でやるわ
とかやってると、最終的に周りに人なくして、オレはいいの、悪役でいいのよ。
みたいなミサワになる。そもそも技術力低いから仕事ではならなそう。
4. Win-Winを考える だいたい面倒臭くなっちゃってLose-Winでいいやって思うんだけど
それはよくないって話だった。
5. 理解してから理解される 不動智神妙録と同じこと書いてあった。
高校生の頃モテ要素ほしくて、相談に親身になって聞くスキルを
習得しようと思ったんだけど、結局話聞いててもエロいこと考えてて
話聞いてなかった記憶がある。
6. 相乗効果を発揮する 手前味噌なコミュニケーションじゃなくて
伝えること全部伝えて、自分が相手のことを理解していると思っている内容を
相手に確認して、合ってますか？では〜みたいな話し方良さそうだった。
7. 刃を研ぐ 自己制御して心身共に健康に生きようみたいな話だった
印象的だったのは、子供が父親に相談する時に父親が
「あ〜、あったわ〜オレもそういう頃あったわ〜」みたいな自分史に持っていって
息子が、そんなこと聞きたいわけじゃないから。コイツいいわ。話にならない。
みたいなの面白かった。
図書館 色々と本が借りれて便利なのでオススメです</description>
    </item>
    
    <item>
      <title>#mysqlcasual vol.4 でカジュアルに発表してきました</title>
      <link>https://blog.kenjiskywalker.org/2013/04/18/mysqlcasual4/</link>
      <pubDate>Thu, 18 Apr 2013 00:47:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/18/mysqlcasual4/</guid>
      <description>MySQL Casual Talks vol.4 で発表してきました。
お声がけしていただいた@myfinderさん
会場提供していただいたOracleさん
業務中にSQLの勉強してるのを暖かく見守っていていてくれた弊社のみなさま
@fujiwaraさん
ありがとうございました。
発表内容   mysql casual #4  from kenjis skywalker 
順番が@saisa6153さんの次という並び順でよかった。
カジュアルにSQLを勉強するには〜的な話が続けられて最高だった。
今回は初参加の人が半数以上いて、これはもしやいけるのでは！？って思って
発表はじめる前に、会場でSQL書いたことのない人いますか？
って聞いて、誰も手を上げなくて、会場で話す意味合いなくなって
インターネットの向こう側とか、まだ見ぬエンジニアに向けてみたいな発表になった。
インターネットの向こう側へ話したこと(2週間で何ができたか) 本を買った 「初めてのSQL」をサラっと読んだ
tweets.zipをSQLに入れてみた あんまり意味なかった
サンプルデータを作成するスクリプト書いた https://gist.github.com/kenjiskywalker/5397677
こんなんPerlじゃねー！って思われる方は是非リファクタリングしてください。
引越しする際に、色んな参考値があって、それをSQLに入れたら面白いんじゃないかなって思って サクっと書いたものです。取り敢えず1万件のサンプルデータ入ります。
適当に数字いじればデータ量増えるのでインデックスのテストとかに使える。
5.1だけど日本語訳のリファレンス・マニュアルのPDFを発見した MySQL Documentation: MySQL Reference Manuals
リファレンス・マニュアル、PDF空いてる時間に読みながらSQLためした
「初めてのSQL」、4.11なのでSQLについてはリファレンス・マニュアルを参考の基準にした
オレオレクエリリファレンスまとめた(随時更新していく) https://github.com/kenjiskywalker/memo/blob/master/MySQL/SQL.md
そんな感じで未経験からでも2週間あればそこそこできるって話を
インターネットの向こう側にしました。
みなさんのおすすめの本  プロになるための データベース技術入門　～MySQLforWindows困ったときに役立つ開発・運用ガイド 改訂新版 反復学習ソフト付き SQL書き方ドリル (WEB+DB PRESS plusシリーズ) 達人に学ぶ SQL徹底指南書 (CodeZine BOOKS) High Performance MySQL: Optimization, Backups, and Replication  みなさんのSQL勉強方法 知りたい。実務で必要になってってパターンがほとんどなんだろうけど</description>
    </item>
    
    <item>
      <title>tweets.zipを読みこませるSQLを書いた時のメモ</title>
      <link>https://blog.kenjiskywalker.org/2013/04/08/sql-create-howto/</link>
      <pubDate>Mon, 08 Apr 2013 01:19:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/08/sql-create-howto/</guid>
      <description>MySQL Casual Talks vol.4で話してみて
ってmyfinderさんからお声がけしてもらって、SQL周りノータッチで生きてきて
今色々勉強しだしてるけど、正直当日までに有用な話ができる気がしてない。
再来週のオレが今のオレよりもう少し有意義な情報を持ち合わせているようにしたい。
この前tweets.zipをMySQLに突っ込んでSQLを学ぶ(導入編)というのを書いて
ホッテントリー入ったねとか、何回もブクマ数数えたでしょ？とか
コンテンツ力高いとか、正直中身ないでしょアレとか。色々言われたんだけど
SQLをはじめて作成するにあたって勉強になったので、その時のメモ
参考: MySQL 5.1 リファレンスマニュアル :: 10 データタイプ :: 10.1 データタイプ概要 :: 10.1.4 データタイプデフォルト値 TEXTタイプではNOT NULLが使えない
参考: MySQL 5.1 リファレンスマニュアル :: 10 データタイプ :: 10.2. 数値タイプ 必要な数値タイプのバイト数の参考
参考: MySQL 5.1 リファレンスマニュアル :: 10 データタイプ :: 10.5 データタイプが必要とする記憶容量 VARCHAR(255)が1バイトで、VARCHAR(256)で2バイト utf8の日本語(マルチバイト)は1文字で3バイト。4byteのUTF8とかはutf8mb4
参考: MySQL 5.1 リファレンスマニュアル :: 10 データタイプ :: 10.4 文字列タイプ :: 10.4.1 CHAR と VARCHAR タイプ 参考程度
参考: MySQL 5.1 リファレンスマニュアル (オンラインヘルプ) :: 6 データ型 :: 6.</description>
    </item>
    
    <item>
      <title>tweets.zipをMySQLに突っ込んでSQLを学ぶ(導入編)</title>
      <link>https://blog.kenjiskywalker.org/2013/04/04/tweets_zip_big_data/</link>
      <pubDate>Thu, 04 Apr 2013 23:59:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/04/tweets_zip_big_data/</guid>
      <description>Twitterの過去ログが落とせるようになったので
SQLに学ぶには丁度いいや。ということで
カジュアルにOSX上でhomebrewを使ってMySQLに入れてみました。
 MySQL ver.5.6 (homebrew install)
OS / OSX 10.8.3
 なにはともあれアーカイブをダウンロード Twitterの個人設定っぽいところから
ポチポチするとダウンロードリンクが貼られたメールが送られてくるので
ポチポチしてtweets.zipをダウンロード。
tweets.csvを探す tweets.zipを解凍すると、中身がこんな感じに出てきて
index.htmlをブラウザで開くと、過去のツウィートが見れたりします。
 時間泥棒なのでおすすめしません
 そして、tweets.csvが目的のファイルで、中身を開くと
&amp;quot;tweet_id&amp;quot;,&amp;quot;in_reply_to_status_id&amp;quot;,&amp;quot;in_reply_to_user_id&amp;quot;,&amp;quot;retweeted_status_id&amp;quot;,&amp;quot;retweeted_status_user_id&amp;quot;,&amp;quot;timestamp&amp;quot;,&amp;quot;source&amp;quot;,&amp;quot;text&amp;quot;,&amp;quot;expanded_urls&amp;quot; &amp;quot;311761607619391489&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;2013-03-13 08:52:14 +0000&amp;quot;,&amp;quot;&amp;lt;a href=&amp;quot;&amp;quot;http://sites.google.com/site/yorufukurou/&amp;quot;&amp;quot; rel=&amp;quot;&amp;quot;nofollow&amp;quot;&amp;quot;&amp;gt;YoruFukurou&amp;lt;/a&amp;gt;&amp;quot;,&amp;quot;さよならインターネット&amp;quot;  こんな感じのCSVファイルになっていることがわかります。
MySQL側でデータベースとテーブルを用意する これをよしなにMySQLに格納するためのデータベースとテーブルをつくります。
データベースをつくる mysql&amp;gt; CREATE DATABASE tw DEFAULT CHARACTER SET utf8; Query OK, 1 row affected (0.01 sec) mysql&amp;gt; use tw Database changed mysql&amp;gt; mysql&amp;gt; SHOW TABLE STATUS; Empty set (0.00 sec) mysql&amp;gt;  CSVに対応したテーブルをつくる つくったりけしたりしやすいようにSQLファイルで読み込ませます
tweets_csv_to_sql.sql</description>
    </item>
    
    <item>
      <title>Chef 11からtemplateの中でtemplateを呼び出せるようになっていた</title>
      <link>https://blog.kenjiskywalker.org/2013/04/01/chef-another-template-from-render/</link>
      <pubDate>Mon, 01 Apr 2013 18:20:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/04/01/chef-another-template-from-render/</guid>
      <description>Opscode Chef 11 Release / OpsCode blog
 Long time contributor and past-MVP Andrea Campi added support for partial templates. This is a significant feature if you have templates with large sections that change based on attributes. You can now render additional templates inside a template with &amp;lt;%= render &amp;lsquo;other_template.erb&amp;rsquo; %&amp;gt;. This functionality expands the capability of the template reasource in a huge way.
 ということで、
 /chef/cookboof/hoge/templates/default/hoge.conf.erb  の中で</description>
    </item>
    
    <item>
      <title>「世界一わかりやすい会計の本」がわかりやすかった</title>
      <link>https://blog.kenjiskywalker.org/2013/03/31/kaikei-book/</link>
      <pubDate>Sun, 31 Mar 2013 03:00:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/31/kaikei-book/</guid>
      <description>大人になったら会計のかの字ぐらいわかってないと
いけないなと思って選んだ本書籍、実にまとまっていてすんなり読み進めることができた。
世界一わかりやすい会計の本 (East Press Business)個人的メモ 貸方・借方 覚えない。右とか左で良い
経営分析は意味がない 一般企業の80%が流動資産(1年以内に現金化・費用化できるもの)と固定資産(1年以内に現金化・費用化できないもの)、 流動負債(1年以内に支払う予定の負債)と固定負債(1年以内に支払う必要のない負債)を正しく区別していない為、 やっても意味がない。
大福帳(売掛台帳) ツケ一覧、回収できなくなるとこまるから
火事になったら売掛台帳をもって逃げろ。
簿記一巡の流れ  お金が絡む取引(会計取引)が発生 経理が「仕訳」して「仕訳帳」に記入 「仕訳帳」に記載された「仕訳」は、「総勘定元帳」に転記   この流れを1年間くりかえす
 決算日「総勘定元帳」の各勘定科目の残高を集計 この集計を元に「試算表」を作成   「試算表」とは「総勘定元帳」への転記が正しくされているかどうかをチェックするもの
 「総勘定元帳」から「貸借対照表」と「損益計算書」を作成する  勘定科目  それっぽいグループまとめ
 それっぽいグループにまとまらない雑費が多いと税務署が気にする
 勘定科目は自分でつくれる
  税務署  税額さえ正しければ勘定科目はなんだっていい 「仮払金」や「仮受金」などなんだかわからない金があると税務署が気にする 各勘定科目を前年度と比較して大きな増減のある勘定科目をピックアップ 極端に増減した勘定科目に注目する  必要経費 経済的合理性で判断。
送迎車がフェラーリなんてもったいない。ではなく
高級リゾートの送迎車であれば、経済的には合理性があるとかそんなもの
利息 お金を借りるために必要なので必要経費に入る
黒字倒産  「でていくお金」と「はいってくるお金」を把握していないと利益があるのに倒産することがある
 「でていくお金」を管理しておくことで、お金が不足しないようにチェックしていく(資金繰り) お金が出て行く前にお金が入ってくるシステムをつくる  ###- キャッシュフロー計算書
 1年を通してきた結果、「過去のお金」のことで、今日以降のお金の流れはわからない 中小企業で1年という単位で見直してたら資金繰りに間に合わない。意味がない  資金繰り予定表 出て行くお金をターゲットとして絞り込むことで、未来にいくら必要なのかがわかる。</description>
    </item>
    
    <item>
      <title>Chiba.pm #2に参加してきた #chibapm</title>
      <link>https://blog.kenjiskywalker.org/2013/03/30/chibapm2/</link>
      <pubDate>Sat, 30 Mar 2013 10:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/30/chibapm2/</guid>
      <description>地方pmに行ってみたかった 当日の参加表明すんません！おじゃまして大丈夫そうなので参加させて頂きます！デリファレンス！ #chibapm
&amp;mdash; kenjiskywalker (@kenjiskywalker) March 23, 2013 
という感じで、ガンダムUCが発送されてくるはずだったんですが
諸所の事情により間に合わず、泣く泣く家を出て千葉へ向かいました。
kaztrさんありがとうございました！
おいでよって言ってくれたすたじおさんありがとうございました！
Chiba.pm #2 ハッシュタグまとめ
空気感はこのへんのtogetterを見てもらえるとわかるんですけど
とてもまったりとした感じでした。
インターネット上で話したことのある有名な人たちがたくさんいた。
karupanerura君の話は、これからSQL周りやってみようと思っていたので
とても参考になったし、yoku0825さんのDBの話はちょっと難しくてよくわからなかった。
参加者全員LTなの知らなくて、moznion氏のLT職人芸を見て
芸人でやってけるだろうな〜とか笑いながら見てたり
ytnobody氏が「LTやるからパソコン貸してくれ」とかやってて
すごいな〜って見てた。
で、全員LTやりましたかね？って言われて、ウッってなって
 http://kenjiskywalker.github.com/perl-reference/  こんなページ書きだしたって話した。
リファレンス、省略されたかたちで書かれているのが多くて
わかってる人からしたら当たり前なんだろうけど
わからない人からすると、どういうこと？ってこと多くて
 Perl - リファレンスの説明（２） - ks&amp;rsquo;s blog  この神ページのおかげでやっと理解できた！！！！！！！ってなって
興奮してた。@ks0608さんに5,000円払いたい。
この神ページみたいなの書いていきたい。
有名な人たちがたくさんいたのに人数少なかったから色んな人と話せた。
昨日のPerlCasualでLTしたけどあんまり上手く話せなくて、
地方pmで練習してからああいうちょっと人数の多いところで発表すると良さそう。
勉強会とか20人ぐらいまでのヤツに参加するとお客様感なくて楽しめると思うので
地方pmオススメします。#3あったらまた参加したい。</description>
    </item>
    
    <item>
      <title>PerlCasual #5に参加してLTしてきた #perlcasual</title>
      <link>https://blog.kenjiskywalker.org/2013/03/30/perlcasual5/</link>
      <pubDate>Sat, 30 Mar 2013 01:57:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/30/perlcasual5/</guid>
      <description>PerlCasual #5に参加してきました
今回お声がけして頂いたyusukebe氏に感謝を。
  OSS Community初心者が Perl Communityから 学んだ1年  from kenjis skywalker 
追記: 03/30 12:00 社内シーパン王サーの@mix3氏から、抜けてるぜ？ってご指摘を頂いて
ﾔﾍﾞｯってなったのでここに追記いたします。
 https://metacpan.org/author/HIMACHOCO
  シーパン王サー何人いるんだって思いますよね。すごい
LTで話したかったこと 実は今回の死霊、5分のLTで話す内容ではなかったんですけど(15分くらい必要だった)
ちょうど転職してから1年経って、いい区切りだなと思って
自分の実体験を話したかったのでむりくり説明省いて話しました。
伝わならないと思うからブログで書くんだ。ってyusukebe氏に話したら
そういう技！？って言われて、プププ。ってなってました。
fujiwaraさんから、透かし芸はもう飽きられるねって言われて
私もそろそろだと思っています。という話をしました。
言いたいことはスライド中にある銀河さんの資料に書いてあるのですが
 勉強会お客さん時期
 勉強会発表者時期
  この2つは大きく違うなというのが体験で得たものでした。
本来であれば、面白い技術とか、刺さる話とかして
色んな人と知り合っていくのが正しくて、
もちろん、コミュニティに入っていきなり知り合いが増えるわけもなく
そういうコミュニティに精通している会社に入って、
知り合いをつくるショートカットとかもできるんですが
実力が伴っていないので、ギラギラした人からするとアイツなんでいるの？
みたいな感じになります。
わたしの場合、fujiwaraさんと一緒に働いてることや、
ひさいち君、335氏、マコピーやtypester氏、songmu氏など
Perl Communityに深い関わりあいのある人がいるから
結果的に知り合いの知り合いみたいな感じで広がって行っていますが
それはセコいやり方で、本来であれば
ちゃんと自分の実力で知り合い増やしていくのが良いなって思っています。
そもそも知り合いとか多くすることが目的じゃなくて
案外こういうこと載ってないよなってことを書いたり話したりして
誰かの役に立って、結果的に年収800万とか得られるようになれば良いんです。
去年の2月のkamakura.pmで時間が余ったからLT誰かやりませんか？ってなって
来月からお世話になります！とかぶっこんでも誰も覚えてないし
自分が勇気を出したわりには見てる人そんなに覚えてることもないけど
何かをアウトプットして、それが誰かの役にたって、知り合いが増えて
仕事とかコミュニティとかに繋がってるのが楽しくなったら
それはみんなハッピーなことなんじゃないかってことですよね。
取り敢えず発表したいけど勇気がないとか
知り合いほしいけど形成されたコミュニティに入りづらいとかいう人は
少人数の地方PMとか、Perl Beginners、Perl入学式に参加してみると良いと思います！
今日もPerl入学式に参加して、楽しそうだと思って来てみたとかいう人がいて</description>
    </item>
    
    <item>
      <title>chefspecを利用したcookbookの動作テスト</title>
      <link>https://blog.kenjiskywalker.org/2013/03/26/chefspec/</link>
      <pubDate>Tue, 26 Mar 2013 16:34:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/26/chefspec/</guid>
      <description>chefspec 1.0.0.rc1
 Chefのcookbookのテストどうしたらいいんだろうって悩んでいたのですが
chefspecが良さそうだったので試してみました。
テストしたいことは
 cookbookのrecipeに書いてあることが期待通り実行されるか ホスト名やプラットフォーム別のrecipeが期待通り実行されるか
  この2点です。
下記のようなcookbookがあるとして
cookbook/yum/recipe/default.rb
template &amp;quot;/etc/yum.conf&amp;quot; do source &amp;quot;yum.conf.erb&amp;quot; owner &amp;quot;root&amp;quot; mode 0644 end file &amp;quot;/etc/yum/exclude.conf&amp;quot; do owner &amp;quot;root&amp;quot; mode 0644 only_if { node[:platform_version].to_i == 5} end file &amp;quot;/etc/yum/installonlypkgs.conf&amp;quot; do owner &amp;quot;root&amp;quot; mode 0644 only_if { node[:platform_version].to_i &amp;gt;= 6 } end  cookbook/yum/recipe/default.rb
[main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=0 debuglevel=2 logfile=/var/log/yum.log exactarch=1 obsoletes=1 gpgcheck=1 plugins=1 installonly_limit=3 # This is the default, if you make this bigger yum won&#39;t see if the metadata # is newer on the remote and so you&#39;ll &amp;quot;gain&amp;quot; the bandwidth of not having to # download the new metadata and &amp;quot;pay&amp;quot; for it by yum not having correct # information.</description>
    </item>
    
    <item>
      <title>梅</title>
      <link>https://blog.kenjiskywalker.org/2013/03/23/ume/</link>
      <pubDate>Sat, 23 Mar 2013 12:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/23/ume/</guid>
      <description> 2013年の梅。
1 2 3 </description>
    </item>
    
    <item>
      <title>fluentdでCloudWatchのELBのメトリクスをZABBIXに渡す</title>
      <link>https://blog.kenjiskywalker.org/2013/03/21/cloudwatch-fluentd-zabbix/</link>
      <pubDate>Thu, 21 Mar 2013 17:05:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/21/cloudwatch-fluentd-zabbix/</guid>
      <description>ELBのCloudWatchにあるメトリクスをZABBIXで取得するためにfluentdを利用しました。
これでELBのアラートの設定もZABBIXで行えるので、通知の一元化が行えます。
もちろんZABBIXでグラフにすることもできます。
fluent-plugin-zabbix
fluent-plugin-cloudwatch
この2つのfluentdプラグインを使います。
td-agent.conf &amp;lt;source&amp;gt; type cloudwatch tag cloudwatch aws_key_id YOUR_AWS_KEY_ID aws_sec_key YOUR_AWS_SECRET/KE cw_endpoint monitoring.ap-northeast-1.amazonaws.com namespace AWS/ELB metric_name HealthyHostCount,HTTPCode_Backend_2XX,HTTPCode_Backend_3XX,HTTPCode_Backend_4XX,HTTPCode_Backend_5XX,HTTPCode_ELB_4XX,Latency,RequestCount,UnHealthyHostCount dimensions_name LoadBalancerName dimensions_value YOUR_ELB_NAME &amp;lt;/source&amp;gt; &amp;lt;match cloudwatch&amp;gt; type copy &amp;lt;store&amp;gt; type zabbix zabbix_server ZABBIX SERVER IP host [ZABBIXに設定するホスト名。なんでもいい(hoge-elb)] name_keys HealthyHostCount, HTTPCode_Backend_2XX, HTTPCode_Backend_3XX, HTTPCode_Backend_4XX, HTTPCode_Backend_5XX, HTTPCode_ELB_4XX, Latency, RequestCount, UnHealthyHostCount add_key_prefix cloudwatch &amp;lt;/store&amp;gt; &amp;lt;/match&amp;gt;  ZABBIXの設定 ホスト名は
[ZABBIXに設定するホスト名。なんでもいい(hoge-elb)] で指定したものを。
こんな感じでアイテムを設定します。
 キー：cloudwatch.HealthyHostCount データ型：整数とか浮動小数点型とか タイプ：ZABBIX Trapper  トリガーはこんな感じでUnHealthyHostが0よりも大きければwarningを
みたいな監視が行えるようになります。
LatencyやRequestCountなんかもグラフにできるので</description>
    </item>
    
    <item>
      <title>ZNCでlingr-ircに接続する設定</title>
      <link>https://blog.kenjiskywalker.org/2013/03/21/znc-to-lingr/</link>
      <pubDate>Thu, 21 Mar 2013 00:25:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/21/znc-to-lingr/</guid>
      <description>ゆるふわなかんじで perl の話題をするためのチャットルームをつくってみた - tokuhirom&amp;rsquo;s blog.
インターネットそんなに古くからやってないのでlingrとかあんまり知らなかったけど
面白そうだから入ってみた。ブラウザでログインとかしたくなかったので
psychs/lingr-irc
使って
$ nohup ruby lig.rb &amp;amp;  とかユルフワな感じでふぉわーどするようにしてる。
長く動かすようだとdaemontools化した方が良い。
今ならtokuhiromさんがつくったPerlバージョンの
tokuhirom/lingr-ircd
こっち使ってもいいかもしれない。
 あとずっとハマってたのが、アカウントつくってIRCでつなげねー！
ってなってたけど、1回ルームに入ってからじゃないとダメだった。
 どうせならZNCで繋ぎたかったのでこんな感じでつないでる。
 &amp;lt;Network lingr&amp;gt; FloodBurst = 4 FloodRate = 1.00 IRCConnectEnabled = true Ident = [lingr account name] RealName = hotoke Server = 127.0.0.1 26667 [lingr password] &amp;lt;Chan #perl_jp&amp;gt; Buffer = 10 &amp;lt;/Chan&amp;gt; &amp;lt;/Network&amp;gt;  Ident にlingrのユーザ名入れて
Server で指定するパスワードにlingr userのパスワード設定するだけだった。
webadmin使えばNetworkの設定追加する時も再起動なしでいけるしすごい良い。
ずっとwebadmin見れないなーって思ってたら
@handlename先輩が「Chromeでは見れないよ」って
アドバイスくれて、さすがオレたちのhandle先輩！ってなってた。
ChromeだとブラウザでIRCポートとか接続しに行くと良くないアクセスみたいな判断して</description>
    </item>
    
    <item>
      <title>Redis Sentinelが動いていたらslaveof no oneしない</title>
      <link>https://blog.kenjiskywalker.org/2013/03/20/redis-sentinel-slaveof/</link>
      <pubDate>Wed, 20 Mar 2013 02:36:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/20/redis-sentinel-slaveof/</guid>
      <description>色々とあれだったのでシンプルにキメうちにしました
thanks: @sawanoboly
update: 2013/03/22
 環境  Redis version 2.6.7
 Redis Sentinelは Monitoring 、 Notification 、Automatic failover
の3つの機能があって、主に自動フェイルオーバ目的で利用する機会が多いと思うのですが
その際に、手動でslaveof no oneを打っちゃうことで予期しない状態になるので
slaveof no one打つならRedis Sentinelを止めてからにしましょう。
事前情報
こんな感じでredis-sentinel.confが設定されているとします
 構成: Master:1 &amp;lt;=&amp;gt; Slave:1 
sentinel monitor check_one 192.168.2.100 6379 2 sentinel down-after-milliseconds check_one 5000 sentinel failover-timeout check_one 50000 sentinel can-failover check_one yes sentinel parallel-syncs check_one 1 daemonize yes pidfile /var/run/redis-sentinel.pid loglevel notice logfile /var/log/redis-sentinel.log port 26379   Redis Sentinelが動いているのに「slaveof no one」をかます</description>
    </item>
    
    <item>
      <title>ZABBIXでアラートメールを受け取るためにする設定メモ</title>
      <link>https://blog.kenjiskywalker.org/2013/03/20/zabbix-action-setting/</link>
      <pubDate>Wed, 20 Mar 2013 01:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/20/zabbix-action-setting/</guid>
      <description>新しくグループとかつくる時に
アラートメールの送り先の設定項目多くて毎回忘れるのでメモ
 ユーザつくる ユーザのメディアにアラート通知先登録する ユーザグループつくる ユーザグループにユーザ入れる ホストつくる ホストグループつくる ホストグループにホスト入れる
 アクションのコンディションのホストグループにホストグループを指定 アクションのオペレーションにユーザグループを指定  で、大丈夫のはず。
コピーとかでやるとコンディションとか通知先とか変え忘れるので
新規でちゃんとつくった方が確実だしなんか通知こねー！とかなるので
ちゃんと確認しないといけない。
ZABBIX、設定箇所多いから敷居が高い印象ありますね。</description>
    </item>
    
    <item>
      <title>ZNCでLimeChatをIRCクライアントにしてiPhoneだけBuffer効かせる設定とim.kayacの設定</title>
      <link>https://blog.kenjiskywalker.org/2013/03/20/znc-limechat-iphone/</link>
      <pubDate>Wed, 20 Mar 2013 00:36:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/20/znc-limechat-iphone/</guid>
      <description>環境
ZNC vresion 1.0
LimeChat version 2.33
ZNC Packages from epel repository
- znc-1.0-0.1.alpha1.el6.x86_64
- znc-devel-1.0-0.1.alpha1.el6.x86_64
- znc-modperl-1.0-0.1.alpha1.el6.x86_64
 出先で、im.kayacの通知が来てて見ると
「kenjiskywalkerマジでクソ、サーバさわんな」みたいなことが話されてて
解脱〜、みたいな状況になった場合、iPhoneで直近の会話だけ
みたい場合があるので、その設定をした。
参考:  ZNCってひとつのアカウントで複数サーバーに接続できるよね？ - handlename&amp;rsquo;s blog
znc 内で keepbuffer on と off なものを作る - soh335 memo
znc で im.kayac をつかうための NotifyImKayacSimple.pm をかいた - tokuhirom&amp;rsquo;s blog.
 NotifyImKayacSimpleの設定 特定のキーワードをim.kayac.comに通知するZNCモジュール書いた - すぎゃーんメモ
このすぎゃーんさんのメモの&amp;rsquo;-fPIC&amp;rsquo;の設定を有効にした記憶がある。あまり覚えてない。
~/.znc/modules/NotifyImkayacSimple.pmに置いて *LoadModule = modperl*して、
*NotifyImkayacSimple username=username keyword=key1,key2*で通知が来ると思う。
設定書いて間違っていればzncが起動しないので、その辺で確認できると思う。
デバッグモードを有効にするのもアリだと思う。
zncの設定 // WARNING // // Do NOT edit this file while ZNC is running!</description>
    </item>
    
    <item>
      <title>#monitoringcasual vol3 に参加してきました</title>
      <link>https://blog.kenjiskywalker.org/2013/03/09/monitoringcasualvol3/</link>
      <pubDate>Sat, 09 Mar 2013 15:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/09/monitoringcasualvol3/</guid>
      <description>Monitoring Casual Talk #3に参加してきました。 会場をご提供頂いた株式会社paperboy&amp;amp;co.さま
@ume3_さん、@tnmtさん、@lamanotramaさん、ありがとうございました。
会場へ向かう途中で、fujiwaraさんとsongmuさんが
今日はmizzyさんいないからイケるかもしれないとか物騒なこと言ってて怖かったです。
セルリアンタワー、曜日の夜にBARになるところがすごくて
入り口にイケイケのおねーさんいたりして華やかや〜！！！ってなっていました。
発表内容 発表資料はこんな感じです。
出発する30分前につくったのでそんなに大したものではないです。
一枚目は 「*RDSのメトリクスをCloudWatchからfluentdへ、slow_logを添えて*」
って書いてあります。
フレンチっぽくしたかったんですけどただの読めない文字になってました。
あと何枚目かに素敵な妖精が映ってるかもしれないですけど気のせいです。
こんなんあったらいいなーって思ったら、素晴らしいプロダクトがたくさんあるので
すぐにできて良いですね。という感じで5分ぐらいで話したんですけど
みんな普通にライトニングじゃない時間トークしてて、
何でか一番時間きっかりしてたのに手抜いた感じがしてて切なかったです。
もにかじ中にお前ZABBIXのスクリーン消したろ？って社内IRCで声かけられて
は〜申し訳ないです〜とか言いながらZABBIXのスクリーンつくりなおしてました。
ZABBIXのスクリーン、業が深いので手作業でやらないようにしたいですね。
fluentdのプラグインをつくりました。 fluent-plugin-cloudwatch-lite
fluent-plugin-rds-slowlog
fluent-plugin-cloudwatch-lite は、RDSのメトリクスをZABBIXで取得したかったので
fluentdに120秒前と60秒前のデータを取ってくるものです。
元々fluent-plugin-cloudwatchがあって
それを参考につくらせてもらいました。
自分でThread書くとか多分無理だったので本当にありがたいです。
fluent-plugin-rds-slowlog は、
RDSのslow_logをファイルで保存したかったので書きました。
最初シェルスクリプトでやってたんですけど、
fujiwaraさんからfluentdでやれば？って言われて
ほんとっスねってなって書きました。fluentdのplugin簡単に書けてすごいです。
簡単に書けるからこそ、つくるならちゃんとしたものつくりたいなーって思いながら
自信ないので、色々書いていくようになれば自信つくのかなーとか思ったりしてます。
もにかじ もにかじ、次回ははてなさんらしいので超楽しみです。
なんだったら鴨川でビールキメたりしたいですが、
多分カミさんに物理的に抹消されるので厳しいです。
もし次回参加できたら、次はこんなことで悩んでるんですけど
みなさんどうしてます？みたいな感じで行きたいです。(前も言ってた気がする)
fujiwaraさん 『いつもと違う』を検知したい
ハンパない
Perlのひとたち Perl使ってる若者みんなスルーしてるけど、Perlおじさんたち
disに対するアンサーソングみたいなのみんなキメてて怖かった。
Twitter見たらまだ話してる人いて本当に物騒だなって思った。
ひとりじゃない 監視とかモニタリングとかってあんまりおもしろい話ないし
すごい地道な作業が多いけど、みんなで集まって
どうやって問題に対して解決してるかとか、
こういう課題があるんだけどどうだとか、このツールどうだとか
ワイワイ話したりするの楽しいなーって思いました。
Twitter芸人として技術力ないけどコンテンツ力があるとか
言われないように頑張って生きたい。
頑張るのに疲れたらインターネットから解脱して仏像彫りたい</description>
    </item>
    
    <item>
      <title>EC2でEphemeral DiskをRAID0で構築した状態でブートする</title>
      <link>https://blog.kenjiskywalker.org/2013/03/04/ec2-ephemeral-raid0-boot-mount/</link>
      <pubDate>Mon, 04 Mar 2013 21:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/03/04/ec2-ephemeral-raid0-boot-mount/</guid>
      <description>{% gist 5081937 %}
こんなスクリプトを置いておいて
/etc/rc.local
sh ec2-raid0.sh  こんな感じで*rc.local*に一行書いておけば
エフェメラルディスク2つをRAID0としてマウントする。
なんでmd127なのかは、AWSさんに聞いてほしい。
md0でつくっても必ず、再起動後にmd127として起動してくる。
きっと神の意思なんだと思う。</description>
    </item>
    
    <item>
      <title>Chefのtemplateにrecipeからデータを渡すvariablesについて</title>
      <link>https://blog.kenjiskywalker.org/2013/02/27/chef-variables-same-cookbook/</link>
      <pubDate>Wed, 27 Feb 2013 01:08:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/27/chef-variables-same-cookbook/</guid>
      <description>Chefで、同じcookbookを利用して
異なった値を入れてよしなにファイルをつくりたかったメモ。
@fujiwaraさん++
 検証環境
Chef v11.4.0
 Chefにて、同じcookbookを使い、異なった複数の値を与えて
結果を異なったファイルに出力する場合は、variablesを利用する。
当初、この課題に対する解決方法として、
複数の role を作成し、その role 内で異なった値をJSONに入れることにより
実現できると思い込んでいたのだが、run_listでは複数のrecipeとして理解されず、
複数のroleで同じcookbookを利用した場合には後者のみが採用され、
最初に読み込まれた role は認識されなかった。
variablesを利用したレシピをみていこう JSONには ports というkeyに対して、&amp;rdquo;6379&amp;rdquo;と&amp;rdquo;6380&amp;rdquo;という複数のvalueをもたせる
{% gist 5039419 redis.json %}
recipe内で
ports.each do |port|と分解して実行するように記述する
また、わかりづらいのだが
 variables({ :port =&amp;gt; port })  このように port 、この場合でいえば &amp;ldquo;6379&amp;rdquo; 、 &amp;ldquo;6380&amp;rdquo; の値を
@port に代入している。
{% gist 5039419 recipe-default-recipe.rb %}
template内で、代入された @port を利用する
{% gist 5039419 template-default-redis.conf.erb %}
上記内容の結果、出力ファイルとして
{% gist 5039419 etc-redis-6379.conf %}</description>
    </item>
    
    <item>
      <title>週末買った音楽</title>
      <link>https://blog.kenjiskywalker.org/2013/02/25/music-20130225/</link>
      <pubDate>Mon, 25 Feb 2013 03:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/25/music-20130225/</guid>
      <description> Iradelphic / Clark Quarantine / Laurel Halo Ancient Future / Willits + Sakamoto </description>
    </item>
    
    <item>
      <title>RDSの負荷状況を知りたかったのでCludWatchのAPIを叩くために書いた簡単なRubyスクリプト</title>
      <link>https://blog.kenjiskywalker.org/2013/02/25/get-cloudwatch-rds-ec2/</link>
      <pubDate>Mon, 25 Feb 2013 01:10:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/25/get-cloudwatch-rds-ec2/</guid>
      <description>CloudWatchのAPI、プログラミング初心者にとって鬼門っぽい。
{% gist 5024321 get_cloudwatch_rds.rb %}
こんな感じで適当に叩いたら良い感じに取ってきてくれます。
デフォルトの*metirc_name*パターンはコメントアウトに書いてます。
start_timeとかperiodいじると返ってくるデータパターンが変わってくるので
色々遊んでみてください。
ついでにEC2のデータもとってくれるようなの書いてみたんですが
デフォルトで手に入るメトリクス少ないので
CloudWatchでデータ取るなら自分でメトリクスつくらないとダメですね。
{% gist 5024321 get_cloudwatch_ec2.rb %}
Enjoy CloudWatch API!</description>
    </item>
    
    <item>
      <title>ZABBIX PROXY ver.1.8の設定メモ</title>
      <link>https://blog.kenjiskywalker.org/2013/02/20/zabbix-proxy/</link>
      <pubDate>Wed, 20 Feb 2013 00:25:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/20/zabbix-proxy/</guid>
      <description>OctopressでGsitすごいカジュアルに載せられるけど
ギッハブのとあるリポジトリのドキュメントをカジュアルに載せられないものか。
ZABBIX PROXYのメモ
普通にproxyインストールするまではよかったんだけど
その後にproxy先のZABBIXで設定するのしらなくてずっと
Sending list of active checks to [IP ADDORESS] failed: host [n01] not found
ZABBIXのオフィシャルのドキュメントがあったら
本当にそういうドキュメント探すセンスがないっぽい。</description>
    </item>
    
    <item>
      <title>AWS::Provisioned IOPSなRDSをVPC内につくろうとしたら</title>
      <link>https://blog.kenjiskywalker.org/2013/02/15/rds-tarinai/</link>
      <pubDate>Fri, 15 Feb 2013 13:21:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/15/rds-tarinai/</guid>
      <description>こんなエラーが出た。
 Cannot create a db.m1.small Multi-AZ instance because at least 2 subnets
must exist in availability zones with sufficient capacity for VPC and provisioned IOPS for db.m1.small,
so 1 more must be created in other availability zones; choose from these availability zones: ap-northeast-1c.
 AZが足りなさそうだったのでVPCとRDSのSubnetGroupsそれぞれに
*ap-northeast-1c*を追加したらエラーが消えてRDS作成できた。
AZ、*ap-northeast-1a*が一番使われて*ap-northeast-1c*が一番使われないの人間っぽいし
Amazonさんもキャパシティプランニングとか大変だなーって思って
缶コーヒーでもおごってあげたい気持ちになりました。
けどお給料はAmazonさんの方が良さそうなので、焼肉おごってほしいです。</description>
    </item>
    
    <item>
      <title>大人</title>
      <link>https://blog.kenjiskywalker.org/2013/02/14/otona/</link>
      <pubDate>Thu, 14 Feb 2013 21:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/14/otona/</guid>
      <description>大人とは〜みたいなの昔よく考えてて
「子供は自分の意見を言うだけの人」
「大人は自分の意見と相手の意見をすり合わせられる人」
っていうことを考えてた。
最近とくに自分の足りないところとか考えてて
何かの事象が起こった時に感情的に支配されて、
それは勝手に自分がその対象にとらわれてしまっていて
そうすると、俯瞰でものが見れなくなって
ちゃんとした判断が行えなくなるみたいなの思ってる。
そういう話は不動智神妙録に載ってて
例えば、電車が来た時に降りる人がまだいるのに急いで自分の席を確保する人とか
その人がいないところでその人の悪口言ってる人とか
なんでそういうことするのかなーって思うんだけど、
そういうことする人の気が知れん！ってなると、もうそこで
理解することを止めちゃって、憎悪の対象になっちゃって
結局とらわれることになるのかなって思う。
例えばの話だけど、なんでそういうことするのかなーって思った時に
その事象の背景にどんなことがあるのかっていうのを考えると
その瞬間の出来事にとらわれることはないのかなって思う。
まだ降りる人がいるのに自分の席確保しようと急いで乗っちゃう人、
今まで南米の貧しい町にずっと住んでて、自分でどうにかしないと
生きていけないようなサバイブしてきた人なのでは？とか考えると
その町ではゆずりあってなんかいたらメシがなくなるとか
電車の座席ひとつで生きるか死ぬかみたいなことまで発展するような
そんな世界でどうにか生きてきた場合、多分ゆずりあいとかむずかしいと思う。
本当はそういう事象が発生した時に
走馬灯みたいにその人のバックグラウンドみたいなのが
一瞬で見れれば、あーそっか、そういう背景があるのか！
みたいになれば納得できると思う。
まぁ背景みて余計にイライラするかもしれないけど
取り敢えず起こった事象だけを見てあーだこーだ言うことは少なくなると思う。
その発生した事象の背景まで想像して、なるべく理解しようとつとめて
ものごとを客観視できれば、色々と見えてくるものもあるだろうし
もしかしたらその対象が人だったりしたら、何かアドバイスとかできるかもしれない。
大人っていうのは、自分の意見を通すことに政治力磨くこととか、
争いに勝つとか、よく金を稼ぐとか、そういうことじゃなくて
ある事象に対してよく理解して、みんながなるべくしあわせになれるように
ものごとをすすめられる人だと思う。
ここまで読んでもしかして&amp;hellip;って思った人、勘がいいですね！
そう！残念！大人ではなく解脱の話でした！
ｳｪｰｲ</description>
    </item>
    
    <item>
      <title>すぐに般若心経を唱えられるGoogle Chromeの拡張作った。</title>
      <link>https://blog.kenjiskywalker.org/2013/02/12/keiryu-hannyashinkyo/</link>
      <pubDate>Tue, 12 Feb 2013 21:15:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/12/keiryu-hannyashinkyo/</guid>
      <description>生きていればつらいことがある。 しかし、つらいからと言って簡単に投げ出す事は出来ないということも多い。
みなさんもつらまってる時、よく般若心経を唱えると思う。 当然のごとく僕もそうである。
最近つらい事がよくある。 そんな時のために、般若心経を素早く表示する必要があった。 なので、般若心経をすぐ唱えるGoogle Chromeの拡張を作った。
「だめだ。もうやってらねー」って時は、空の tab を表示すればすぐ般若心経を唱えられる。最高。解脱したい。
 渓流般若心経 from kenjiskywalker on Vimeo.
 音が出ます。時間が経過すると般若心経が流れ出します。苦手な方は視聴を控えてください。
 https://github.com/kenjiskywalker/chrome-keiryu-hannnyashinkyo
合わせて読みたい すぐに吉高由里子を見れるGoogle Chromeの拡張作った。 - パルカワ2
すぐに宮崎あおいを見れるGoogle Chromeの拡張作った。- soh335 memo
すぐにハッブル宇宙望遠鏡撮影画像を見れるGoogle Chromeの拡張作った。- mizzy.org</description>
    </item>
    
    <item>
      <title>AWS::EC2をVPCにアサインして、EIP用のNetwork Interfaceを追加して外部と接続できるようにする</title>
      <link>https://blog.kenjiskywalker.org/2013/02/06/aws-ec2-vpc/</link>
      <pubDate>Wed, 06 Feb 2013 21:30:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/06/aws-ec2-vpc/</guid>
      <description>AWSでEC2のインスタンスをVPCにアサインして
外部と接続する為のネットワークインタフェースを追加して
外部と接続できるようにしたメモです。
{% gist 4722151 %}
もっと簡単なやり方ありましたら教えてくださいませ。</description>
    </item>
    
    <item>
      <title>AWS::EC2のルートパーティションをリサイズする</title>
      <link>https://blog.kenjiskywalker.org/2013/02/06/aws-ec2-root-resize/</link>
      <pubDate>Wed, 06 Feb 2013 21:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/02/06/aws-ec2-root-resize/</guid>
      <description>基本的にルートパーティションはEBSで8GB決め打ちだったので
サイズ変更できないかなーと思ったらできたのでメモ。
 普通にEC2のインスタンスつくる インスタンスを落とす Volumesから作成されたインスタンスのルートボリュームをDetach DetachされたVolumeからSnapshotを作成 SnapshotからVolumeを作成(この時にディスクサイズ指定) 作成されたボリュームをAttach(Deviceは /dev/sda1 を指定) インスタンスを起動 fdisk -l などで認識しているディスクサイズが変わったことを確認して resize2fs /dev/xvda1  さわりはじめたばかりなので、もっと簡単な方法ありましたら
教えてくださいませ。</description>
    </item>
    
    <item>
      <title>#qpstudyと仏教とわたし</title>
      <link>https://blog.kenjiskywalker.org/2013/01/26/qpstudy-buddhism/</link>
      <pubDate>Sat, 26 Jan 2013 23:24:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/26/qpstudy-buddhism/</guid>
      <description>本エントリーはビール駆動記述によって書かれているため
内容については3割で読んで頂けると幸いです。
先週、エンジニアサポートCROSS 2013というイベントに参加して
リーダーさんと初めてお会いして
我「来週qpstudyですよね、DevOps。」
我「社内ではDevOpsなんてものは存在しないって話なんですよ」
リーダー「そのポジションでパネルディスカッション参加して！」
我「！！！？」
ということで、@kazeburoさんや@fujiwaraさんに
一緒に出ましょうよ〜って誘ったんですけど、2人とも家族と過ごす！って言ってて
ウッ、家族サービス。。では仕方ないですね&amp;hellip;
という流れで、情弱ながらパネラーとして参加してきました。
スタッフのみなさま、参加されたみなさま
パネラーのみなさま、おつかれさまでした！
人生で初めての勉強会がhb qp bp study 新年LT&amp;amp;ビアバッシュ2012で
3月に転職してから、色々アウトプットし出したりした情弱な私が
翌年にqpstudyのパネラーとして参加してるの、本当に場違いな感じだったんですが
勉強会参加ぐらいしかしたことない方が
アイツが出れるならオレだってもっと参加しても良いんじゃん！
みたいな気持ちになって頂けたらいいなと思い、参加しました。
話したことは
####「開発のとき運用を考えられないのは素人」「運用のために開発できないのは二流」 ####「社畜が嫌なら自分に付加価値を付けなければいけない」 ####「DevとかOpsという言葉で自分のフィールドを制限してはいけない」 ####「DevOps、ただのバズワードとして扱って、自分の範囲外のものに目を向けてみるきっかけにしてみては」
みたいな内容を話しました。
基本的にスピリチュアルな話でした。
スピリチュアルといえば、仏教には衆生という概念があります。
元々人間、とか私という自己の存在は西洋文化から入ってきたもの
というのはご存知でしょうか。
例えば、「そこに山がある」という日本語を英語に訳すことは難しいんです。
何故難しいのかというと
 「わたしは山を見ている」
 「その町には山がある」
  など、主体となる存在がないんです。
宗派によって多少解釈が異なることはありますが、
こんな感じで、境界線によって業が産まれるなら
最初からそんな境界線なんて存在しないんじゃないの？
みたいな発想があって、わたしはその発想がすごい好きなんですね。
つまり、DevもOpsもないんです。
自分で境界線を引かない限りは、そこに境界線は産まれないんです。
境界線を引いた瞬間に、制限や争いが発生するんです。
ということで、自分の業務外だとか、関係のないものだと思っていたものに
目を向けてみたり、自分でもやってみるとかすると
新しいことが見つかるかもしれません。
そういう何かのきっかけになれたらいいなと思い、話しました。
もしくは、業の深いインターネットから離れて、仏像を彫るのも良さそうです。</description>
    </item>
    
    <item>
      <title>ディアゴスティーニ社から「週間 蓮華王院本堂(三十三間堂)」が創刊されたら</title>
      <link>https://blog.kenjiskywalker.org/2013/01/25/deagostini-33/</link>
      <pubDate>Fri, 25 Jan 2013 14:17:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/25/deagostini-33/</guid>
      <description>毎号、木造千手観音立像が1体付属。
湛慶をはじめ慶派、院派、円派など、観音像を極限まで再現。
創刊号は本尊千手観音像から
(このシリーズは1002回で完成します(講堂含む))
みたいなものが発売されたら、それを作り上げていくこと自体が仏教観あるし
多分一個人愛読してる人とか手を出さざるを得ない状況なのは待ちがないので
本当に創刊されたらどうしよう&amp;hellip;って今から悩んでいます。</description>
    </item>
    
    <item>
      <title>Redis Sentinelを動かしてみた</title>
      <link>https://blog.kenjiskywalker.org/2013/01/24/redis-sentiel-howto/</link>
      <pubDate>Thu, 24 Jan 2013 16:13:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/24/redis-sentiel-howto/</guid>
      <description>以前、Redis Sentinelを試すというエントリーを書きましたが
もう少し入り込んで検証してみた。
殴り書きの域を出ていないので適時アップデートしていきたい。
検証環境  DATE: 2013/01/25 CentOS 6.3 Redis 2.6.9(remi)  ドキュメント http://redis.io/topics/sentinel
こちらを参考に行います。
Sentinelの設定、および起動方法 $ /usr/local/bin/redis-server /etc/sentinel.conf --sentinel [28498] 25 Jan 01:28:24.447 * Max number of open files set to 10032 _._ _.-``__ &#39;&#39;-._ _.-`` `. `_. &#39;&#39;-._ Redis 2.6.9 (00000000/0) 64 bit .-`` .-```. ```\/ _.,_ &#39;&#39;-._ ( &#39; , .-` | `, ) Running in sentinel mode |`-._`-...-` __...-.``-._|&#39;` _.-&#39;| Port: 26379 | `-._ `.</description>
    </item>
    
    <item>
      <title>Postfixのheader_checksでの否定の条件について</title>
      <link>https://blog.kenjiskywalker.org/2013/01/23/postfix-header_checks/</link>
      <pubDate>Wed, 23 Jan 2013 20:52:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/23/postfix-header_checks/</guid>
      <description>header_checks - Postfix built-in content inspection
regexp_table - format of Postfix regular expression tables
header_checks
!/^(To|From):.*@example\.com*/ REJECT  とすれば、対象の*example.com*のドメイン意外受け付けなくて
ライフチェンジングなのでは！！！！！！！！
と思ったのですが、header_checksの仕様上
ヘッダ全てに対してではなく、1行毎にルールを適用するため
例えば、ヘッダの1行目が
Delivered-To: foo@example.com
である場合、マッチしないと認識されてREJECTされます。
この意味がわからなくてずっと悩んでいました。
メールの破棄の処理をheader_checksの例外処理を利用して行うのは
とてもむずかしいので、素直にSpamAssasinやprocmailなどを利用しましょう！
というお話でした。
(;´д｀)ﾄﾎﾎ…</description>
    </item>
    
    <item>
      <title>fluentdのプラグインを書く練習をする為にsecureログをparseしてZabbixで値が取得できるようにしてみた(設定編)</title>
      <link>https://blog.kenjiskywalker.org/2013/01/20/fluentd-plugin-create-newbie/</link>
      <pubDate>Sun, 20 Jan 2013 18:56:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/20/fluentd-plugin-create-newbie/</guid>
      <description>https://github.com/kenjiskywalker/fluent-plugin-securelog-parser
 ,j;;;;;j,. ---一､ ｀ ―--‐､_ l;;;;;; ｛;;;;;;ゝ T辷iﾌ i f&#39;辷jァ !i;;;;; 全く触ったことがなくてもpluginを書いたらfluentdがわかる ヾ;;;ﾊ ﾉ .::!lﾘ;;rﾞ `Z;i 〈.,_..,. ﾉ;;;;;;;; そんなふうに考えていた時期が ,;ぇﾊ、 ､_,.ｰ-､_&#39;,. ,ｆﾞ: Y;;f. 俺にもありました ~&#39;&#39;戈ヽ ｀二´ r&#39;´:::. `!  最初Postfixのmaillogつくってやろうかなんて
思っていたりした時期もオレにはありました。
しかしログが多様すぎるので、ちょっとこれ最初にやるには敷居高いなー
と思い、だからってあんまり理にかなわないことをしても意味ないな
ということで、/var/log/secureのログを指定した文字列の出現具合を
Zabbixで取得したら面白いかなというアイデアが思いついたので
取り敢えずコードは汚いにしろ、動くまで書いてみたメモです。
プラグイン作成編はこちらから
テスト環境 /etc/fluent-agent-lite.conf
/etc/fluent-agent-lite.conf TAG_PREFIX=&amp;quot;&amp;quot; LOGS=$(cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; secure /var/log/secure EOF ) PRIMARY_SERVER=&amp;quot;0.0.0.0:24224&amp;quot;  /etc/td-agent/td-agent.conf
&amp;lt;source&amp;gt; type forward port 24224 &amp;lt;/source&amp;gt; &amp;lt;match secure&amp;gt; type securelog-parser tag seclog.local &amp;lt;/match&amp;gt; &amp;lt;match seclog.*&amp;gt; type copy &amp;lt;store&amp;gt; type datacounter count_key message aggregate all tag check.</description>
    </item>
    
    <item>
      <title>fluentdのプラグインを書く練習をする為にsecureログをparseしてZabbixで値が取得できるようにしてみた(作成編)</title>
      <link>https://blog.kenjiskywalker.org/2013/01/20/fluentd-plugin-create-newbiee/</link>
      <pubDate>Sun, 20 Jan 2013 17:03:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/20/fluentd-plugin-create-newbiee/</guid>
      <description>https://github.com/kenjiskywalker/fluent-plugin-securelog-parser
 ,j;;;;;j,. ---一､ ｀ ―--‐､_ l;;;;;; ｛;;;;;;ゝ T辷iﾌ i f&#39;辷jァ !i;;;;; 全く触ったことがなくてもpluginを書いたらfluentdがわかる ヾ;;;ﾊ ﾉ .::!lﾘ;;rﾞ `Z;i 〈.,_..,. ﾉ;;;;;;;; そんなふうに考えていた時期が ,;ぇﾊ、 ､_,.ｰ-､_&#39;,. ,ｆﾞ: Y;;f. 俺にもありました ~&#39;&#39;戈ヽ ｀二´ r&#39;´:::. `!  最初Postfixのmaillogつくってやろうかなんて
思っていたりした時期もオレにはありました。
しかしログが多様すぎるので、ちょっとこれ最初にやるには敷居高いなー
と思い、だからってあんまり理にかなわないことをしても意味ないな
ということで、/var/log/secureのログを指定した文字列の出現具合を
Zabbixで取得したら面白いかなというアイデアが思いついたので
取り敢えずコードは汚いにしろ、動くまで書いてみたメモです。
設定編はこちら
作成編 事前にtestが通るまでのものは
超初級！Fluentdのプラグインを書きたくなった時の下地づくりにて作成しています。
本来はもっとスマートな作り方があるのでしょうが、
私は基本的にこの流れで行いました。
 内容を更新する度にrake testでtestが通ることを確認する 変数の状況をp hogeで毎回確認する  この2つの繰り返しでした。
参考  @repeatedlyさんのプラグイン作成の記事 / Software Design 2012年6月号 Writing plugins / fluentd 検証中のtd-agent（fluentd）の設定とか負荷とか / IT 東京 楽しいと思うこと fluentdのプラグインは簡単に作成できる / ぽにくすじゃないだいありー Fluentd plugins  基本はりぴーさんの記事を参考に、取り敢えず片っ端からpluginのソースを読んでいけば</description>
    </item>
    
    <item>
      <title>おしまい姉妹について</title>
      <link>https://blog.kenjiskywalker.org/2013/01/20/cross2013/</link>
      <pubDate>Sun, 20 Jan 2013 13:14:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/20/cross2013/</guid>
      <description>エンジニアサポートCROSS 2013
というイベントに行ってきました。
「おしまい姉妹」という
人類が全く体験したことのないようなイノベーションの話を聞いた。
本当に全くもって空前絶後のソリューションであり
家に帰っても未だその熱は冷めやらない。
仕事は仕事であり、そこに人格は必要ないと思っていたが
全くもってそれはナンセンスであった。
サービスと人、
サービスを終わらせるというそのたったひとつの出来事のためにのみ存在する
「おしまい姉妹」。
もちろんこれは西尾維新先生にラノベ化して頂き
ゆくゆくはシャフト制作のアニメ化は間違いないだろう。
そしてこのソリューションはいずれジャパニメーションの波に乗り、
全世界へ羽ばたいていくだろう。
そしていずれ、サービス管理の正しい在り方として多様な論文や書籍が発行され、
サービス管理部門としてのおしまい姉妹の存在は
デファクトスタンダード化していくだろう。
今日もどこかで、おしまい姉妹たちはそっと
技術者の心の隙間を満たしているのだろう&amp;hellip;
お会いしたかった方にお会いできてよかったです。</description>
    </item>
    
    <item>
      <title>はじめてのOSコードリーディング ――UNIX V6で学ぶカーネルのしくみを電子書籍で買ったのですが</title>
      <link>https://blog.kenjiskywalker.org/2013/01/17/fist-os-code-reading/</link>
      <pubDate>Thu, 17 Jan 2013 10:16:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/17/fist-os-code-reading/</guid>
      <description>はじめてのOSコードリーディング　――UNIX V6で学ぶカーネルのしくみ
参考のソースコードが書いてあって
次の次のページに解説が書いてあったりするので書籍の方が読みやすいとおもいます。
まだ読み始めですが、ユルフワなので3周ぐらいしないと理解できなさそうです。
けど面白いです。</description>
    </item>
    
    <item>
      <title>Redis Sentinelを試す</title>
      <link>https://blog.kenjiskywalker.org/2013/01/15/redis-sentinel/</link>
      <pubDate>Tue, 15 Jan 2013 19:42:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/15/redis-sentinel/</guid>
      <description>某社ではRedisをKeepalivedでフェイルオーバーする構成案 / 酒日記 はてな支店
みたいな構成が使われているとか使われていないとかで、Sentinelはどうなのだろうか
というお話がわいたので、カジュアルに試してみました。
参考：Redis Sentinel Documentation
6379 Port が Master
6380 Port が 6379のSlave
上記内容のRedisのセットがあるとします。
[hoge@example ~]# [hoge@example ~]# redis-cli -p 6379 info | grep role -3 latest_fork_usec:340 # Replication role:master connected_slaves:1 slave0:127.0.0.1,6380,online [hoge@example ~]# redis-cli -p 6380 info | grep role -3 latest_fork_usec:336 # Replication role:slave master_host:127.0.0.1 master_port:6379 master_link_status:up [hoge@example ~]#  sentinel.confはソースファイルから拾ってくるのでも良いし
参考サイトからコピペするでも良いかと。
[hoge@example ~]# cat /etc/sentinel.conf sentinel monitor mymaster 127.0.0.1 6379 1 sentinel down-after-milliseconds mymaster 10000 sentinel failover-timeout mymaster 50000 sentinel can-failover mymaster yes sentinel parallel-syncs mymaster 1 [hoge@example ~]# [hoge@example ~]# [hoge@example ~]# redis-server /etc/sentinel.</description>
    </item>
    
    <item>
      <title>鍼とお灸と黒歴史とSoundCloud</title>
      <link>https://blog.kenjiskywalker.org/2013/01/12/soundcloud/</link>
      <pubDate>Sat, 12 Jan 2013 19:44:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/12/soundcloud/</guid>
      <description>誰しも中2力全開だった時があると思う。
学生の頃DTMやろうと思って
フリーのVSTプラグインで遊んでた頃の曲をSoundCloudに上げた。
https://soundcloud.com/kenjiskywalker
全般的に黒歴史っぽい感じだけど人間っぽいから良いと思った。
音圧高めてスピーカー壊れれば良いとか思ってた頃だった気がする。
あとお腹がヤバかったの胃腸が冷え込んでたみたいで
いつも通ってる鍼とお灸の先生、保険効かないから5000円かかるんだけど
すごいよくしてくれる人で、これでダメだったら大学病院やなー！って思ってたら
全身に鍼とお灸キメたら良くなってきた。東洋の医学すごい。
近所のちょっと大きめの病院、適当な先生多いかもしれないから
不安だったらさっさと大きい病院行った方がお金無駄に使わなくて良さそう。
死にかけたことある人みんなそうだろうけど、何か身体に変調があると
すぐ死を意識してしまう。すごくダサいから止めたい。
みなさん健康には気を付けましょう。</description>
    </item>
    
    <item>
      <title>腹痛</title>
      <link>https://blog.kenjiskywalker.org/2013/01/09/fukutsuu/</link>
      <pubDate>Wed, 09 Jan 2013 20:49:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/09/fukutsuu/</guid>
      <description>お腹が痛くて会社休んでた。
お腹が痛くて会社休みますってすごいウソ感あるなって思った。
念の為病院行って調整薬貰った。
インターネットで似た症状調べたらストレスっぽいかなーって思ったんですけど
って話したら、ストレスは色んな症状出るから。って言われて
そうですね。ってなった。
良い先生だった。</description>
    </item>
    
    <item>
      <title>Faradayを利用してRubyでZabbix APIを叩く #zabbix_jp</title>
      <link>https://blog.kenjiskywalker.org/2013/01/07/faraday-ruby-zabbix-api/</link>
      <pubDate>Mon, 07 Jan 2013 19:26:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/07/faraday-ruby-zabbix-api/</guid>
      <description>こんな感じでイケました。
{% gist 4473915 %}
参考：
- Ruby の HTTP クライアントライブラリ Faraday が便利そう / mitukiii gist
- Zabbix APIを使って値を取ってみる / ike-daiの日記
アクセストークンは、ike-daiさんのブログを参考にcurlコマンドで取得し、
取得したアクセストークンをauthに入れています。</description>
    </item>
    
    <item>
      <title>Zabbixで5分間閾値以下だったらアラート</title>
      <link>https://blog.kenjiskywalker.org/2013/01/07/zabbix-min/</link>
      <pubDate>Mon, 07 Jan 2013 10:53:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/07/zabbix-min/</guid>
      <description>({HostName:net.if.out[eth0,bytes].max(#10)}&amp;lt;50K)  とかで設定すると、アイテムが30秒間隔の場合
30sec * 10 = 300secの間の最大値が全て50Kbps以下であれば
トリガーを発動する。みたいな設定ができる。
({HostName:net.if.out[eth0,bytes].max(300)}&amp;lt;50K)  こっちの方がシンプルでわかりやすいかもしれない。
@fujiwara++
@qryuu++</description>
    </item>
    
    <item>
      <title>ウナギ</title>
      <link>https://blog.kenjiskywalker.org/2013/01/05/unagi/</link>
      <pubDate>Sat, 05 Jan 2013 11:39:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/05/unagi/</guid>
      <description>淡水魚と海水魚と川と海の境目について考えていた。

 ウナギ科魚類がなぜこれほど長距離に及ぶ回遊をするのか、何を目印として元の産卵場所へたどりつくのか、確かなことはわかってない
 かっこいい。
 雌の性成熟は遅い（4–13年、高緯度地帯では6–43年）
 43歳のウナギ、かっこいい。</description>
    </item>
    
    <item>
      <title>超初級！Fluentdのプラグインを書きたくなった時の下地づくり</title>
      <link>https://blog.kenjiskywalker.org/2013/01/05/fluent-pluing/</link>
      <pubDate>Sat, 05 Jan 2013 00:52:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/05/fluent-pluing/</guid>
      <description>fluentdをまともに動かしたことないけど
プラグイン書いたらわかるのでは！！？
と思い立って取り敢えず下地だけつくったのでメモ。
参考  fluentdのためのプラグインをイチから書く手順(bundler版) / tagomorisのメモ置き場
 Writing plugins / fluentd
 fluent-plugin-imkayac / fujiwara
 fluent-plugin-r18 / studio3104  基本はもりす先生の手順にそって行えば問題なし。
参考にオフィシャルのドキュメントと
@fujiwaraさんのシンプルなプラグイン
@studio3104さんの下地を見ながら書くとなおよし。
また、rake testまで通したものを
https://github.com/kenjiskywalker/fluent-plugin-hoge
こちらに上げておきました。ここから遊んでみても良いのではないかと思います。
作成手順 bunldeで作成 $ bundle gem fluent-plugin-hoge $ cd fluent-plugin-hoge/ $ mkdir -p lib/fluent/plugin $ mv lib/fluent-plugin-hoge.rb lib/fluent/plugin/out_hoge.rb $ rm lib/fluent-plugin-hoge/version.rb $ rmdir lib/fluent-plugin-hoge $ mkdir -p test/plugin $ touch test/plugin/test_out_hoge.rb  gemspecファイルの修正 fluent-plugin-hoge.gemspec
# -*- encoding: utf-8 -*- lib = File.</description>
    </item>
    
    <item>
      <title>Zabbix v2.0.4 &#43; nginx v1.0.15 installed</title>
      <link>https://blog.kenjiskywalker.org/2013/01/03/zabbix/</link>
      <pubDate>Thu, 03 Jan 2013 15:38:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/03/zabbix/</guid>
      <description>nginxでZabbix2.0.4をインストールしたのでメモ。
環境  nginx v1.0.15 zabbix v2.0.4 MySQL - 5.5.28 CentOS 6.3  Zabbixをyumでインストール $ yum install zabbix20-server-mysql.x86_64 $ yum install zabbix20-2.0.4-1.el6.x86_64 $ yum install zabbix20-server-mysql-2.0.4-1.el6.x86_64 $ yum install zabbix20-server-2.0.4-1.el6.x86_64  Zabbix用のデータベースを用意 $ mysql &amp;gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#39;********&#39;; &amp;gt; create database zabbix character set utf8;  Zabbixのデータをさきほど作成したデータベースに装入 $ cd /usr/share/zabbix-mysql/ $ mysql -uzabbix -p zabbix &amp;lt; schema.sql $ mysql -uzabbix -p zabbix &amp;lt; images.</description>
    </item>
    
    <item>
      <title>さくらVPSでOctopress</title>
      <link>https://blog.kenjiskywalker.org/2013/01/02/ocococtopress/</link>
      <pubDate>Wed, 02 Jan 2013 19:34:00 +0900</pubDate>
      
      <guid>https://blog.kenjiskywalker.org/2013/01/02/ocococtopress/</guid>
      <description>新年あけましておめでとうございます。
年初めは意識高いのでやろうと思ってたこと実行するのに良い機会ですね。
ということでOctopressを入れてみました。
手順 1. nginxの設定 nginx.confに下記内容を記述
server { listen 8080; server_name blog.kenjiskywalker.org; root /home/blog/; index index.html; access_log /var/log/nginx/blog/access_log skywalker; error_log /var/log/nginx/blog/error_log error;  8080なのは、フロントにvarnishがいるから。
これで blog.kenjiskywalker.org にアクセスが来たら
/home/blog/のディレクトリを見に行くようになる。
2. オフィシャルのドキュメントを読みながらOctopressの設定 Octopress Setup
とくに躓くところはなし。
Deploying
さくらVPSで運用する予定なので
Deploying With Rsyncを読みながら作業。問題なし。
Rakefileはnginxにて設定したように
document_root = &amp;quot;/home/blog/&amp;quot;  /home/blog/を記述。
Configuring Octopress
最低限の設定を行った。 この辺はもうちょっといじくりたい。
 右サイドバーにGithubのリポジトリ表示したり Twitterのストリーミング流したり Google Analyticsの設定したりするのもここで行える  カスタマイズページを右上に表示してみたかったので
default_asides: [asides/about.html,  と*about.html*の設定を追記して
/source/_includes/asides/about.htmlにファイルを設置。
参考：Octopressでサイドバーに簡易プロフィールを表示させよう！
3. Glide Noteさんを参考にvimの設定 Octopressの記事管理用プラグイン、Octoeditor.vimを作った
神様。このエントリーもOctoeditor.vim使って書かせてもらっています！
4. 記事を書いて確認してみる $ rake generate で、source/配下の(記事であればsource/_post/)ファイルをよしなにpublicへゴリゴリしながらつくりあげて $ rake preview で、localhost:4000で確認 $ rake deploy 問題がなければデプロイでfinish！  上記コマンドはすべてOctoeditorで完結しているのですが</description>
    </item>
    
  </channel>
</rss>